START COUNTING
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import collections

RUNINGPART:False  INPART:False
CODE LINE 7 from weakref import proxy

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 8 class Link(object):

ADDED PART Link class Link(object):

RUNINGPART:Link  INPART:True
CODE LINE 9     '''

IDENT: 1
PART LENGTH Link: 2
RUNINGPART:Link  INPART:True
CODE LINE 10     The proper use of __slots__ is to save space in objects.

IDENT: 1
PART LENGTH Link: 3
RUNINGPART:Link  INPART:True
CODE LINE 11     '''

IDENT: 1
PART LENGTH Link: 4
RUNINGPART:Link  INPART:True
CODE LINE 12     __slots__ = 'prev', 'next', 'key', '__weakref__'

IDENT: 1
PART LENGTH Link: 5
RUNINGPART:Link  INPART:True
BLANK LINE 5 

RUNINGPART:Link  INPART:True
CODE LINE 13 class LinkedList(collections.MutableSet):

ADDED PART LinkedList class LinkedList(collections.MutableSet):

RUNINGPART:LinkedList  INPART:True
CODE LINE 14     '''

IDENT: 1
PART LENGTH LinkedList: 2
RUNINGPART:LinkedList  INPART:True
CODE LINE 15     LinkedLink

IDENT: 1
PART LENGTH LinkedList: 3
RUNINGPART:LinkedList  INPART:True
CODE LINE 16     Set the remembers the order elements were added

IDENT: 1
PART LENGTH LinkedList: 4
RUNINGPART:LinkedList  INPART:True
CODE LINE 17     '''

IDENT: 1
PART LENGTH LinkedList: 5
RUNINGPART:LinkedList  INPART:True
BLANK LINE 6 

RUNINGPART:LinkedList  INPART:True
CODE LINE 18     def __init__(self, iterable=None):

IN PART LinkedList  ADD ITEM __init__:     def __init__(self, iterable=None):

RUNINGPART:LinkedList  INPART:True
CODE LINE 19         '''

IDENT: 2
PART LENGTH LinkedList: 7
RUNINGPART:LinkedList  INPART:True
CODE LINE 20         Init

IDENT: 2
PART LENGTH LinkedList: 8
RUNINGPART:LinkedList  INPART:True
CODE LINE 21         '''

IDENT: 2
PART LENGTH LinkedList: 9
RUNINGPART:LinkedList  INPART:True
CODE LINE 22         self.__root = root = Link()         

IDENT: 2
PART LENGTH LinkedList: 10
RUNINGPART:LinkedList  INPART:True
CODE LINE 23         root.prev = root.next = root

IDENT: 2
PART LENGTH LinkedList: 11
RUNINGPART:LinkedList  INPART:True
CODE LINE 24         self.__map = {}                     # key --> link

IDENT: 7
PART LENGTH LinkedList: 12
RUNINGPART:LinkedList  INPART:True
CODE LINE 25         if iterable is not None:

IDENT: 2
PART LENGTH LinkedList: 13
RUNINGPART:LinkedList  INPART:True
CODE LINE 26             self |= iterable

IDENT: 3
PART LENGTH LinkedList: 14
RUNINGPART:LinkedList  INPART:True
BLANK LINE 7 

RUNINGPART:LinkedList  INPART:True
CODE LINE 27     def __len__(self):

IN PART LinkedList  ADD ITEM __len__:     def __len__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 28         '''

IDENT: 2
PART LENGTH LinkedList: 16
RUNINGPART:LinkedList  INPART:True
CODE LINE 29         Length for the LinkedList

IDENT: 2
PART LENGTH LinkedList: 17
RUNINGPART:LinkedList  INPART:True
CODE LINE 30         '''

IDENT: 2
PART LENGTH LinkedList: 18
RUNINGPART:LinkedList  INPART:True
CODE LINE 31         return len(self.__map)

IDENT: 2
PART LENGTH LinkedList: 19
RUNINGPART:LinkedList  INPART:True
BLANK LINE 8 

RUNINGPART:LinkedList  INPART:True
CODE LINE 32     def __contains__(self, key):

IN PART LinkedList  ADD ITEM __contains__:     def __contains__(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 33         '''

IDENT: 2
PART LENGTH LinkedList: 21
RUNINGPART:LinkedList  INPART:True
CODE LINE 34         Return Content of LinkedList

IDENT: 2
PART LENGTH LinkedList: 22
RUNINGPART:LinkedList  INPART:True
CODE LINE 35         '''

IDENT: 2
PART LENGTH LinkedList: 23
RUNINGPART:LinkedList  INPART:True
CODE LINE 36         return key in self.__map

IDENT: 2
PART LENGTH LinkedList: 24
RUNINGPART:LinkedList  INPART:True
BLANK LINE 9 

RUNINGPART:LinkedList  INPART:True
CODE LINE 37     def add(self, key):

IN PART LinkedList  ADD ITEM add:     def add(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 38         '''

IDENT: 2
PART LENGTH LinkedList: 26
RUNINGPART:LinkedList  INPART:True
CODE LINE 39         Add Node

IDENT: 2
PART LENGTH LinkedList: 27
RUNINGPART:LinkedList  INPART:True
CODE LINE 40         Store new key in a new link at the end of the linked list

IDENT: 2
PART LENGTH LinkedList: 28
RUNINGPART:LinkedList  INPART:True
CODE LINE 41         '''

IDENT: 2
PART LENGTH LinkedList: 29
RUNINGPART:LinkedList  INPART:True
CODE LINE 42         if key not in self.__map:

IDENT: 2
PART LENGTH LinkedList: 30
RUNINGPART:LinkedList  INPART:True
CODE LINE 43             '''

IDENT: 3
PART LENGTH LinkedList: 31
RUNINGPART:LinkedList  INPART:True
CODE LINE 44             Not Element Eq in the list

IDENT: 3
PART LENGTH LinkedList: 32
RUNINGPART:LinkedList  INPART:True
CODE LINE 45             '''

IDENT: 3
PART LENGTH LinkedList: 33
RUNINGPART:LinkedList  INPART:True
CODE LINE 46             self.__map[key] = link = Link()            

IDENT: 3
PART LENGTH LinkedList: 34
RUNINGPART:LinkedList  INPART:True
CODE LINE 47             root = self.__root

IDENT: 3
PART LENGTH LinkedList: 35
RUNINGPART:LinkedList  INPART:True
CODE LINE 48             last = root.prev

IDENT: 3
PART LENGTH LinkedList: 36
RUNINGPART:LinkedList  INPART:True
CODE LINE 49             link.prev, link.next, link.key = last, root, key

IDENT: 3
PART LENGTH LinkedList: 37
RUNINGPART:LinkedList  INPART:True
CODE LINE 50             last.next = root.prev = proxy(link)

IDENT: 3
PART LENGTH LinkedList: 38
RUNINGPART:LinkedList  INPART:True
BLANK LINE 10     

RUNINGPART:LinkedList  INPART:True
CODE LINE 51     def head(self):

IN PART LinkedList  ADD ITEM head:     def head(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 52         '''

IDENT: 2
PART LENGTH LinkedList: 40
RUNINGPART:LinkedList  INPART:True
CODE LINE 53         Return Head

IDENT: 2
PART LENGTH LinkedList: 41
RUNINGPART:LinkedList  INPART:True
CODE LINE 54         '''

IDENT: 2
PART LENGTH LinkedList: 42
RUNINGPART:LinkedList  INPART:True
CODE LINE 55         return list(self)[0],list(self)[-1] 

IDENT: 2
PART LENGTH LinkedList: 43
RUNINGPART:LinkedList  INPART:True
BLANK LINE 11         

RUNINGPART:LinkedList  INPART:True
BLANK LINE 12 

RUNINGPART:LinkedList  INPART:True
CODE LINE 56     def discard(self, key):

IN PART LinkedList  ADD ITEM discard:     def discard(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 57         '''

IDENT: 2
PART LENGTH LinkedList: 45
RUNINGPART:LinkedList  INPART:True
CODE LINE 58         Remove an existing item using self.__map to find the link which is

IDENT: 2
PART LENGTH LinkedList: 46
RUNINGPART:LinkedList  INPART:True
CODE LINE 59         then removed by updating the links in the predecessor and successors.

IDENT: 2
PART LENGTH LinkedList: 47
RUNINGPART:LinkedList  INPART:True
CODE LINE 60         '''

IDENT: 2
PART LENGTH LinkedList: 48
RUNINGPART:LinkedList  INPART:True
CODE LINE 61         if key in self.__map:

IDENT: 2
PART LENGTH LinkedList: 49
RUNINGPART:LinkedList  INPART:True
CODE LINE 62             link = self.__map.pop(key)

IDENT: 3
PART LENGTH LinkedList: 50
RUNINGPART:LinkedList  INPART:True
CODE LINE 63             link.prev.next = link.next

IDENT: 3
PART LENGTH LinkedList: 51
RUNINGPART:LinkedList  INPART:True
CODE LINE 64             link.next.prev = link.prev

IDENT: 3
PART LENGTH LinkedList: 52
RUNINGPART:LinkedList  INPART:True
BLANK LINE 13 

RUNINGPART:LinkedList  INPART:True
CODE LINE 65     def __iter__(self):

IN PART LinkedList  ADD ITEM __iter__:     def __iter__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 66         '''

IDENT: 2
PART LENGTH LinkedList: 54
RUNINGPART:LinkedList  INPART:True
CODE LINE 67         iteration for the Next Method

IDENT: 2
PART LENGTH LinkedList: 55
RUNINGPART:LinkedList  INPART:True
CODE LINE 68         '''

IDENT: 2
PART LENGTH LinkedList: 56
RUNINGPART:LinkedList  INPART:True
CODE LINE 69         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 57
RUNINGPART:LinkedList  INPART:True
CODE LINE 70         curr = root.next

IDENT: 2
PART LENGTH LinkedList: 58
RUNINGPART:LinkedList  INPART:True
CODE LINE 71         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 59
RUNINGPART:LinkedList  INPART:True
CODE LINE 72             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 60
RUNINGPART:LinkedList  INPART:True
CODE LINE 73             curr = curr.next

IDENT: 3
PART LENGTH LinkedList: 61
RUNINGPART:LinkedList  INPART:True
BLANK LINE 14 

RUNINGPART:LinkedList  INPART:True
CODE LINE 74     def __reversed__(self):

IN PART LinkedList  ADD ITEM __reversed__:     def __reversed__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 75         '''

IDENT: 2
PART LENGTH LinkedList: 63
RUNINGPART:LinkedList  INPART:True
CODE LINE 76         iteration in reverse mode Method

IDENT: 2
PART LENGTH LinkedList: 64
RUNINGPART:LinkedList  INPART:True
CODE LINE 77         '''

IDENT: 2
PART LENGTH LinkedList: 65
RUNINGPART:LinkedList  INPART:True
CODE LINE 78         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 66
RUNINGPART:LinkedList  INPART:True
CODE LINE 79         curr = root.prev

IDENT: 2
PART LENGTH LinkedList: 67
RUNINGPART:LinkedList  INPART:True
CODE LINE 80         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 68
RUNINGPART:LinkedList  INPART:True
CODE LINE 81             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 69
RUNINGPART:LinkedList  INPART:True
CODE LINE 82             curr = curr.prev

IDENT: 3
PART LENGTH LinkedList: 70
RUNINGPART:LinkedList  INPART:True
BLANK LINE 15 

RUNINGPART:LinkedList  INPART:True
CODE LINE 83     def pop(self, last=True):

IN PART LinkedList  ADD ITEM pop:     def pop(self, last=True):

RUNINGPART:LinkedList  INPART:True
CODE LINE 84         '''

IDENT: 2
PART LENGTH LinkedList: 72
RUNINGPART:LinkedList  INPART:True
CODE LINE 85         pop key

IDENT: 2
PART LENGTH LinkedList: 73
RUNINGPART:LinkedList  INPART:True
CODE LINE 86         '''

IDENT: 2
PART LENGTH LinkedList: 74
RUNINGPART:LinkedList  INPART:True
CODE LINE 87         if not self:

IDENT: 2
PART LENGTH LinkedList: 75
RUNINGPART:LinkedList  INPART:True
CODE LINE 88             raise KeyError('set is empty')

IDENT: 3
PART LENGTH LinkedList: 76
RUNINGPART:LinkedList  INPART:True
CODE LINE 89         key = next(reversed(self)) if last else next(iter(self))

IDENT: 2
PART LENGTH LinkedList: 77
RUNINGPART:LinkedList  INPART:True
CODE LINE 90         self.discard(key)

IDENT: 2
PART LENGTH LinkedList: 78
RUNINGPART:LinkedList  INPART:True
CODE LINE 91         return key

IDENT: 2
PART LENGTH LinkedList: 79
RUNINGPART:LinkedList  INPART:True
BLANK LINE 16 

RUNINGPART:LinkedList  INPART:True
CODE LINE 92     def __repr__(self):

IN PART LinkedList  ADD ITEM __repr__:     def __repr__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 93         '''

IDENT: 2
PART LENGTH LinkedList: 81
RUNINGPART:LinkedList  INPART:True
CODE LINE 94         String Conversion representation of object LinkeList repr()

IDENT: 2
PART LENGTH LinkedList: 82
RUNINGPART:LinkedList  INPART:True
CODE LINE 95         '''

IDENT: 2
PART LENGTH LinkedList: 83
RUNINGPART:LinkedList  INPART:True
CODE LINE 96         if not self:

IDENT: 2
PART LENGTH LinkedList: 84
RUNINGPART:LinkedList  INPART:True
CODE LINE 97             return '%s()' % (self.__class__.__name__,)

IDENT: 3
PART LENGTH LinkedList: 85
RUNINGPART:LinkedList  INPART:True
CODE LINE 98         return '%s(%r)' % (self.__class__.__name__, list(self))

IDENT: 2
PART LENGTH LinkedList: 86
RUNINGPART:LinkedList  INPART:True
BLANK LINE 17 

RUNINGPART:LinkedList  INPART:True
CODE LINE 99     def __eq__(self, other):

IN PART LinkedList  ADD ITEM __eq__:     def __eq__(self, other):

RUNINGPART:LinkedList  INPART:True
CODE LINE 100         '''

IDENT: 2
PART LENGTH LinkedList: 88
RUNINGPART:LinkedList  INPART:True
CODE LINE 101         Method for de Equal comparation.

IDENT: 2
PART LENGTH LinkedList: 89
RUNINGPART:LinkedList  INPART:True
CODE LINE 102         '''

IDENT: 2
PART LENGTH LinkedList: 90
RUNINGPART:LinkedList  INPART:True
CODE LINE 103         if isinstance(other, LinkedList):

IDENT: 2
PART LENGTH LinkedList: 91
RUNINGPART:LinkedList  INPART:True
CODE LINE 104             return len(self) == len(other) and list(self) == list(other)

IDENT: 3
PART LENGTH LinkedList: 92
RUNINGPART:LinkedList  INPART:True
CODE LINE 105         return not self.isdisjoint(other)

IDENT: 2
PART LENGTH LinkedList: 93
===TOTAL===
 CODE LINES:105
 PARTS:{'Link': <__main__.Item object at 0x7f5acc78ef50>, 'LinkedList': <__main__.Item object at 0x7f5acc78ec50>} 
 TOTAL LINES:142 
 BLANK LINE:17 
 COMMEN_LINES:20
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", 

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67 		  metavar="file")

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 68     (options, args) = parser.parse_args()

RUNINGPART:main  INPART:False
CODE LINE 69     log.info("START APP")

RUNINGPART:main  INPART:False
CODE LINE 70     if options.file:

RUNINGPART:main  INPART:False
CODE LINE 71         if options.std or options.mean:

RUNINGPART:main  INPART:False
CODE LINE 72             dataset=read_file(options.file)

RUNINGPART:main  INPART:False
CODE LINE 73             if options.std:

RUNINGPART:main  INPART:False
CODE LINE 74                 Std(dataset)

RUNINGPART:main  INPART:False
CODE LINE 75             if options.mean:

RUNINGPART:main  INPART:False
CODE LINE 76                 Mean(dataset)

RUNINGPART:main  INPART:False
CODE LINE 77         else:

RUNINGPART:main  INPART:False
CODE LINE 78              parser.error("please set calculation,\n Please use -h for help")

RUNINGPART:main  INPART:False
CODE LINE 79     else:

RUNINGPART:main  INPART:False
CODE LINE 80         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

RUNINGPART:main  INPART:False
BLANK LINE 11 

RUNINGPART:main  INPART:False
CODE LINE 81 if __name__=='__main__':

RUNINGPART:main  INPART:False
CODE LINE 82     main()

===TOTAL===
 CODE LINES:82
 PARTS:{'Std': <__main__.Item object at 0x7f6795582fd0>, 'main': <__main__.Item object at 0x7f679558a110>, 'read_file': <__main__.Item object at 0x7f679558a090>, 'Mean': <__main__.Item object at 0x7f6795582f10>} 
 TOTAL LINES:115 
 BLANK LINE:11 
 COMMEN_LINES:22
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", 

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67 		  metavar="file")

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 68     (options, args) = parser.parse_args()

RUNINGPART:main  INPART:False
CODE LINE 69     log.info("START APP")

RUNINGPART:main  INPART:False
CODE LINE 70     if options.file:

RUNINGPART:main  INPART:False
CODE LINE 71         if options.std or options.mean:

RUNINGPART:main  INPART:False
CODE LINE 72             dataset=read_file(options.file)

RUNINGPART:main  INPART:False
CODE LINE 73             if options.std:

RUNINGPART:main  INPART:False
CODE LINE 74                 Std(dataset)

RUNINGPART:main  INPART:False
CODE LINE 75             if options.mean:

RUNINGPART:main  INPART:False
CODE LINE 76                 Mean(dataset)

RUNINGPART:main  INPART:False
CODE LINE 77         else:

RUNINGPART:main  INPART:False
CODE LINE 78              parser.error("please set calculation,\n Please use -h for help")

RUNINGPART:main  INPART:False
CODE LINE 79     else:

RUNINGPART:main  INPART:False
CODE LINE 80         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

RUNINGPART:main  INPART:False
BLANK LINE 11 

RUNINGPART:main  INPART:False
CODE LINE 81 if __name__=='__main__':

RUNINGPART:main  INPART:False
CODE LINE 82     main()

===TOTAL===
 CODE LINES:82
 PARTS:{'Std': <__main__.Item object at 0x7f411e432fd0>, 'main': <__main__.Item object at 0x7f411e4380d0>, 'read_file': <__main__.Item object at 0x7f411e438050>, 'Mean': <__main__.Item object at 0x7f411e432ed0>} 
 TOTAL LINES:115 
 BLANK LINE:11 
 COMMEN_LINES:22
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import collections

RUNINGPART:False  INPART:False
CODE LINE 7 from weakref import proxy

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 8 class Link(object):

ADDED PART Link class Link(object):

RUNINGPART:Link  INPART:True
CODE LINE 9     '''

IDENT: 1
PART LENGTH Link: 2
RUNINGPART:Link  INPART:True
CODE LINE 10     The proper use of __slots__ is to save space in objects.

IDENT: 1
PART LENGTH Link: 3
RUNINGPART:Link  INPART:True
CODE LINE 11     '''

IDENT: 1
PART LENGTH Link: 4
RUNINGPART:Link  INPART:True
CODE LINE 12     __slots__ = 'prev', 'next', 'key', '__weakref__'

IDENT: 1
PART LENGTH Link: 5
RUNINGPART:Link  INPART:True
BLANK LINE 5 

RUNINGPART:Link  INPART:True
CODE LINE 13 class LinkedList(collections.MutableSet):

ADDED PART LinkedList class LinkedList(collections.MutableSet):

RUNINGPART:LinkedList  INPART:True
CODE LINE 14     '''

IDENT: 1
PART LENGTH LinkedList: 2
RUNINGPART:LinkedList  INPART:True
CODE LINE 15     LinkedLink

IDENT: 1
PART LENGTH LinkedList: 3
RUNINGPART:LinkedList  INPART:True
CODE LINE 16     Set the remembers the order elements were added

IDENT: 1
PART LENGTH LinkedList: 4
RUNINGPART:LinkedList  INPART:True
CODE LINE 17     '''

IDENT: 1
PART LENGTH LinkedList: 5
RUNINGPART:LinkedList  INPART:True
BLANK LINE 6 

RUNINGPART:LinkedList  INPART:True
CODE LINE 18     def __init__(self, iterable=None):

IN PART LinkedList  ADD ITEM __init__:     def __init__(self, iterable=None):

RUNINGPART:LinkedList  INPART:True
CODE LINE 19         '''

IDENT: 2
PART LENGTH LinkedList: 7
RUNINGPART:LinkedList  INPART:True
CODE LINE 20         Init

IDENT: 2
PART LENGTH LinkedList: 8
RUNINGPART:LinkedList  INPART:True
CODE LINE 21         '''

IDENT: 2
PART LENGTH LinkedList: 9
RUNINGPART:LinkedList  INPART:True
CODE LINE 22         self.__root = root = Link()         

IDENT: 2
PART LENGTH LinkedList: 10
RUNINGPART:LinkedList  INPART:True
CODE LINE 23         root.prev = root.next = root

IDENT: 2
PART LENGTH LinkedList: 11
RUNINGPART:LinkedList  INPART:True
CODE LINE 24         self.__map = {}                     # key --> link

IDENT: 7
PART LENGTH LinkedList: 12
RUNINGPART:LinkedList  INPART:True
CODE LINE 25         if iterable is not None:

IDENT: 2
PART LENGTH LinkedList: 13
RUNINGPART:LinkedList  INPART:True
CODE LINE 26             self |= iterable

IDENT: 3
PART LENGTH LinkedList: 14
RUNINGPART:LinkedList  INPART:True
BLANK LINE 7 

RUNINGPART:LinkedList  INPART:True
CODE LINE 27     def __len__(self):

IN PART LinkedList  ADD ITEM __len__:     def __len__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 28         '''

IDENT: 2
PART LENGTH LinkedList: 16
RUNINGPART:LinkedList  INPART:True
CODE LINE 29         Length for the LinkedList

IDENT: 2
PART LENGTH LinkedList: 17
RUNINGPART:LinkedList  INPART:True
CODE LINE 30         '''

IDENT: 2
PART LENGTH LinkedList: 18
RUNINGPART:LinkedList  INPART:True
CODE LINE 31         return len(self.__map)

IDENT: 2
PART LENGTH LinkedList: 19
RUNINGPART:LinkedList  INPART:True
BLANK LINE 8 

RUNINGPART:LinkedList  INPART:True
CODE LINE 32     def __contains__(self, key):

IN PART LinkedList  ADD ITEM __contains__:     def __contains__(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 33         '''

IDENT: 2
PART LENGTH LinkedList: 21
RUNINGPART:LinkedList  INPART:True
CODE LINE 34         Return Content of LinkedList

IDENT: 2
PART LENGTH LinkedList: 22
RUNINGPART:LinkedList  INPART:True
CODE LINE 35         '''

IDENT: 2
PART LENGTH LinkedList: 23
RUNINGPART:LinkedList  INPART:True
CODE LINE 36         return key in self.__map

IDENT: 2
PART LENGTH LinkedList: 24
RUNINGPART:LinkedList  INPART:True
BLANK LINE 9 

RUNINGPART:LinkedList  INPART:True
CODE LINE 37     def add(self, key):

IN PART LinkedList  ADD ITEM add:     def add(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 38         '''

IDENT: 2
PART LENGTH LinkedList: 26
RUNINGPART:LinkedList  INPART:True
CODE LINE 39         Add Node

IDENT: 2
PART LENGTH LinkedList: 27
RUNINGPART:LinkedList  INPART:True
CODE LINE 40         Store new key in a new link at the end of the linked list

IDENT: 2
PART LENGTH LinkedList: 28
RUNINGPART:LinkedList  INPART:True
CODE LINE 41         '''

IDENT: 2
PART LENGTH LinkedList: 29
RUNINGPART:LinkedList  INPART:True
CODE LINE 42         if key not in self.__map:

IDENT: 2
PART LENGTH LinkedList: 30
RUNINGPART:LinkedList  INPART:True
CODE LINE 43             '''

IDENT: 3
PART LENGTH LinkedList: 31
RUNINGPART:LinkedList  INPART:True
CODE LINE 44             Not Element Eq in the list

IDENT: 3
PART LENGTH LinkedList: 32
RUNINGPART:LinkedList  INPART:True
CODE LINE 45             '''

IDENT: 3
PART LENGTH LinkedList: 33
RUNINGPART:LinkedList  INPART:True
CODE LINE 46             self.__map[key] = link = Link()            

IDENT: 3
PART LENGTH LinkedList: 34
RUNINGPART:LinkedList  INPART:True
CODE LINE 47             root = self.__root

IDENT: 3
PART LENGTH LinkedList: 35
RUNINGPART:LinkedList  INPART:True
CODE LINE 48             last = root.prev

IDENT: 3
PART LENGTH LinkedList: 36
RUNINGPART:LinkedList  INPART:True
CODE LINE 49             link.prev, link.next, link.key = last, root, key

IDENT: 3
PART LENGTH LinkedList: 37
RUNINGPART:LinkedList  INPART:True
CODE LINE 50             last.next = root.prev = proxy(link)

IDENT: 3
PART LENGTH LinkedList: 38
RUNINGPART:LinkedList  INPART:True
BLANK LINE 10     

RUNINGPART:LinkedList  INPART:True
CODE LINE 51     def head(self):

IN PART LinkedList  ADD ITEM head:     def head(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 52         '''

IDENT: 2
PART LENGTH LinkedList: 40
RUNINGPART:LinkedList  INPART:True
CODE LINE 53         Return Head

IDENT: 2
PART LENGTH LinkedList: 41
RUNINGPART:LinkedList  INPART:True
CODE LINE 54         '''

IDENT: 2
PART LENGTH LinkedList: 42
RUNINGPART:LinkedList  INPART:True
CODE LINE 55         return list(self)[0],list(self)[-1] 

IDENT: 2
PART LENGTH LinkedList: 43
RUNINGPART:LinkedList  INPART:True
BLANK LINE 11         

RUNINGPART:LinkedList  INPART:True
BLANK LINE 12 

RUNINGPART:LinkedList  INPART:True
CODE LINE 56     def discard(self, key):

IN PART LinkedList  ADD ITEM discard:     def discard(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 57         '''

IDENT: 2
PART LENGTH LinkedList: 45
RUNINGPART:LinkedList  INPART:True
CODE LINE 58         Remove an existing item using self.__map to find the link which is

IDENT: 2
PART LENGTH LinkedList: 46
RUNINGPART:LinkedList  INPART:True
CODE LINE 59         then removed by updating the links in the predecessor and successors.

IDENT: 2
PART LENGTH LinkedList: 47
RUNINGPART:LinkedList  INPART:True
CODE LINE 60         '''

IDENT: 2
PART LENGTH LinkedList: 48
RUNINGPART:LinkedList  INPART:True
CODE LINE 61         if key in self.__map:

IDENT: 2
PART LENGTH LinkedList: 49
RUNINGPART:LinkedList  INPART:True
CODE LINE 62             link = self.__map.pop(key)

IDENT: 3
PART LENGTH LinkedList: 50
RUNINGPART:LinkedList  INPART:True
CODE LINE 63             link.prev.next = link.next

IDENT: 3
PART LENGTH LinkedList: 51
RUNINGPART:LinkedList  INPART:True
CODE LINE 64             link.next.prev = link.prev

IDENT: 3
PART LENGTH LinkedList: 52
RUNINGPART:LinkedList  INPART:True
BLANK LINE 13 

RUNINGPART:LinkedList  INPART:True
CODE LINE 65     def __iter__(self):

IN PART LinkedList  ADD ITEM __iter__:     def __iter__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 66         '''

IDENT: 2
PART LENGTH LinkedList: 54
RUNINGPART:LinkedList  INPART:True
CODE LINE 67         iteration for the Next Method

IDENT: 2
PART LENGTH LinkedList: 55
RUNINGPART:LinkedList  INPART:True
CODE LINE 68         '''

IDENT: 2
PART LENGTH LinkedList: 56
RUNINGPART:LinkedList  INPART:True
CODE LINE 69         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 57
RUNINGPART:LinkedList  INPART:True
CODE LINE 70         curr = root.next

IDENT: 2
PART LENGTH LinkedList: 58
RUNINGPART:LinkedList  INPART:True
CODE LINE 71         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 59
RUNINGPART:LinkedList  INPART:True
CODE LINE 72             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 60
RUNINGPART:LinkedList  INPART:True
CODE LINE 73             curr = curr.next

IDENT: 3
PART LENGTH LinkedList: 61
RUNINGPART:LinkedList  INPART:True
BLANK LINE 14 

RUNINGPART:LinkedList  INPART:True
CODE LINE 74     def __reversed__(self):

IN PART LinkedList  ADD ITEM __reversed__:     def __reversed__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 75         '''

IDENT: 2
PART LENGTH LinkedList: 63
RUNINGPART:LinkedList  INPART:True
CODE LINE 76         iteration in reverse mode Method

IDENT: 2
PART LENGTH LinkedList: 64
RUNINGPART:LinkedList  INPART:True
CODE LINE 77         '''

IDENT: 2
PART LENGTH LinkedList: 65
RUNINGPART:LinkedList  INPART:True
CODE LINE 78         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 66
RUNINGPART:LinkedList  INPART:True
CODE LINE 79         curr = root.prev

IDENT: 2
PART LENGTH LinkedList: 67
RUNINGPART:LinkedList  INPART:True
CODE LINE 80         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 68
RUNINGPART:LinkedList  INPART:True
CODE LINE 81             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 69
RUNINGPART:LinkedList  INPART:True
CODE LINE 82             curr = curr.prev

IDENT: 3
PART LENGTH LinkedList: 70
RUNINGPART:LinkedList  INPART:True
BLANK LINE 15 

RUNINGPART:LinkedList  INPART:True
CODE LINE 83     def pop(self, last=True):

IN PART LinkedList  ADD ITEM pop:     def pop(self, last=True):

RUNINGPART:LinkedList  INPART:True
CODE LINE 84         '''

IDENT: 2
PART LENGTH LinkedList: 72
RUNINGPART:LinkedList  INPART:True
CODE LINE 85         pop key

IDENT: 2
PART LENGTH LinkedList: 73
RUNINGPART:LinkedList  INPART:True
CODE LINE 86         '''

IDENT: 2
PART LENGTH LinkedList: 74
RUNINGPART:LinkedList  INPART:True
CODE LINE 87         if not self:

IDENT: 2
PART LENGTH LinkedList: 75
RUNINGPART:LinkedList  INPART:True
CODE LINE 88             raise KeyError('set is empty')

IDENT: 3
PART LENGTH LinkedList: 76
RUNINGPART:LinkedList  INPART:True
CODE LINE 89         key = next(reversed(self)) if last else next(iter(self))

IDENT: 2
PART LENGTH LinkedList: 77
RUNINGPART:LinkedList  INPART:True
CODE LINE 90         self.discard(key)

IDENT: 2
PART LENGTH LinkedList: 78
RUNINGPART:LinkedList  INPART:True
CODE LINE 91         return key

IDENT: 2
PART LENGTH LinkedList: 79
RUNINGPART:LinkedList  INPART:True
BLANK LINE 16 

RUNINGPART:LinkedList  INPART:True
CODE LINE 92     def __repr__(self):

IN PART LinkedList  ADD ITEM __repr__:     def __repr__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 93         '''

IDENT: 2
PART LENGTH LinkedList: 81
RUNINGPART:LinkedList  INPART:True
CODE LINE 94         String Conversion representation of object LinkeList repr()

IDENT: 2
PART LENGTH LinkedList: 82
RUNINGPART:LinkedList  INPART:True
CODE LINE 95         '''

IDENT: 2
PART LENGTH LinkedList: 83
RUNINGPART:LinkedList  INPART:True
CODE LINE 96         if not self:

IDENT: 2
PART LENGTH LinkedList: 84
RUNINGPART:LinkedList  INPART:True
CODE LINE 97             return '%s()' % (self.__class__.__name__,)

IDENT: 3
PART LENGTH LinkedList: 85
RUNINGPART:LinkedList  INPART:True
CODE LINE 98         return '%s(%r)' % (self.__class__.__name__, list(self))

IDENT: 2
PART LENGTH LinkedList: 86
RUNINGPART:LinkedList  INPART:True
BLANK LINE 17 

RUNINGPART:LinkedList  INPART:True
CODE LINE 99     def __eq__(self, other):

IN PART LinkedList  ADD ITEM __eq__:     def __eq__(self, other):

RUNINGPART:LinkedList  INPART:True
CODE LINE 100         '''

IDENT: 2
PART LENGTH LinkedList: 88
RUNINGPART:LinkedList  INPART:True
CODE LINE 101         Method for de Equal comparation.

IDENT: 2
PART LENGTH LinkedList: 89
RUNINGPART:LinkedList  INPART:True
CODE LINE 102         '''

IDENT: 2
PART LENGTH LinkedList: 90
RUNINGPART:LinkedList  INPART:True
CODE LINE 103         if isinstance(other, LinkedList):

IDENT: 2
PART LENGTH LinkedList: 91
RUNINGPART:LinkedList  INPART:True
CODE LINE 104             return len(self) == len(other) and list(self) == list(other)

IDENT: 3
PART LENGTH LinkedList: 92
RUNINGPART:LinkedList  INPART:True
CODE LINE 105         return not self.isdisjoint(other)

IDENT: 2
PART LENGTH LinkedList: 93
===TOTAL===
 CODE LINES:105
 PARTS:{'Link': <__main__.Item object at 0x7f068b5f4f10>, 'LinkedList': <__main__.Item object at 0x7f068b5f4c10>} 
 TOTAL LINES:142 
 BLANK LINE:17 
 COMMEN_LINES:20
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", 

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67 		  metavar="file")

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 68     (options, args) = parser.parse_args()

RUNINGPART:main  INPART:False
CODE LINE 69     log.info("START APP")

RUNINGPART:main  INPART:False
CODE LINE 70     if options.file:

RUNINGPART:main  INPART:False
CODE LINE 71         if options.std or options.mean:

RUNINGPART:main  INPART:False
CODE LINE 72             dataset=read_file(options.file)

RUNINGPART:main  INPART:False
CODE LINE 73             if options.std:

RUNINGPART:main  INPART:False
CODE LINE 74                 Std(dataset)

RUNINGPART:main  INPART:False
CODE LINE 75             if options.mean:

RUNINGPART:main  INPART:False
CODE LINE 76                 Mean(dataset)

RUNINGPART:main  INPART:False
CODE LINE 77         else:

RUNINGPART:main  INPART:False
CODE LINE 78              parser.error("please set calculation,\n Please use -h for help")

RUNINGPART:main  INPART:False
CODE LINE 79     else:

RUNINGPART:main  INPART:False
CODE LINE 80         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

RUNINGPART:main  INPART:False
BLANK LINE 11 

RUNINGPART:main  INPART:False
CODE LINE 81 if __name__=='__main__':

RUNINGPART:main  INPART:False
CODE LINE 82     main()

===TOTAL===
 CODE LINES:82
 PARTS:{'Std': <__main__.Item object at 0x7f8c4fdaffd0>, 'main': <__main__.Item object at 0x7f8c4fdb50d0>, 'read_file': <__main__.Item object at 0x7f8c4fdb5050>, 'Mean': <__main__.Item object at 0x7f8c4fdafed0>} 
 TOTAL LINES:115 
 BLANK LINE:11 
 COMMEN_LINES:22
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", 

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67 		  metavar="file")

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 68     (options, args) = parser.parse_args()

RUNINGPART:main  INPART:False
CODE LINE 69     log.info("START APP")

RUNINGPART:main  INPART:False
CODE LINE 70     if options.file:

RUNINGPART:main  INPART:False
CODE LINE 71         if options.std or options.mean:

RUNINGPART:main  INPART:False
CODE LINE 72             dataset=read_file(options.file)

RUNINGPART:main  INPART:False
CODE LINE 73             if options.std:

RUNINGPART:main  INPART:False
CODE LINE 74                 Std(dataset)

RUNINGPART:main  INPART:False
CODE LINE 75             if options.mean:

RUNINGPART:main  INPART:False
CODE LINE 76                 Mean(dataset)

RUNINGPART:main  INPART:False
CODE LINE 77         else:

RUNINGPART:main  INPART:False
CODE LINE 78              parser.error("please set calculation,\n Please use -h for help")

RUNINGPART:main  INPART:False
CODE LINE 79     else:

RUNINGPART:main  INPART:False
CODE LINE 80         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

RUNINGPART:main  INPART:False
BLANK LINE 11 

RUNINGPART:main  INPART:False
CODE LINE 81 if __name__=='__main__':

RUNINGPART:main  INPART:False
CODE LINE 82     main()

===TOTAL===
 CODE LINES:82
 PARTS:{'Std': <__main__.Item object at 0x7fea1485ffd0>, 'main': <__main__.Item object at 0x7fea148650d0>, 'read_file': <__main__.Item object at 0x7fea14865050>, 'Mean': <__main__.Item object at 0x7fea1485fed0>} 
 TOTAL LINES:115 
 BLANK LINE:11 
 COMMEN_LINES:22
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", 

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67 		  metavar="file")

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 68     (options, args) = parser.parse_args()

RUNINGPART:main  INPART:False
CODE LINE 69     log.info("START APP")

RUNINGPART:main  INPART:False
CODE LINE 70     if options.file:

RUNINGPART:main  INPART:False
CODE LINE 71         if options.std or options.mean:

RUNINGPART:main  INPART:False
CODE LINE 72             dataset=read_file(options.file)

RUNINGPART:main  INPART:False
CODE LINE 73             if options.std:

RUNINGPART:main  INPART:False
CODE LINE 74                 Std(dataset)

RUNINGPART:main  INPART:False
CODE LINE 75             if options.mean:

RUNINGPART:main  INPART:False
CODE LINE 76                 Mean(dataset)

RUNINGPART:main  INPART:False
CODE LINE 77         else:

RUNINGPART:main  INPART:False
CODE LINE 78              parser.error("please set calculation,\n Please use -h for help")

RUNINGPART:main  INPART:False
CODE LINE 79     else:

RUNINGPART:main  INPART:False
CODE LINE 80         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

RUNINGPART:main  INPART:False
BLANK LINE 11 

RUNINGPART:main  INPART:False
CODE LINE 81 if __name__=='__main__':

RUNINGPART:main  INPART:False
CODE LINE 82     main()

===TOTAL===
 CODE LINES:82
 PARTS:{'Std': <__main__.Item object at 0x7f17fdd81fd0>, 'main': <__main__.Item object at 0x7f17fdd870d0>, 'read_file': <__main__.Item object at 0x7f17fdd87050>, 'Mean': <__main__.Item object at 0x7f17fdd81ed0>} 
 TOTAL LINES:115 
 BLANK LINE:11 
 COMMEN_LINES:22
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", 

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67 		  metavar="file")

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 68     (options, args) = parser.parse_args()

RUNINGPART:main  INPART:False
CODE LINE 69     log.info("START APP")

RUNINGPART:main  INPART:False
CODE LINE 70     if options.file:

RUNINGPART:main  INPART:False
CODE LINE 71         if options.std or options.mean:

RUNINGPART:main  INPART:False
CODE LINE 72             dataset=read_file(options.file)

RUNINGPART:main  INPART:False
CODE LINE 73             if options.std:

RUNINGPART:main  INPART:False
CODE LINE 74                 Std(dataset)

RUNINGPART:main  INPART:False
CODE LINE 75             if options.mean:

RUNINGPART:main  INPART:False
CODE LINE 76                 Mean(dataset)

RUNINGPART:main  INPART:False
CODE LINE 77         else:

RUNINGPART:main  INPART:False
CODE LINE 78              parser.error("please set calculation,\n Please use -h for help")

RUNINGPART:main  INPART:False
CODE LINE 79     else:

RUNINGPART:main  INPART:False
CODE LINE 80         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

RUNINGPART:main  INPART:False
BLANK LINE 11 

RUNINGPART:main  INPART:False
CODE LINE 81 if __name__=='__main__':

RUNINGPART:main  INPART:False
CODE LINE 82     main()

===TOTAL===
 CODE LINES:82
 PARTS:{'Std': <__main__.Item object at 0x7f747bd53fd0>, 'main': <__main__.Item object at 0x7f747bd590d0>, 'read_file': <__main__.Item object at 0x7f747bd59050>, 'Mean': <__main__.Item object at 0x7f747bd53ed0>} 
 TOTAL LINES:115 
 BLANK LINE:11 
 COMMEN_LINES:22
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       pyloc.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 import collections

RUNINGPART:False  INPART:False
CODE LINE 11 from weakref import proxy

RUNINGPART:False  INPART:False
CODE LINE 12 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 13 import string

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 14 LOG_FILENAME = 'loc.log'

RUNINGPART:False  INPART:False
CODE LINE 15 COMMENT_START_STRING = "#"

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 16 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log = logging.getLogger('LOC')

RUNINGPART:False  INPART:False
CODE LINE 18 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 19 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 20 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 6 

RUNINGPART:False  INPART:False
CODE LINE 21 class Item(object):

ADDED PART Item class Item(object):

RUNINGPART:Item  INPART:True
CODE LINE 22     '''

IDENT: 1
PART LENGTH Item: 2
RUNINGPART:Item  INPART:True
CODE LINE 23     Item of Code, PSP Defined Part

IDENT: 1
PART LENGTH Item: 3
RUNINGPART:Item  INPART:True
CODE LINE 24     '''

IDENT: 1
PART LENGTH Item: 4
RUNINGPART:Item  INPART:True
CODE LINE 25     def __init__(self, line, start_line):

IN PART Item  ADD ITEM __init__:     def __init__(self, line, start_line):

RUNINGPART:Item  INPART:True
CODE LINE 26         '''

IDENT: 2
PART LENGTH Item: 6
RUNINGPART:Item  INPART:True
CODE LINE 27         Item Constructor

IDENT: 2
PART LENGTH Item: 7
RUNINGPART:Item  INPART:True
BLANK LINE 7         

RUNINGPART:Item  INPART:True
CODE LINE 28         Parameters

IDENT: 2
PART LENGTH Item: 8
RUNINGPART:Item  INPART:True
CODE LINE 29         ----------

IDENT: 2
PART LENGTH Item: 9
RUNINGPART:Item  INPART:True
CODE LINE 30         line: str,

IDENT: 2
PART LENGTH Item: 10
RUNINGPART:Item  INPART:True
CODE LINE 31             line to analyze.

IDENT: 3
PART LENGTH Item: 11
RUNINGPART:Item  INPART:True
CODE LINE 32         start_line: int, 

IDENT: 2
PART LENGTH Item: 12
RUNINGPART:Item  INPART:True
CODE LINE 33             Start position

IDENT: 3
PART LENGTH Item: 13
RUNINGPART:Item  INPART:True
BLANK LINE 8         

RUNINGPART:Item  INPART:True
CODE LINE 34         '''

IDENT: 2
PART LENGTH Item: 14
RUNINGPART:Item  INPART:True
CODE LINE 35         self.line=line

IDENT: 2
PART LENGTH Item: 15
RUNINGPART:Item  INPART:True
CODE LINE 36         self.start_line=start_line

IDENT: 2
PART LENGTH Item: 16
RUNINGPART:Item  INPART:True
CODE LINE 37         self.end_line=False

IDENT: 2
PART LENGTH Item: 17
RUNINGPART:Item  INPART:True
CODE LINE 38         self.name=False

IDENT: 2
PART LENGTH Item: 18
RUNINGPART:Item  INPART:True
CODE LINE 39         self.ident_level=False

IDENT: 2
PART LENGTH Item: 19
RUNINGPART:Item  INPART:True
CODE LINE 40         self.length=0

IDENT: 2
PART LENGTH Item: 20
RUNINGPART:Item  INPART:True
CODE LINE 41         self.sub_items={}

IDENT: 2
PART LENGTH Item: 21
RUNINGPART:Item  INPART:True
CODE LINE 42         self.is_a_part=self.IdentifyPart()

IDENT: 2
PART LENGTH Item: 22
RUNINGPART:Item  INPART:True
BLANK LINE 9         

RUNINGPART:Item  INPART:True
CODE LINE 43     def IdentifyPart(self):

IN PART Item  ADD ITEM IdentifyPart:     def IdentifyPart(self):

RUNINGPART:Item  INPART:True
CODE LINE 44         '''

IDENT: 2
PART LENGTH Item: 24
RUNINGPART:Item  INPART:True
CODE LINE 45         Extract Item o Part Name. from line, Ident Level and If is a item

IDENT: 2
PART LENGTH Item: 25
RUNINGPART:Item  INPART:True
BLANK LINE 10         

RUNINGPART:Item  INPART:True
CODE LINE 46         Returns

IDENT: 2
PART LENGTH Item: 26
RUNINGPART:Item  INPART:True
CODE LINE 47         -------

IDENT: 2
PART LENGTH Item: 27
RUNINGPART:Item  INPART:True
CODE LINE 48             is_a_part: Bool, 

IDENT: 3
PART LENGTH Item: 28
RUNINGPART:Item  INPART:True
CODE LINE 49                 Is a Item, Part, Function or Classs

IDENT: 4
PART LENGTH Item: 29
RUNINGPART:Item  INPART:True
CODE LINE 50         '''

IDENT: 2
PART LENGTH Item: 30
RUNINGPART:Item  INPART:True
CODE LINE 51         idents=self.line.rstrip().split("    ")

IDENT: 3
PART LENGTH Item: 31
RUNINGPART:Item  INPART:True
CODE LINE 52         self.ident_level=len(idents) - 1

IDENT: 2
PART LENGTH Item: 32
RUNINGPART:Item  INPART:True
CODE LINE 53         for level in idents:

IDENT: 2
PART LENGTH Item: 33
RUNINGPART:Item  INPART:True
CODE LINE 54             if level.startswith("def ") or level.startswith("class "):

IDENT: 3
PART LENGTH Item: 34
RUNINGPART:Item  INPART:True
CODE LINE 55                 self.name=level.split(" ")[1].split("(")[0]

IDENT: 4
PART LENGTH Item: 35
RUNINGPART:Item  INPART:True
CODE LINE 56                 return True

IDENT: 4
PART LENGTH Item: 36
RUNINGPART:Item  INPART:True
CODE LINE 57         return False

IDENT: 2
PART LENGTH Item: 37
RUNINGPART:Item  INPART:True
BLANK LINE 11 

RUNINGPART:Item  INPART:True
BLANK LINE 12 

RUNINGPART:Item  INPART:True
CODE LINE 58 def LOCCount(file):

ADDED PART LOCCount def LOCCount(file):

RUNINGPART:LOCCount  INPART:True
CODE LINE 59     '''

IDENT: 1
PART LENGTH LOCCount: 2
RUNINGPART:LOCCount  INPART:True
CODE LINE 60     Count LOC in File. Follow Python Code Standar.

IDENT: 1
PART LENGTH LOCCount: 3
RUNINGPART:LOCCount  INPART:True
BLANK LINE 13     

RUNINGPART:LOCCount  INPART:True
CODE LINE 61     Parameters

IDENT: 1
PART LENGTH LOCCount: 4
RUNINGPART:LOCCount  INPART:True
CODE LINE 62     ----------

IDENT: 1
PART LENGTH LOCCount: 5
RUNINGPART:LOCCount  INPART:True
CODE LINE 63     file : str, path of file 

IDENT: 1
PART LENGTH LOCCount: 6
RUNINGPART:LOCCount  INPART:True
CODE LINE 64         file for counting lines..

IDENT: 2
PART LENGTH LOCCount: 7
RUNINGPART:LOCCount  INPART:True
BLANK LINE 14 

RUNINGPART:LOCCount  INPART:True
CODE LINE 65     Returns

IDENT: 1
PART LENGTH LOCCount: 8
RUNINGPART:LOCCount  INPART:True
CODE LINE 66     -------

IDENT: 1
PART LENGTH LOCCount: 9
RUNINGPART:LOCCount  INPART:True
CODE LINE 67     code_lines: int, 

IDENT: 1
PART LENGTH LOCCount: 10
RUNINGPART:LOCCount  INPART:True
CODE LINE 68         phisical code lines

IDENT: 2
PART LENGTH LOCCount: 11
RUNINGPART:LOCCount  INPART:True
CODE LINE 69     parts: dic

IDENT: 1
PART LENGTH LOCCount: 12
RUNINGPART:LOCCount  INPART:True
CODE LINE 70         Dictoinary of parts

IDENT: 2
PART LENGTH LOCCount: 13
RUNINGPART:LOCCount  INPART:True
CODE LINE 71     total_lines: int,

IDENT: 1
PART LENGTH LOCCount: 14
RUNINGPART:LOCCount  INPART:True
CODE LINE 72         Total fo lines.

IDENT: 2
PART LENGTH LOCCount: 15
RUNINGPART:LOCCount  INPART:True
CODE LINE 73     blank_lines: int,

IDENT: 1
PART LENGTH LOCCount: 16
RUNINGPART:LOCCount  INPART:True
CODE LINE 74         Blank Lines

IDENT: 2
PART LENGTH LOCCount: 17
RUNINGPART:LOCCount  INPART:True
CODE LINE 75     comment_lines: int,

IDENT: 1
PART LENGTH LOCCount: 18
RUNINGPART:LOCCount  INPART:True
CODE LINE 76         Comment lines.

IDENT: 2
PART LENGTH LOCCount: 19
RUNINGPART:LOCCount  INPART:True
CODE LINE 77     '''

IDENT: 1
PART LENGTH LOCCount: 20
RUNINGPART:LOCCount  INPART:True
CODE LINE 78     total_lines=0

IDENT: 1
PART LENGTH LOCCount: 21
RUNINGPART:LOCCount  INPART:True
CODE LINE 79     code_lines=0

IDENT: 1
PART LENGTH LOCCount: 22
RUNINGPART:LOCCount  INPART:True
CODE LINE 80     blank_lines=0

IDENT: 1
PART LENGTH LOCCount: 23
RUNINGPART:LOCCount  INPART:True
CODE LINE 81     comment_lines=0

IDENT: 1
PART LENGTH LOCCount: 24
RUNINGPART:LOCCount  INPART:True
CODE LINE 82     parts = {}

IDENT: 1
PART LENGTH LOCCount: 25
RUNINGPART:LOCCount  INPART:True
CODE LINE 83     in_part=False

IDENT: 1
PART LENGTH LOCCount: 26
RUNINGPART:LOCCount  INPART:True
CODE LINE 84     running_part=False

IDENT: 1
PART LENGTH LOCCount: 27
RUNINGPART:LOCCount  INPART:True
BLANK LINE 15             

RUNINGPART:LOCCount  INPART:True
CODE LINE 85     with open(file, 'rb') as code_file:

IDENT: 1
PART LENGTH LOCCount: 28
RUNINGPART:LOCCount  INPART:True
CODE LINE 86         for line in code_file:

IDENT: 2
PART LENGTH LOCCount: 29
RUNINGPART:LOCCount  INPART:True
CODE LINE 87             log.debug("RUNINGPART:%s  INPART:%s" % (running_part, in_part))

IDENT: 3
PART LENGTH LOCCount: 30
RUNINGPART:LOCCount  INPART:True
CODE LINE 88             total_lines+=1

IDENT: 3
PART LENGTH LOCCount: 31
RUNINGPART:LOCCount  INPART:True
CODE LINE 89             if line.strip().startswith("#"):

IDENT: 3
PART LENGTH LOCCount: 32
RUNINGPART:LOCCount  INPART:True
CODE LINE 90                 comment_lines+=1

IDENT: 4
PART LENGTH LOCCount: 33
RUNINGPART:LOCCount  INPART:True
CODE LINE 91                 log.debug("COMENT LINE %s %s" % (comment_lines, line))

IDENT: 4
PART LENGTH LOCCount: 34
RUNINGPART:LOCCount  INPART:True
CODE LINE 92             elif not line.strip():

IDENT: 3
PART LENGTH LOCCount: 35
RUNINGPART:LOCCount  INPART:True
CODE LINE 93                 blank_lines+=1

IDENT: 4
PART LENGTH LOCCount: 36
RUNINGPART:LOCCount  INPART:True
CODE LINE 94                 log.debug("BLANK LINE %s %s" % (blank_lines, line))

IDENT: 4
PART LENGTH LOCCount: 37
RUNINGPART:LOCCount  INPART:True
CODE LINE 95             else:

IDENT: 3
PART LENGTH LOCCount: 38
RUNINGPART:LOCCount  INPART:True
CODE LINE 96                 code_lines+=1

IDENT: 4
PART LENGTH LOCCount: 39
RUNINGPART:LOCCount  INPART:True
CODE LINE 97                 log.debug("CODE LINE %s %s" % (code_lines, line))

IDENT: 4
PART LENGTH LOCCount: 40
RUNINGPART:LOCCount  INPART:True
CODE LINE 98                 running_item=Item(line, total_lines)

IDENT: 4
PART LENGTH LOCCount: 41
RUNINGPART:LOCCount  INPART:True
CODE LINE 99                 if running_item.is_a_part:

IDENT: 4
PART LENGTH LOCCount: 42
RUNINGPART:LOCCount  INPART:True
CODE LINE 100                     if running_item.ident_level==0:

IDENT: 5
PART LENGTH LOCCount: 43
RUNINGPART:LOCCount  INPART:True
CODE LINE 101                         '''Is a Part'''

IDENT: 6
PART LENGTH LOCCount: 44
RUNINGPART:LOCCount  INPART:True
CODE LINE 102                         parts[running_item.name]=running_item

IDENT: 6
PART LENGTH LOCCount: 45
RUNINGPART:LOCCount  INPART:True
CODE LINE 103                         running_part=running_item.name

IDENT: 6
PART LENGTH LOCCount: 46
RUNINGPART:LOCCount  INPART:True
CODE LINE 104                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCount: 47
RUNINGPART:LOCCount  INPART:True
CODE LINE 105                         in_part=True

IDENT: 6
PART LENGTH LOCCount: 48
RUNINGPART:LOCCount  INPART:True
CODE LINE 106                         logpart=logging.getLogger('LOC.%s' % running_part)

IDENT: 6
PART LENGTH LOCCount: 49
RUNINGPART:LOCCount  INPART:True
CODE LINE 107                         log.debug("ADDED PART %s %s" % (running_item.name, 

IDENT: 6
PART LENGTH LOCCount: 50
RUNINGPART:LOCCount  INPART:True
CODE LINE 108                                                                         line))

IDENT: 18
PART LENGTH LOCCount: 51
RUNINGPART:LOCCount  INPART:True
CODE LINE 109                     elif running_item.ident_level==1:

IDENT: 5
PART LENGTH LOCCount: 52
RUNINGPART:LOCCount  INPART:True
CODE LINE 110                         parts[running_part].sub_items[running_item.name]=running_item

IDENT: 6
PART LENGTH LOCCount: 53
RUNINGPART:LOCCount  INPART:True
CODE LINE 111                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCount: 54
RUNINGPART:LOCCount  INPART:True
CODE LINE 112                         logpart.debug("IN PART %s  ADD ITEM %s: %s" % (running_part, 

IDENT: 6
PART LENGTH LOCCount: 55
RUNINGPART:LOCCount  INPART:True
CODE LINE 113                                                     running_item.name, line))

IDENT: 13
PART LENGTH LOCCount: 56
RUNINGPART:LOCCount  INPART:True
CODE LINE 114                     else:

IDENT: 5
PART LENGTH LOCCount: 57
RUNINGPART:LOCCount  INPART:True
CODE LINE 115                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCount: 58
RUNINGPART:LOCCount  INPART:True
CODE LINE 116                         logpart.debug("PART LENGTH %s: %s %s" % (running_part, 

IDENT: 6
PART LENGTH LOCCount: 59
RUNINGPART:LOCCount  INPART:True
CODE LINE 117                                             parts[running_part].length, line))

IDENT: 11
PART LENGTH LOCCount: 60
RUNINGPART:LOCCount  INPART:True
CODE LINE 118                 else:

IDENT: 4
PART LENGTH LOCCount: 61
RUNINGPART:LOCCount  INPART:True
CODE LINE 119                     if in_part:

IDENT: 5
PART LENGTH LOCCount: 62
RUNINGPART:LOCCount  INPART:True
CODE LINE 120                         logpart.debug("IDENT: %s" % running_item.ident_level)

IDENT: 6
PART LENGTH LOCCount: 63
RUNINGPART:LOCCount  INPART:True
CODE LINE 121                         if running_item.ident_level>0:

IDENT: 6
PART LENGTH LOCCount: 64
RUNINGPART:LOCCount  INPART:True
CODE LINE 122                             parts[running_part].length+=1

IDENT: 7
PART LENGTH LOCCount: 65
RUNINGPART:LOCCount  INPART:True
CODE LINE 123                             logpart.debug("PART LENGTH %s: %s" % (running_part, 

IDENT: 7
PART LENGTH LOCCount: 66
RUNINGPART:LOCCount  INPART:True
CODE LINE 124                                             parts[running_part].length))

IDENT: 11
PART LENGTH LOCCount: 67
RUNINGPART:LOCCount  INPART:True
CODE LINE 125                         else:

IDENT: 6
PART LENGTH LOCCount: 68
RUNINGPART:LOCCount  INPART:True
CODE LINE 126                             parts[running_part].end_line=total_lines

IDENT: 7
PART LENGTH LOCCount: 69
RUNINGPART:LOCCount  INPART:True
CODE LINE 127                             in_part=False

IDENT: 7
PART LENGTH LOCCount: 70
RUNINGPART:LOCCount  INPART:True
CODE LINE 128                             del running_item

IDENT: 7
PART LENGTH LOCCount: 71
RUNINGPART:LOCCount  INPART:True
CODE LINE 129     log.debug("===TOTAL===\n CODE LINES:%s\n PARTS:%s \n TOTAL LINES:%s \n "

IDENT: 1
PART LENGTH LOCCount: 72
RUNINGPART:LOCCount  INPART:True
CODE LINE 130               "BLANK LINE:%s \n COMMEN_LINES:%s" % 

IDENT: 3
PART LENGTH LOCCount: 73
RUNINGPART:LOCCount  INPART:True
CODE LINE 131               (code_lines, parts, total_lines, blank_lines, comment_lines))

IDENT: 3
PART LENGTH LOCCount: 74
RUNINGPART:LOCCount  INPART:True
CODE LINE 132     return (code_lines, parts, total_lines, blank_lines, comment_lines)

IDENT: 1
PART LENGTH LOCCount: 75
RUNINGPART:LOCCount  INPART:True
BLANK LINE 16 

RUNINGPART:LOCCount  INPART:True
CODE LINE 133 def FormatOutput(code_lines, parts, total_lines=0, blank_lines=0, comment_lines=0):

ADDED PART FormatOutput def FormatOutput(code_lines, parts, total_lines=0, blank_lines=0, comment_lines=0):

RUNINGPART:FormatOutput  INPART:True
CODE LINE 134     '''

IDENT: 1
PART LENGTH FormatOutput: 2
RUNINGPART:FormatOutput  INPART:True
CODE LINE 135     OutPut whit the optimal Format.

IDENT: 1
PART LENGTH FormatOutput: 3
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 17     

RUNINGPART:FormatOutput  INPART:True
CODE LINE 136     Parameters

IDENT: 1
PART LENGTH FormatOutput: 4
RUNINGPART:FormatOutput  INPART:True
CODE LINE 137     -------

IDENT: 1
PART LENGTH FormatOutput: 5
RUNINGPART:FormatOutput  INPART:True
CODE LINE 138     code_lines: int, 

IDENT: 1
PART LENGTH FormatOutput: 6
RUNINGPART:FormatOutput  INPART:True
CODE LINE 139         phisical code lines

IDENT: 2
PART LENGTH FormatOutput: 7
RUNINGPART:FormatOutput  INPART:True
CODE LINE 140     parts: dic

IDENT: 1
PART LENGTH FormatOutput: 8
RUNINGPART:FormatOutput  INPART:True
CODE LINE 141         Dictoinary of parts

IDENT: 2
PART LENGTH FormatOutput: 9
RUNINGPART:FormatOutput  INPART:True
CODE LINE 142     total_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 10
RUNINGPART:FormatOutput  INPART:True
CODE LINE 143         Total fo lines.

IDENT: 2
PART LENGTH FormatOutput: 11
RUNINGPART:FormatOutput  INPART:True
CODE LINE 144     blank_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 12
RUNINGPART:FormatOutput  INPART:True
CODE LINE 145         Blank Lines

IDENT: 2
PART LENGTH FormatOutput: 13
RUNINGPART:FormatOutput  INPART:True
CODE LINE 146     comment_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 14
RUNINGPART:FormatOutput  INPART:True
CODE LINE 147         Comment lines.

IDENT: 2
PART LENGTH FormatOutput: 15
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 18     

RUNINGPART:FormatOutput  INPART:True
CODE LINE 148     '''

IDENT: 1
PART LENGTH FormatOutput: 16
RUNINGPART:FormatOutput  INPART:True
CODE LINE 149     print "===================================================================="

IDENT: 1
PART LENGTH FormatOutput: 17
RUNINGPART:FormatOutput  INPART:True
CODE LINE 150     print string.expandtabs("Part Name\tN of Items\tPart Size\tTotal",16)

IDENT: 1
PART LENGTH FormatOutput: 18
RUNINGPART:FormatOutput  INPART:True
CODE LINE 151     for part in parts:

IDENT: 1
PART LENGTH FormatOutput: 19
RUNINGPART:FormatOutput  INPART:True
CODE LINE 152         print string.expandtabs("%s\t%s\t%s" % (parts[part].name, 

IDENT: 2
PART LENGTH FormatOutput: 20
RUNINGPART:FormatOutput  INPART:True
CODE LINE 153                     len(parts[part].sub_items.keys()), parts[part].length),16)

IDENT: 5
PART LENGTH FormatOutput: 21
RUNINGPART:FormatOutput  INPART:True
CODE LINE 154     print string.expandtabs("\t\t\t%s" % code_lines,16)

IDENT: 1
PART LENGTH FormatOutput: 22
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 19 

RUNINGPART:FormatOutput  INPART:True
BLANK LINE 20 

RUNINGPART:FormatOutput  INPART:True
CODE LINE 155 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 156     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 157     uso = "modo de uso: %prog [options]"

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 158     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 159     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 160                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 161     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 162     log.info("START COUNTING")

IDENT: 1
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 163     if options.file:

IDENT: 1
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 164         (code_lines, parts, total_lines, blank_lines, comment_lines)=LOCCount(options.file)

IDENT: 2
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 165         FormatOutput(code_lines, parts, total_lines, blank_lines, comment_lines)

IDENT: 2
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 166     else:

IDENT: 1
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 167         parser.error("please define File,  %prog -F example.py\n Please use -h for help")

IDENT: 2
PART LENGTH main: 13
RUNINGPART:main  INPART:True
BLANK LINE 21 

RUNINGPART:main  INPART:True
CODE LINE 168 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 169     main()

===TOTAL===
 CODE LINES:169
 PARTS:{'Item': <__main__.Item object at 0x7f1be2287ed0>, 'main': <__main__.Item object at 0x7f1be228e150>, 'FormatOutput': <__main__.Item object at 0x7f1be228e110>, 'LOCCount': <__main__.Item object at 0x7f1be228e0d0>} 
 TOTAL LINES:210 
 BLANK LINE:21 
 COMMEN_LINES:20
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", 

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67 		  metavar="file")

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 68     (options, args) = parser.parse_args()

RUNINGPART:main  INPART:False
CODE LINE 69     log.info("START APP")

RUNINGPART:main  INPART:False
CODE LINE 70     if options.file:

RUNINGPART:main  INPART:False
CODE LINE 71         if options.std or options.mean:

RUNINGPART:main  INPART:False
CODE LINE 72             dataset=read_file(options.file)

RUNINGPART:main  INPART:False
CODE LINE 73             if options.std:

RUNINGPART:main  INPART:False
CODE LINE 74                 Std(dataset)

RUNINGPART:main  INPART:False
CODE LINE 75             if options.mean:

RUNINGPART:main  INPART:False
CODE LINE 76                 Mean(dataset)

RUNINGPART:main  INPART:False
CODE LINE 77         else:

RUNINGPART:main  INPART:False
CODE LINE 78              parser.error("please set calculation,\n Please use -h for help")

RUNINGPART:main  INPART:False
CODE LINE 79     else:

RUNINGPART:main  INPART:False
CODE LINE 80         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

RUNINGPART:main  INPART:False
BLANK LINE 11 

RUNINGPART:main  INPART:False
CODE LINE 81 if __name__=='__main__':

RUNINGPART:main  INPART:False
CODE LINE 82     main()

===TOTAL===
 CODE LINES:82
 PARTS:{'Std': <__main__.Item object at 0x7f73798aafd0>, 'main': <__main__.Item object at 0x7f73798b00d0>, 'read_file': <__main__.Item object at 0x7f73798b0050>, 'Mean': <__main__.Item object at 0x7f73798aaed0>} 
 TOTAL LINES:115 
 BLANK LINE:11 
 COMMEN_LINES:22
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 68     log.info("START APP")

IDENT: 1
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 69     if options.file:

IDENT: 1
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 70         if options.std or options.mean:

IDENT: 2
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 71             dataset=read_file(options.file)

IDENT: 3
PART LENGTH main: 17
RUNINGPART:main  INPART:True
CODE LINE 72             if options.std:

IDENT: 3
PART LENGTH main: 18
RUNINGPART:main  INPART:True
CODE LINE 73                 Std(dataset)

IDENT: 4
PART LENGTH main: 19
RUNINGPART:main  INPART:True
CODE LINE 74             if options.mean:

IDENT: 3
PART LENGTH main: 20
RUNINGPART:main  INPART:True
CODE LINE 75                 Mean(dataset)

IDENT: 4
PART LENGTH main: 21
RUNINGPART:main  INPART:True
CODE LINE 76         else:

IDENT: 2
PART LENGTH main: 22
RUNINGPART:main  INPART:True
CODE LINE 77              parser.error("please set calculation,\n Please use -h for help")

IDENT: 3
PART LENGTH main: 23
RUNINGPART:main  INPART:True
CODE LINE 78     else:

IDENT: 1
PART LENGTH main: 24
RUNINGPART:main  INPART:True
CODE LINE 79         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

IDENT: 2
PART LENGTH main: 25
RUNINGPART:main  INPART:True
BLANK LINE 11 

RUNINGPART:main  INPART:True
CODE LINE 80 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 81     main()

===TOTAL===
 CODE LINES:81
 PARTS:{'Std': <__main__.Item object at 0x7f3ea9a7bfd0>, 'main': <__main__.Item object at 0x7f3ea9a810d0>, 'read_file': <__main__.Item object at 0x7f3ea9a81050>, 'Mean': <__main__.Item object at 0x7f3ea9a7bed0>} 
 TOTAL LINES:114 
 BLANK LINE:11 
 COMMEN_LINES:22
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 68     log.info("START APP")

IDENT: 1
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 69     if options.file:

IDENT: 1
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 70         if options.std or options.mean:

IDENT: 2
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 71             dataset=read_file(options.file)

IDENT: 3
PART LENGTH main: 17
RUNINGPART:main  INPART:True
CODE LINE 72             if options.std:

IDENT: 3
PART LENGTH main: 18
RUNINGPART:main  INPART:True
CODE LINE 73                 Std(dataset)

IDENT: 4
PART LENGTH main: 19
RUNINGPART:main  INPART:True
CODE LINE 74             if options.mean:

IDENT: 3
PART LENGTH main: 20
RUNINGPART:main  INPART:True
CODE LINE 75                 Mean(dataset)

IDENT: 4
PART LENGTH main: 21
RUNINGPART:main  INPART:True
CODE LINE 76         else:

IDENT: 2
PART LENGTH main: 22
RUNINGPART:main  INPART:True
CODE LINE 77              parser.error("please set calculation,\n Please use -h for help")

IDENT: 3
PART LENGTH main: 23
RUNINGPART:main  INPART:True
CODE LINE 78     else:

IDENT: 1
PART LENGTH main: 24
RUNINGPART:main  INPART:True
CODE LINE 79         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

IDENT: 2
PART LENGTH main: 25
RUNINGPART:main  INPART:True
BLANK LINE 11 

RUNINGPART:main  INPART:True
CODE LINE 80 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 81     main()

===TOTAL===
 CODE LINES:81
 PARTS:{'Std': <pyloc.Item object at 0x28ebe90>, 'main': <pyloc.Item object at 0x28ebf50>, 'read_file': <pyloc.Item object at 0x28ebed0>, 'Mean': <pyloc.Item object at 0x28ebe10>} 
 TOTAL LINES:114 
 BLANK LINE:11 
 COMMEN_LINES:22
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 68     log.info("START APP")

IDENT: 1
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 69     if options.file:

IDENT: 1
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 70         if options.std or options.mean:

IDENT: 2
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 71             dataset=read_file(options.file)

IDENT: 3
PART LENGTH main: 17
RUNINGPART:main  INPART:True
CODE LINE 72             if options.std:

IDENT: 3
PART LENGTH main: 18
RUNINGPART:main  INPART:True
CODE LINE 73                 Std(dataset)

IDENT: 4
PART LENGTH main: 19
RUNINGPART:main  INPART:True
CODE LINE 74             if options.mean:

IDENT: 3
PART LENGTH main: 20
RUNINGPART:main  INPART:True
CODE LINE 75                 Mean(dataset)

IDENT: 4
PART LENGTH main: 21
RUNINGPART:main  INPART:True
CODE LINE 76         else:

IDENT: 2
PART LENGTH main: 22
RUNINGPART:main  INPART:True
CODE LINE 77              parser.error("please set calculation,\n Please use -h for help")

IDENT: 3
PART LENGTH main: 23
RUNINGPART:main  INPART:True
CODE LINE 78     else:

IDENT: 1
PART LENGTH main: 24
RUNINGPART:main  INPART:True
CODE LINE 79         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

IDENT: 2
PART LENGTH main: 25
RUNINGPART:main  INPART:True
BLANK LINE 11 

RUNINGPART:main  INPART:True
CODE LINE 80 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 81     main()

===TOTAL===
 CODE LINES:81
 PARTS:{'Std': <__main__.Item object at 0x7f2c10703fd0>, 'main': <__main__.Item object at 0x7f2c107090d0>, 'read_file': <__main__.Item object at 0x7f2c10709050>, 'Mean': <__main__.Item object at 0x7f2c10703ed0>} 
 TOTAL LINES:114 
 BLANK LINE:11 
 COMMEN_LINES:22
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 68     log.info("START APP")

IDENT: 1
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 69     if options.file:

IDENT: 1
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 70         if options.std or options.mean:

IDENT: 2
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 71             dataset=read_file(options.file)

IDENT: 3
PART LENGTH main: 17
RUNINGPART:main  INPART:True
CODE LINE 72             if options.std:

IDENT: 3
PART LENGTH main: 18
RUNINGPART:main  INPART:True
CODE LINE 73                 Std(dataset)

IDENT: 4
PART LENGTH main: 19
RUNINGPART:main  INPART:True
CODE LINE 74             if options.mean:

IDENT: 3
PART LENGTH main: 20
RUNINGPART:main  INPART:True
CODE LINE 75                 Mean(dataset)

IDENT: 4
PART LENGTH main: 21
RUNINGPART:main  INPART:True
CODE LINE 76         else:

IDENT: 2
PART LENGTH main: 22
RUNINGPART:main  INPART:True
CODE LINE 77              parser.error("please set calculation,\n Please use -h for help")

IDENT: 3
PART LENGTH main: 23
RUNINGPART:main  INPART:True
CODE LINE 78     else:

IDENT: 1
PART LENGTH main: 24
RUNINGPART:main  INPART:True
CODE LINE 79         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

IDENT: 2
PART LENGTH main: 25
RUNINGPART:main  INPART:True
BLANK LINE 11 

RUNINGPART:main  INPART:True
CODE LINE 80 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 81     main()

===TOTAL===
 CODE LINES:81
 PARTS:{'Std': <__main__.Item object at 0x7feaa64dffd0>, 'main': <__main__.Item object at 0x7feaa64e50d0>, 'read_file': <__main__.Item object at 0x7feaa64e5050>, 'Mean': <__main__.Item object at 0x7feaa64dfed0>} 
 TOTAL LINES:114 
 BLANK LINE:11 
 COMMEN_LINES:22
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 68     log.info("START APP")

IDENT: 1
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 69     if options.file:

IDENT: 1
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 70         if options.std or options.mean:

IDENT: 2
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 71             dataset=read_file(options.file)

IDENT: 3
PART LENGTH main: 17
RUNINGPART:main  INPART:True
CODE LINE 72             if options.std:

IDENT: 3
PART LENGTH main: 18
RUNINGPART:main  INPART:True
CODE LINE 73                 Std(dataset)

IDENT: 4
PART LENGTH main: 19
RUNINGPART:main  INPART:True
CODE LINE 74             if options.mean:

IDENT: 3
PART LENGTH main: 20
RUNINGPART:main  INPART:True
CODE LINE 75                 Mean(dataset)

IDENT: 4
PART LENGTH main: 21
RUNINGPART:main  INPART:True
CODE LINE 76         else:

IDENT: 2
PART LENGTH main: 22
RUNINGPART:main  INPART:True
CODE LINE 77              parser.error("please set calculation,\n Please use -h for help")

IDENT: 3
PART LENGTH main: 23
RUNINGPART:main  INPART:True
CODE LINE 78     else:

IDENT: 1
PART LENGTH main: 24
RUNINGPART:main  INPART:True
CODE LINE 79         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

IDENT: 2
PART LENGTH main: 25
RUNINGPART:main  INPART:True
BLANK LINE 11 

RUNINGPART:main  INPART:True
CODE LINE 80 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 81     main()

===TOTAL===
 CODE LINES:81
 PARTS:{'Std': <__main__.Item object at 0x7fd29a389fd0>, 'main': <__main__.Item object at 0x7fd29a38f0d0>, 'read_file': <__main__.Item object at 0x7fd29a38f050>, 'Mean': <__main__.Item object at 0x7fd29a389ed0>} 
 TOTAL LINES:114 
 BLANK LINE:11 
 COMMEN_LINES:22
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import collections

RUNINGPART:False  INPART:False
CODE LINE 7 from weakref import proxy

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 8 class Link(object):

ADDED PART Link class Link(object):

RUNINGPART:Link  INPART:True
CODE LINE 9     '''

IDENT: 1
PART LENGTH Link: 2
RUNINGPART:Link  INPART:True
CODE LINE 10     The proper use of __slots__ is to save space in objects.

IDENT: 1
PART LENGTH Link: 3
RUNINGPART:Link  INPART:True
CODE LINE 11     '''

IDENT: 1
PART LENGTH Link: 4
RUNINGPART:Link  INPART:True
CODE LINE 12     __slots__ = 'prev', 'next', 'key', '__weakref__'

IDENT: 1
PART LENGTH Link: 5
RUNINGPART:Link  INPART:True
BLANK LINE 5 

RUNINGPART:Link  INPART:True
CODE LINE 13 class LinkedList(collections.MutableSet):

ADDED PART LinkedList class LinkedList(collections.MutableSet):

RUNINGPART:LinkedList  INPART:True
CODE LINE 14     '''

IDENT: 1
PART LENGTH LinkedList: 2
RUNINGPART:LinkedList  INPART:True
CODE LINE 15     LinkedLink

IDENT: 1
PART LENGTH LinkedList: 3
RUNINGPART:LinkedList  INPART:True
CODE LINE 16     Set the remembers the order elements were added

IDENT: 1
PART LENGTH LinkedList: 4
RUNINGPART:LinkedList  INPART:True
CODE LINE 17     '''

IDENT: 1
PART LENGTH LinkedList: 5
RUNINGPART:LinkedList  INPART:True
BLANK LINE 6 

RUNINGPART:LinkedList  INPART:True
CODE LINE 18     def __init__(self, iterable=None):

IN PART LinkedList  ADD ITEM __init__:     def __init__(self, iterable=None):

RUNINGPART:LinkedList  INPART:True
CODE LINE 19         '''

IDENT: 2
PART LENGTH LinkedList: 7
RUNINGPART:LinkedList  INPART:True
CODE LINE 20         Init

IDENT: 2
PART LENGTH LinkedList: 8
RUNINGPART:LinkedList  INPART:True
CODE LINE 21         '''

IDENT: 2
PART LENGTH LinkedList: 9
RUNINGPART:LinkedList  INPART:True
CODE LINE 22         self.__root = root = Link()         

IDENT: 2
PART LENGTH LinkedList: 10
RUNINGPART:LinkedList  INPART:True
CODE LINE 23         root.prev = root.next = root

IDENT: 2
PART LENGTH LinkedList: 11
RUNINGPART:LinkedList  INPART:True
CODE LINE 24         self.__map = {}                     # key --> link

IDENT: 7
PART LENGTH LinkedList: 12
RUNINGPART:LinkedList  INPART:True
CODE LINE 25         if iterable is not None:

IDENT: 2
PART LENGTH LinkedList: 13
RUNINGPART:LinkedList  INPART:True
CODE LINE 26             self |= iterable

IDENT: 3
PART LENGTH LinkedList: 14
RUNINGPART:LinkedList  INPART:True
BLANK LINE 7 

RUNINGPART:LinkedList  INPART:True
CODE LINE 27     def __len__(self):

IN PART LinkedList  ADD ITEM __len__:     def __len__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 28         '''

IDENT: 2
PART LENGTH LinkedList: 16
RUNINGPART:LinkedList  INPART:True
CODE LINE 29         Length for the LinkedList

IDENT: 2
PART LENGTH LinkedList: 17
RUNINGPART:LinkedList  INPART:True
CODE LINE 30         '''

IDENT: 2
PART LENGTH LinkedList: 18
RUNINGPART:LinkedList  INPART:True
CODE LINE 31         return len(self.__map)

IDENT: 2
PART LENGTH LinkedList: 19
RUNINGPART:LinkedList  INPART:True
BLANK LINE 8 

RUNINGPART:LinkedList  INPART:True
CODE LINE 32     def __contains__(self, key):

IN PART LinkedList  ADD ITEM __contains__:     def __contains__(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 33         '''

IDENT: 2
PART LENGTH LinkedList: 21
RUNINGPART:LinkedList  INPART:True
CODE LINE 34         Return Content of LinkedList

IDENT: 2
PART LENGTH LinkedList: 22
RUNINGPART:LinkedList  INPART:True
CODE LINE 35         '''

IDENT: 2
PART LENGTH LinkedList: 23
RUNINGPART:LinkedList  INPART:True
CODE LINE 36         return key in self.__map

IDENT: 2
PART LENGTH LinkedList: 24
RUNINGPART:LinkedList  INPART:True
BLANK LINE 9 

RUNINGPART:LinkedList  INPART:True
CODE LINE 37     def add(self, key):

IN PART LinkedList  ADD ITEM add:     def add(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 38         '''

IDENT: 2
PART LENGTH LinkedList: 26
RUNINGPART:LinkedList  INPART:True
CODE LINE 39         Add Node

IDENT: 2
PART LENGTH LinkedList: 27
RUNINGPART:LinkedList  INPART:True
CODE LINE 40         Store new key in a new link at the end of the linked list

IDENT: 2
PART LENGTH LinkedList: 28
RUNINGPART:LinkedList  INPART:True
CODE LINE 41         '''

IDENT: 2
PART LENGTH LinkedList: 29
RUNINGPART:LinkedList  INPART:True
CODE LINE 42         if key not in self.__map:

IDENT: 2
PART LENGTH LinkedList: 30
RUNINGPART:LinkedList  INPART:True
CODE LINE 43             '''

IDENT: 3
PART LENGTH LinkedList: 31
RUNINGPART:LinkedList  INPART:True
CODE LINE 44             Not Element Eq in the list

IDENT: 3
PART LENGTH LinkedList: 32
RUNINGPART:LinkedList  INPART:True
CODE LINE 45             '''

IDENT: 3
PART LENGTH LinkedList: 33
RUNINGPART:LinkedList  INPART:True
CODE LINE 46             self.__map[key] = link = Link()            

IDENT: 3
PART LENGTH LinkedList: 34
RUNINGPART:LinkedList  INPART:True
CODE LINE 47             root = self.__root

IDENT: 3
PART LENGTH LinkedList: 35
RUNINGPART:LinkedList  INPART:True
CODE LINE 48             last = root.prev

IDENT: 3
PART LENGTH LinkedList: 36
RUNINGPART:LinkedList  INPART:True
CODE LINE 49             link.prev, link.next, link.key = last, root, key

IDENT: 3
PART LENGTH LinkedList: 37
RUNINGPART:LinkedList  INPART:True
CODE LINE 50             last.next = root.prev = proxy(link)

IDENT: 3
PART LENGTH LinkedList: 38
RUNINGPART:LinkedList  INPART:True
BLANK LINE 10     

RUNINGPART:LinkedList  INPART:True
CODE LINE 51     def head(self):

IN PART LinkedList  ADD ITEM head:     def head(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 52         '''

IDENT: 2
PART LENGTH LinkedList: 40
RUNINGPART:LinkedList  INPART:True
CODE LINE 53         Return Head

IDENT: 2
PART LENGTH LinkedList: 41
RUNINGPART:LinkedList  INPART:True
CODE LINE 54         '''

IDENT: 2
PART LENGTH LinkedList: 42
RUNINGPART:LinkedList  INPART:True
CODE LINE 55         return list(self)[0],list(self)[-1] 

IDENT: 2
PART LENGTH LinkedList: 43
RUNINGPART:LinkedList  INPART:True
BLANK LINE 11         

RUNINGPART:LinkedList  INPART:True
BLANK LINE 12 

RUNINGPART:LinkedList  INPART:True
CODE LINE 56     def discard(self, key):

IN PART LinkedList  ADD ITEM discard:     def discard(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 57         '''

IDENT: 2
PART LENGTH LinkedList: 45
RUNINGPART:LinkedList  INPART:True
CODE LINE 58         Remove an existing item using self.__map to find the link which is

IDENT: 2
PART LENGTH LinkedList: 46
RUNINGPART:LinkedList  INPART:True
CODE LINE 59         then removed by updating the links in the predecessor and successors.

IDENT: 2
PART LENGTH LinkedList: 47
RUNINGPART:LinkedList  INPART:True
CODE LINE 60         '''

IDENT: 2
PART LENGTH LinkedList: 48
RUNINGPART:LinkedList  INPART:True
CODE LINE 61         if key in self.__map:

IDENT: 2
PART LENGTH LinkedList: 49
RUNINGPART:LinkedList  INPART:True
CODE LINE 62             link = self.__map.pop(key)

IDENT: 3
PART LENGTH LinkedList: 50
RUNINGPART:LinkedList  INPART:True
CODE LINE 63             link.prev.next = link.next

IDENT: 3
PART LENGTH LinkedList: 51
RUNINGPART:LinkedList  INPART:True
CODE LINE 64             link.next.prev = link.prev

IDENT: 3
PART LENGTH LinkedList: 52
RUNINGPART:LinkedList  INPART:True
BLANK LINE 13 

RUNINGPART:LinkedList  INPART:True
CODE LINE 65     def __iter__(self):

IN PART LinkedList  ADD ITEM __iter__:     def __iter__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 66         '''

IDENT: 2
PART LENGTH LinkedList: 54
RUNINGPART:LinkedList  INPART:True
CODE LINE 67         iteration for the Next Method

IDENT: 2
PART LENGTH LinkedList: 55
RUNINGPART:LinkedList  INPART:True
CODE LINE 68         '''

IDENT: 2
PART LENGTH LinkedList: 56
RUNINGPART:LinkedList  INPART:True
CODE LINE 69         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 57
RUNINGPART:LinkedList  INPART:True
CODE LINE 70         curr = root.next

IDENT: 2
PART LENGTH LinkedList: 58
RUNINGPART:LinkedList  INPART:True
CODE LINE 71         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 59
RUNINGPART:LinkedList  INPART:True
CODE LINE 72             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 60
RUNINGPART:LinkedList  INPART:True
CODE LINE 73             curr = curr.next

IDENT: 3
PART LENGTH LinkedList: 61
RUNINGPART:LinkedList  INPART:True
BLANK LINE 14 

RUNINGPART:LinkedList  INPART:True
CODE LINE 74     def __reversed__(self):

IN PART LinkedList  ADD ITEM __reversed__:     def __reversed__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 75         '''

IDENT: 2
PART LENGTH LinkedList: 63
RUNINGPART:LinkedList  INPART:True
CODE LINE 76         iteration in reverse mode Method

IDENT: 2
PART LENGTH LinkedList: 64
RUNINGPART:LinkedList  INPART:True
CODE LINE 77         '''

IDENT: 2
PART LENGTH LinkedList: 65
RUNINGPART:LinkedList  INPART:True
CODE LINE 78         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 66
RUNINGPART:LinkedList  INPART:True
CODE LINE 79         curr = root.prev

IDENT: 2
PART LENGTH LinkedList: 67
RUNINGPART:LinkedList  INPART:True
CODE LINE 80         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 68
RUNINGPART:LinkedList  INPART:True
CODE LINE 81             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 69
RUNINGPART:LinkedList  INPART:True
CODE LINE 82             curr = curr.prev

IDENT: 3
PART LENGTH LinkedList: 70
RUNINGPART:LinkedList  INPART:True
BLANK LINE 15 

RUNINGPART:LinkedList  INPART:True
CODE LINE 83     def pop(self, last=True):

IN PART LinkedList  ADD ITEM pop:     def pop(self, last=True):

RUNINGPART:LinkedList  INPART:True
CODE LINE 84         '''

IDENT: 2
PART LENGTH LinkedList: 72
RUNINGPART:LinkedList  INPART:True
CODE LINE 85         pop key

IDENT: 2
PART LENGTH LinkedList: 73
RUNINGPART:LinkedList  INPART:True
CODE LINE 86         '''

IDENT: 2
PART LENGTH LinkedList: 74
RUNINGPART:LinkedList  INPART:True
CODE LINE 87         if not self:

IDENT: 2
PART LENGTH LinkedList: 75
RUNINGPART:LinkedList  INPART:True
CODE LINE 88             raise KeyError('set is empty')

IDENT: 3
PART LENGTH LinkedList: 76
RUNINGPART:LinkedList  INPART:True
CODE LINE 89         key = next(reversed(self)) if last else next(iter(self))

IDENT: 2
PART LENGTH LinkedList: 77
RUNINGPART:LinkedList  INPART:True
CODE LINE 90         self.discard(key)

IDENT: 2
PART LENGTH LinkedList: 78
RUNINGPART:LinkedList  INPART:True
CODE LINE 91         return key

IDENT: 2
PART LENGTH LinkedList: 79
RUNINGPART:LinkedList  INPART:True
BLANK LINE 16 

RUNINGPART:LinkedList  INPART:True
CODE LINE 92     def __repr__(self):

IN PART LinkedList  ADD ITEM __repr__:     def __repr__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 93         '''

IDENT: 2
PART LENGTH LinkedList: 81
RUNINGPART:LinkedList  INPART:True
CODE LINE 94         String Conversion representation of object LinkeList repr()

IDENT: 2
PART LENGTH LinkedList: 82
RUNINGPART:LinkedList  INPART:True
CODE LINE 95         '''

IDENT: 2
PART LENGTH LinkedList: 83
RUNINGPART:LinkedList  INPART:True
CODE LINE 96         if not self:

IDENT: 2
PART LENGTH LinkedList: 84
RUNINGPART:LinkedList  INPART:True
CODE LINE 97             return '%s()' % (self.__class__.__name__,)

IDENT: 3
PART LENGTH LinkedList: 85
RUNINGPART:LinkedList  INPART:True
CODE LINE 98         return '%s(%r)' % (self.__class__.__name__, list(self))

IDENT: 2
PART LENGTH LinkedList: 86
RUNINGPART:LinkedList  INPART:True
BLANK LINE 17 

RUNINGPART:LinkedList  INPART:True
CODE LINE 99     def __eq__(self, other):

IN PART LinkedList  ADD ITEM __eq__:     def __eq__(self, other):

RUNINGPART:LinkedList  INPART:True
CODE LINE 100         '''

IDENT: 2
PART LENGTH LinkedList: 88
RUNINGPART:LinkedList  INPART:True
CODE LINE 101         Method for de Equal comparation.

IDENT: 2
PART LENGTH LinkedList: 89
RUNINGPART:LinkedList  INPART:True
CODE LINE 102         '''

IDENT: 2
PART LENGTH LinkedList: 90
RUNINGPART:LinkedList  INPART:True
CODE LINE 103         if isinstance(other, LinkedList):

IDENT: 2
PART LENGTH LinkedList: 91
RUNINGPART:LinkedList  INPART:True
CODE LINE 104             return len(self) == len(other) and list(self) == list(other)

IDENT: 3
PART LENGTH LinkedList: 92
RUNINGPART:LinkedList  INPART:True
CODE LINE 105         return not self.isdisjoint(other)

IDENT: 2
PART LENGTH LinkedList: 93
===TOTAL===
 CODE LINES:105
 PARTS:{'Link': <__main__.Item object at 0x7f6900d65f10>, 'LinkedList': <__main__.Item object at 0x7f6900d65c10>} 
 TOTAL LINES:142 
 BLANK LINE:17 
 COMMEN_LINES:20
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       pyloc.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 import collections

RUNINGPART:False  INPART:False
CODE LINE 11 from weakref import proxy

RUNINGPART:False  INPART:False
CODE LINE 12 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 13 import string

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 14 LOG_FILENAME = 'loc.log'

RUNINGPART:False  INPART:False
CODE LINE 15 COMMENT_START_STRING = "#"

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 16 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log = logging.getLogger('LOC')

RUNINGPART:False  INPART:False
CODE LINE 18 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 19 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 20 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 6 

RUNINGPART:False  INPART:False
CODE LINE 21 class Item(object):

ADDED PART Item class Item(object):

RUNINGPART:Item  INPART:True
CODE LINE 22     '''

IDENT: 1
PART LENGTH Item: 2
RUNINGPART:Item  INPART:True
CODE LINE 23     Item of Code, PSP Defined Part

IDENT: 1
PART LENGTH Item: 3
RUNINGPART:Item  INPART:True
CODE LINE 24     '''

IDENT: 1
PART LENGTH Item: 4
RUNINGPART:Item  INPART:True
CODE LINE 25     def __init__(self, line, start_line):

IN PART Item  ADD ITEM __init__:     def __init__(self, line, start_line):

RUNINGPART:Item  INPART:True
CODE LINE 26         '''

IDENT: 2
PART LENGTH Item: 6
RUNINGPART:Item  INPART:True
CODE LINE 27         Item Constructor

IDENT: 2
PART LENGTH Item: 7
RUNINGPART:Item  INPART:True
BLANK LINE 7         

RUNINGPART:Item  INPART:True
CODE LINE 28         Parameters

IDENT: 2
PART LENGTH Item: 8
RUNINGPART:Item  INPART:True
CODE LINE 29         ----------

IDENT: 2
PART LENGTH Item: 9
RUNINGPART:Item  INPART:True
CODE LINE 30         line: str,

IDENT: 2
PART LENGTH Item: 10
RUNINGPART:Item  INPART:True
CODE LINE 31             line to analyze.

IDENT: 3
PART LENGTH Item: 11
RUNINGPART:Item  INPART:True
CODE LINE 32         start_line: int, 

IDENT: 2
PART LENGTH Item: 12
RUNINGPART:Item  INPART:True
CODE LINE 33             Start position

IDENT: 3
PART LENGTH Item: 13
RUNINGPART:Item  INPART:True
BLANK LINE 8         

RUNINGPART:Item  INPART:True
CODE LINE 34         '''

IDENT: 2
PART LENGTH Item: 14
RUNINGPART:Item  INPART:True
CODE LINE 35         self.line=line

IDENT: 2
PART LENGTH Item: 15
RUNINGPART:Item  INPART:True
CODE LINE 36         self.start_line=start_line

IDENT: 2
PART LENGTH Item: 16
RUNINGPART:Item  INPART:True
CODE LINE 37         self.end_line=False

IDENT: 2
PART LENGTH Item: 17
RUNINGPART:Item  INPART:True
CODE LINE 38         self.name=False

IDENT: 2
PART LENGTH Item: 18
RUNINGPART:Item  INPART:True
CODE LINE 39         self.ident_level=False

IDENT: 2
PART LENGTH Item: 19
RUNINGPART:Item  INPART:True
CODE LINE 40         self.length=0

IDENT: 2
PART LENGTH Item: 20
RUNINGPART:Item  INPART:True
CODE LINE 41         self.sub_items={}

IDENT: 2
PART LENGTH Item: 21
RUNINGPART:Item  INPART:True
CODE LINE 42         self.is_a_part=self.IdentifyPart()

IDENT: 2
PART LENGTH Item: 22
RUNINGPART:Item  INPART:True
BLANK LINE 9         

RUNINGPART:Item  INPART:True
CODE LINE 43     def IdentifyPart(self):

IN PART Item  ADD ITEM IdentifyPart:     def IdentifyPart(self):

RUNINGPART:Item  INPART:True
CODE LINE 44         '''

IDENT: 2
PART LENGTH Item: 24
RUNINGPART:Item  INPART:True
CODE LINE 45         Extract Item o Part Name. from line, Ident Level and If is a item

IDENT: 2
PART LENGTH Item: 25
RUNINGPART:Item  INPART:True
BLANK LINE 10         

RUNINGPART:Item  INPART:True
CODE LINE 46         Returns

IDENT: 2
PART LENGTH Item: 26
RUNINGPART:Item  INPART:True
CODE LINE 47         -------

IDENT: 2
PART LENGTH Item: 27
RUNINGPART:Item  INPART:True
CODE LINE 48             is_a_part: Bool, 

IDENT: 3
PART LENGTH Item: 28
RUNINGPART:Item  INPART:True
CODE LINE 49                 Is a Item, Part, Function or Classs

IDENT: 4
PART LENGTH Item: 29
RUNINGPART:Item  INPART:True
CODE LINE 50         '''

IDENT: 2
PART LENGTH Item: 30
RUNINGPART:Item  INPART:True
CODE LINE 51         idents=self.line.rstrip().split("    ")

IDENT: 3
PART LENGTH Item: 31
RUNINGPART:Item  INPART:True
CODE LINE 52         self.ident_level=len(idents) - 1

IDENT: 2
PART LENGTH Item: 32
RUNINGPART:Item  INPART:True
CODE LINE 53         for level in idents:

IDENT: 2
PART LENGTH Item: 33
RUNINGPART:Item  INPART:True
CODE LINE 54             if level.startswith("def ") or level.startswith("class "):

IDENT: 3
PART LENGTH Item: 34
RUNINGPART:Item  INPART:True
CODE LINE 55                 self.name=level.split(" ")[1].split("(")[0]

IDENT: 4
PART LENGTH Item: 35
RUNINGPART:Item  INPART:True
CODE LINE 56                 return True

IDENT: 4
PART LENGTH Item: 36
RUNINGPART:Item  INPART:True
CODE LINE 57         return False

IDENT: 2
PART LENGTH Item: 37
RUNINGPART:Item  INPART:True
BLANK LINE 11 

RUNINGPART:Item  INPART:True
BLANK LINE 12 

RUNINGPART:Item  INPART:True
CODE LINE 58 def LOCCount(file):

ADDED PART LOCCount def LOCCount(file):

RUNINGPART:LOCCount  INPART:True
CODE LINE 59     '''

IDENT: 1
PART LENGTH LOCCount: 2
RUNINGPART:LOCCount  INPART:True
CODE LINE 60     Count LOC in File. Follow Python Code Standar.

IDENT: 1
PART LENGTH LOCCount: 3
RUNINGPART:LOCCount  INPART:True
BLANK LINE 13     

RUNINGPART:LOCCount  INPART:True
CODE LINE 61     Parameters

IDENT: 1
PART LENGTH LOCCount: 4
RUNINGPART:LOCCount  INPART:True
CODE LINE 62     ----------

IDENT: 1
PART LENGTH LOCCount: 5
RUNINGPART:LOCCount  INPART:True
CODE LINE 63     file : str, path of file 

IDENT: 1
PART LENGTH LOCCount: 6
RUNINGPART:LOCCount  INPART:True
CODE LINE 64         file for counting lines..

IDENT: 2
PART LENGTH LOCCount: 7
RUNINGPART:LOCCount  INPART:True
BLANK LINE 14 

RUNINGPART:LOCCount  INPART:True
CODE LINE 65     Returns

IDENT: 1
PART LENGTH LOCCount: 8
RUNINGPART:LOCCount  INPART:True
CODE LINE 66     -------

IDENT: 1
PART LENGTH LOCCount: 9
RUNINGPART:LOCCount  INPART:True
CODE LINE 67     code_lines: int, 

IDENT: 1
PART LENGTH LOCCount: 10
RUNINGPART:LOCCount  INPART:True
CODE LINE 68         phisical code lines

IDENT: 2
PART LENGTH LOCCount: 11
RUNINGPART:LOCCount  INPART:True
CODE LINE 69     parts: dic

IDENT: 1
PART LENGTH LOCCount: 12
RUNINGPART:LOCCount  INPART:True
CODE LINE 70         Dictoinary of parts

IDENT: 2
PART LENGTH LOCCount: 13
RUNINGPART:LOCCount  INPART:True
CODE LINE 71     total_lines: int,

IDENT: 1
PART LENGTH LOCCount: 14
RUNINGPART:LOCCount  INPART:True
CODE LINE 72         Total fo lines.

IDENT: 2
PART LENGTH LOCCount: 15
RUNINGPART:LOCCount  INPART:True
CODE LINE 73     blank_lines: int,

IDENT: 1
PART LENGTH LOCCount: 16
RUNINGPART:LOCCount  INPART:True
CODE LINE 74         Blank Lines

IDENT: 2
PART LENGTH LOCCount: 17
RUNINGPART:LOCCount  INPART:True
CODE LINE 75     comment_lines: int,

IDENT: 1
PART LENGTH LOCCount: 18
RUNINGPART:LOCCount  INPART:True
CODE LINE 76         Comment lines.

IDENT: 2
PART LENGTH LOCCount: 19
RUNINGPART:LOCCount  INPART:True
CODE LINE 77     '''

IDENT: 1
PART LENGTH LOCCount: 20
RUNINGPART:LOCCount  INPART:True
CODE LINE 78     total_lines=0

IDENT: 1
PART LENGTH LOCCount: 21
RUNINGPART:LOCCount  INPART:True
CODE LINE 79     code_lines=0

IDENT: 1
PART LENGTH LOCCount: 22
RUNINGPART:LOCCount  INPART:True
CODE LINE 80     blank_lines=0

IDENT: 1
PART LENGTH LOCCount: 23
RUNINGPART:LOCCount  INPART:True
CODE LINE 81     comment_lines=0

IDENT: 1
PART LENGTH LOCCount: 24
RUNINGPART:LOCCount  INPART:True
CODE LINE 82     parts = {}

IDENT: 1
PART LENGTH LOCCount: 25
RUNINGPART:LOCCount  INPART:True
CODE LINE 83     in_part=False

IDENT: 1
PART LENGTH LOCCount: 26
RUNINGPART:LOCCount  INPART:True
CODE LINE 84     running_part=False

IDENT: 1
PART LENGTH LOCCount: 27
RUNINGPART:LOCCount  INPART:True
BLANK LINE 15             

RUNINGPART:LOCCount  INPART:True
CODE LINE 85     with open(file, 'rb') as code_file:

IDENT: 1
PART LENGTH LOCCount: 28
RUNINGPART:LOCCount  INPART:True
CODE LINE 86         for line in code_file:

IDENT: 2
PART LENGTH LOCCount: 29
RUNINGPART:LOCCount  INPART:True
CODE LINE 87             log.debug("RUNINGPART:%s  INPART:%s" % (running_part, in_part))

IDENT: 3
PART LENGTH LOCCount: 30
RUNINGPART:LOCCount  INPART:True
CODE LINE 88             total_lines+=1

IDENT: 3
PART LENGTH LOCCount: 31
RUNINGPART:LOCCount  INPART:True
CODE LINE 89             if line.strip().startswith("#"):

IDENT: 3
PART LENGTH LOCCount: 32
RUNINGPART:LOCCount  INPART:True
CODE LINE 90                 comment_lines+=1

IDENT: 4
PART LENGTH LOCCount: 33
RUNINGPART:LOCCount  INPART:True
CODE LINE 91                 log.debug("COMENT LINE %s %s" % (comment_lines, line))

IDENT: 4
PART LENGTH LOCCount: 34
RUNINGPART:LOCCount  INPART:True
CODE LINE 92             elif not line.strip():

IDENT: 3
PART LENGTH LOCCount: 35
RUNINGPART:LOCCount  INPART:True
CODE LINE 93                 blank_lines+=1

IDENT: 4
PART LENGTH LOCCount: 36
RUNINGPART:LOCCount  INPART:True
CODE LINE 94                 log.debug("BLANK LINE %s %s" % (blank_lines, line))

IDENT: 4
PART LENGTH LOCCount: 37
RUNINGPART:LOCCount  INPART:True
CODE LINE 95             else:

IDENT: 3
PART LENGTH LOCCount: 38
RUNINGPART:LOCCount  INPART:True
CODE LINE 96                 code_lines+=1

IDENT: 4
PART LENGTH LOCCount: 39
RUNINGPART:LOCCount  INPART:True
CODE LINE 97                 log.debug("CODE LINE %s %s" % (code_lines, line))

IDENT: 4
PART LENGTH LOCCount: 40
RUNINGPART:LOCCount  INPART:True
CODE LINE 98                 running_item=Item(line, total_lines)

IDENT: 4
PART LENGTH LOCCount: 41
RUNINGPART:LOCCount  INPART:True
CODE LINE 99                 if running_item.is_a_part:

IDENT: 4
PART LENGTH LOCCount: 42
RUNINGPART:LOCCount  INPART:True
CODE LINE 100                     if running_item.ident_level==0:

IDENT: 5
PART LENGTH LOCCount: 43
RUNINGPART:LOCCount  INPART:True
CODE LINE 101                         '''Is a Part'''

IDENT: 6
PART LENGTH LOCCount: 44
RUNINGPART:LOCCount  INPART:True
CODE LINE 102                         parts[running_item.name]=running_item

IDENT: 6
PART LENGTH LOCCount: 45
RUNINGPART:LOCCount  INPART:True
CODE LINE 103                         running_part=running_item.name

IDENT: 6
PART LENGTH LOCCount: 46
RUNINGPART:LOCCount  INPART:True
CODE LINE 104                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCount: 47
RUNINGPART:LOCCount  INPART:True
CODE LINE 105                         in_part=True

IDENT: 6
PART LENGTH LOCCount: 48
RUNINGPART:LOCCount  INPART:True
CODE LINE 106                         logpart=logging.getLogger('LOC.%s' % running_part)

IDENT: 6
PART LENGTH LOCCount: 49
RUNINGPART:LOCCount  INPART:True
CODE LINE 107                         log.debug("ADDED PART %s %s" % (running_item.name, 

IDENT: 6
PART LENGTH LOCCount: 50
RUNINGPART:LOCCount  INPART:True
CODE LINE 108                                                                         line))

IDENT: 18
PART LENGTH LOCCount: 51
RUNINGPART:LOCCount  INPART:True
CODE LINE 109                     elif running_item.ident_level==1:

IDENT: 5
PART LENGTH LOCCount: 52
RUNINGPART:LOCCount  INPART:True
CODE LINE 110                         parts[running_part].sub_items[running_item.name]=running_item

IDENT: 6
PART LENGTH LOCCount: 53
RUNINGPART:LOCCount  INPART:True
CODE LINE 111                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCount: 54
RUNINGPART:LOCCount  INPART:True
CODE LINE 112                         logpart.debug("IN PART %s  ADD ITEM %s: %s" % (running_part, 

IDENT: 6
PART LENGTH LOCCount: 55
RUNINGPART:LOCCount  INPART:True
CODE LINE 113                                                     running_item.name, line))

IDENT: 13
PART LENGTH LOCCount: 56
RUNINGPART:LOCCount  INPART:True
CODE LINE 114                     else:

IDENT: 5
PART LENGTH LOCCount: 57
RUNINGPART:LOCCount  INPART:True
CODE LINE 115                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCount: 58
RUNINGPART:LOCCount  INPART:True
CODE LINE 116                         logpart.debug("PART LENGTH %s: %s %s" % (running_part, 

IDENT: 6
PART LENGTH LOCCount: 59
RUNINGPART:LOCCount  INPART:True
CODE LINE 117                                             parts[running_part].length, line))

IDENT: 11
PART LENGTH LOCCount: 60
RUNINGPART:LOCCount  INPART:True
CODE LINE 118                 else:

IDENT: 4
PART LENGTH LOCCount: 61
RUNINGPART:LOCCount  INPART:True
CODE LINE 119                     if in_part:

IDENT: 5
PART LENGTH LOCCount: 62
RUNINGPART:LOCCount  INPART:True
CODE LINE 120                         logpart.debug("IDENT: %s" % running_item.ident_level)

IDENT: 6
PART LENGTH LOCCount: 63
RUNINGPART:LOCCount  INPART:True
CODE LINE 121                         if running_item.ident_level>0:

IDENT: 6
PART LENGTH LOCCount: 64
RUNINGPART:LOCCount  INPART:True
CODE LINE 122                             parts[running_part].length+=1

IDENT: 7
PART LENGTH LOCCount: 65
RUNINGPART:LOCCount  INPART:True
CODE LINE 123                             logpart.debug("PART LENGTH %s: %s" % (running_part, 

IDENT: 7
PART LENGTH LOCCount: 66
RUNINGPART:LOCCount  INPART:True
CODE LINE 124                                             parts[running_part].length))

IDENT: 11
PART LENGTH LOCCount: 67
RUNINGPART:LOCCount  INPART:True
CODE LINE 125                         else:

IDENT: 6
PART LENGTH LOCCount: 68
RUNINGPART:LOCCount  INPART:True
CODE LINE 126                             parts[running_part].end_line=total_lines

IDENT: 7
PART LENGTH LOCCount: 69
RUNINGPART:LOCCount  INPART:True
CODE LINE 127                             in_part=False

IDENT: 7
PART LENGTH LOCCount: 70
RUNINGPART:LOCCount  INPART:True
CODE LINE 128                             del running_item

IDENT: 7
PART LENGTH LOCCount: 71
RUNINGPART:LOCCount  INPART:True
CODE LINE 129     log.debug("===TOTAL===\n CODE LINES:%s\n PARTS:%s \n TOTAL LINES:%s \n "

IDENT: 1
PART LENGTH LOCCount: 72
RUNINGPART:LOCCount  INPART:True
CODE LINE 130               "BLANK LINE:%s \n COMMEN_LINES:%s" % 

IDENT: 3
PART LENGTH LOCCount: 73
RUNINGPART:LOCCount  INPART:True
CODE LINE 131               (code_lines, parts, total_lines, blank_lines, comment_lines))

IDENT: 3
PART LENGTH LOCCount: 74
RUNINGPART:LOCCount  INPART:True
CODE LINE 132     return (code_lines, parts, total_lines, blank_lines, comment_lines)

IDENT: 1
PART LENGTH LOCCount: 75
RUNINGPART:LOCCount  INPART:True
BLANK LINE 16 

RUNINGPART:LOCCount  INPART:True
CODE LINE 133 def FormatOutput(code_lines, parts, total_lines=0, blank_lines=0, comment_lines=0):

ADDED PART FormatOutput def FormatOutput(code_lines, parts, total_lines=0, blank_lines=0, comment_lines=0):

RUNINGPART:FormatOutput  INPART:True
CODE LINE 134     '''

IDENT: 1
PART LENGTH FormatOutput: 2
RUNINGPART:FormatOutput  INPART:True
CODE LINE 135     OutPut whit the optimal Format.

IDENT: 1
PART LENGTH FormatOutput: 3
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 17     

RUNINGPART:FormatOutput  INPART:True
CODE LINE 136     Parameters

IDENT: 1
PART LENGTH FormatOutput: 4
RUNINGPART:FormatOutput  INPART:True
CODE LINE 137     -------

IDENT: 1
PART LENGTH FormatOutput: 5
RUNINGPART:FormatOutput  INPART:True
CODE LINE 138     code_lines: int, 

IDENT: 1
PART LENGTH FormatOutput: 6
RUNINGPART:FormatOutput  INPART:True
CODE LINE 139         phisical code lines

IDENT: 2
PART LENGTH FormatOutput: 7
RUNINGPART:FormatOutput  INPART:True
CODE LINE 140     parts: dic

IDENT: 1
PART LENGTH FormatOutput: 8
RUNINGPART:FormatOutput  INPART:True
CODE LINE 141         Dictoinary of parts

IDENT: 2
PART LENGTH FormatOutput: 9
RUNINGPART:FormatOutput  INPART:True
CODE LINE 142     total_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 10
RUNINGPART:FormatOutput  INPART:True
CODE LINE 143         Total fo lines.

IDENT: 2
PART LENGTH FormatOutput: 11
RUNINGPART:FormatOutput  INPART:True
CODE LINE 144     blank_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 12
RUNINGPART:FormatOutput  INPART:True
CODE LINE 145         Blank Lines

IDENT: 2
PART LENGTH FormatOutput: 13
RUNINGPART:FormatOutput  INPART:True
CODE LINE 146     comment_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 14
RUNINGPART:FormatOutput  INPART:True
CODE LINE 147         Comment lines.

IDENT: 2
PART LENGTH FormatOutput: 15
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 18     

RUNINGPART:FormatOutput  INPART:True
CODE LINE 148     '''

IDENT: 1
PART LENGTH FormatOutput: 16
RUNINGPART:FormatOutput  INPART:True
CODE LINE 149     print "===================================================================="

IDENT: 1
PART LENGTH FormatOutput: 17
RUNINGPART:FormatOutput  INPART:True
CODE LINE 150     print string.expandtabs("Part Name\tN of Items\tPart Size\tTotal",16)

IDENT: 1
PART LENGTH FormatOutput: 18
RUNINGPART:FormatOutput  INPART:True
CODE LINE 151     for part in parts:

IDENT: 1
PART LENGTH FormatOutput: 19
RUNINGPART:FormatOutput  INPART:True
CODE LINE 152         print string.expandtabs("%s\t%s\t%s" % (parts[part].name, 

IDENT: 2
PART LENGTH FormatOutput: 20
RUNINGPART:FormatOutput  INPART:True
CODE LINE 153                     len(parts[part].sub_items.keys()), parts[part].length),16)

IDENT: 5
PART LENGTH FormatOutput: 21
RUNINGPART:FormatOutput  INPART:True
CODE LINE 154     print string.expandtabs("\t\t\t%s" % code_lines,16)

IDENT: 1
PART LENGTH FormatOutput: 22
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 19 

RUNINGPART:FormatOutput  INPART:True
BLANK LINE 20 

RUNINGPART:FormatOutput  INPART:True
CODE LINE 155 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 156     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 157     uso = "modo de uso: %prog [options]"

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 158     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 159     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 160                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 161     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 162     log.info("START COUNTING")              #Start Program

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 163     if options.file:

IDENT: 1
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 164         (code_lines, parts, total_lines, blank_lines, comment_lines)=LOCCount(options.file)

IDENT: 2
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 165         FormatOutput(code_lines, parts, total_lines, blank_lines, comment_lines)

IDENT: 2
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 166     else:

IDENT: 1
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 167         parser.error("please define File,  %prog -F example.py\n Please use -h for help")

IDENT: 2
PART LENGTH main: 13
RUNINGPART:main  INPART:True
BLANK LINE 21 

RUNINGPART:main  INPART:True
CODE LINE 168 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 169     main()

===TOTAL===
 CODE LINES:169
 PARTS:{'Item': <__main__.Item object at 0x7f50e9756ed0>, 'main': <__main__.Item object at 0x7f50e975d150>, 'FormatOutput': <__main__.Item object at 0x7f50e975d110>, 'LOCCount': <__main__.Item object at 0x7f50e975d0d0>} 
 TOTAL LINES:210 
 BLANK LINE:21 
 COMMEN_LINES:20
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       pyloc.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 import collections

RUNINGPART:False  INPART:False
CODE LINE 11 from weakref import proxy

RUNINGPART:False  INPART:False
CODE LINE 12 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 13 import string

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 14 LOG_FILENAME = 'loc.log'

RUNINGPART:False  INPART:False
CODE LINE 15 COMMENT_START_STRING = "#"

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 16 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log = logging.getLogger('LOC')

RUNINGPART:False  INPART:False
CODE LINE 18 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 19 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 20 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 6 

RUNINGPART:False  INPART:False
CODE LINE 21 class Item(object):

ADDED PART Item class Item(object):

RUNINGPART:Item  INPART:True
CODE LINE 22     '''

IDENT: 1
PART LENGTH Item: 2
RUNINGPART:Item  INPART:True
CODE LINE 23     Item of Code, PSP Defined Part

IDENT: 1
PART LENGTH Item: 3
RUNINGPART:Item  INPART:True
CODE LINE 24     '''

IDENT: 1
PART LENGTH Item: 4
RUNINGPART:Item  INPART:True
CODE LINE 25     def __init__(self, line, start_line):

IN PART Item  ADD ITEM __init__:     def __init__(self, line, start_line):

RUNINGPART:Item  INPART:True
CODE LINE 26         '''

IDENT: 2
PART LENGTH Item: 6
RUNINGPART:Item  INPART:True
CODE LINE 27         Item Constructor

IDENT: 2
PART LENGTH Item: 7
RUNINGPART:Item  INPART:True
BLANK LINE 7         

RUNINGPART:Item  INPART:True
CODE LINE 28         Parameters

IDENT: 2
PART LENGTH Item: 8
RUNINGPART:Item  INPART:True
CODE LINE 29         ----------

IDENT: 2
PART LENGTH Item: 9
RUNINGPART:Item  INPART:True
CODE LINE 30         line: str,

IDENT: 2
PART LENGTH Item: 10
RUNINGPART:Item  INPART:True
CODE LINE 31             line to analyze.

IDENT: 3
PART LENGTH Item: 11
RUNINGPART:Item  INPART:True
CODE LINE 32         start_line: int, 

IDENT: 2
PART LENGTH Item: 12
RUNINGPART:Item  INPART:True
CODE LINE 33             Start position

IDENT: 3
PART LENGTH Item: 13
RUNINGPART:Item  INPART:True
BLANK LINE 8         

RUNINGPART:Item  INPART:True
CODE LINE 34         '''

IDENT: 2
PART LENGTH Item: 14
RUNINGPART:Item  INPART:True
CODE LINE 35         self.line=line

IDENT: 2
PART LENGTH Item: 15
RUNINGPART:Item  INPART:True
CODE LINE 36         self.start_line=start_line

IDENT: 2
PART LENGTH Item: 16
RUNINGPART:Item  INPART:True
CODE LINE 37         self.end_line=False

IDENT: 2
PART LENGTH Item: 17
RUNINGPART:Item  INPART:True
CODE LINE 38         self.name=False

IDENT: 2
PART LENGTH Item: 18
RUNINGPART:Item  INPART:True
CODE LINE 39         self.ident_level=False

IDENT: 2
PART LENGTH Item: 19
RUNINGPART:Item  INPART:True
CODE LINE 40         self.length=0

IDENT: 2
PART LENGTH Item: 20
RUNINGPART:Item  INPART:True
CODE LINE 41         self.sub_items={}

IDENT: 2
PART LENGTH Item: 21
RUNINGPART:Item  INPART:True
CODE LINE 42         self.is_a_part=self.IdentifyPart()

IDENT: 2
PART LENGTH Item: 22
RUNINGPART:Item  INPART:True
BLANK LINE 9         

RUNINGPART:Item  INPART:True
CODE LINE 43     def IdentifyPart(self):

IN PART Item  ADD ITEM IdentifyPart:     def IdentifyPart(self):

RUNINGPART:Item  INPART:True
CODE LINE 44         '''

IDENT: 2
PART LENGTH Item: 24
RUNINGPART:Item  INPART:True
CODE LINE 45         Extract Item o Part Name. from line, Ident Level and If is a item

IDENT: 2
PART LENGTH Item: 25
RUNINGPART:Item  INPART:True
BLANK LINE 10         

RUNINGPART:Item  INPART:True
CODE LINE 46         Returns

IDENT: 2
PART LENGTH Item: 26
RUNINGPART:Item  INPART:True
CODE LINE 47         -------

IDENT: 2
PART LENGTH Item: 27
RUNINGPART:Item  INPART:True
CODE LINE 48             is_a_part: Bool, 

IDENT: 3
PART LENGTH Item: 28
RUNINGPART:Item  INPART:True
CODE LINE 49                 Is a Item, Part, Function or Classs

IDENT: 4
PART LENGTH Item: 29
RUNINGPART:Item  INPART:True
CODE LINE 50         '''

IDENT: 2
PART LENGTH Item: 30
RUNINGPART:Item  INPART:True
CODE LINE 51         idents=self.line.rstrip().split("    ")

IDENT: 3
PART LENGTH Item: 31
RUNINGPART:Item  INPART:True
CODE LINE 52         self.ident_level=len(idents) - 1

IDENT: 2
PART LENGTH Item: 32
RUNINGPART:Item  INPART:True
CODE LINE 53         for level in idents:

IDENT: 2
PART LENGTH Item: 33
RUNINGPART:Item  INPART:True
CODE LINE 54             if level.startswith("def ") or level.startswith("class "):

IDENT: 3
PART LENGTH Item: 34
RUNINGPART:Item  INPART:True
CODE LINE 55                 self.name=level.split(" ")[1].split("(")[0]

IDENT: 4
PART LENGTH Item: 35
RUNINGPART:Item  INPART:True
CODE LINE 56                 return True

IDENT: 4
PART LENGTH Item: 36
RUNINGPART:Item  INPART:True
CODE LINE 57         return False

IDENT: 2
PART LENGTH Item: 37
RUNINGPART:Item  INPART:True
BLANK LINE 11 

RUNINGPART:Item  INPART:True
BLANK LINE 12 

RUNINGPART:Item  INPART:True
CODE LINE 58 def LOCCount(file):

ADDED PART LOCCount def LOCCount(file):

RUNINGPART:LOCCount  INPART:True
CODE LINE 59     '''

IDENT: 1
PART LENGTH LOCCount: 2
RUNINGPART:LOCCount  INPART:True
CODE LINE 60     Count LOC in File. Follow Python Code Standar.

IDENT: 1
PART LENGTH LOCCount: 3
RUNINGPART:LOCCount  INPART:True
BLANK LINE 13     

RUNINGPART:LOCCount  INPART:True
CODE LINE 61     Parameters

IDENT: 1
PART LENGTH LOCCount: 4
RUNINGPART:LOCCount  INPART:True
CODE LINE 62     ----------

IDENT: 1
PART LENGTH LOCCount: 5
RUNINGPART:LOCCount  INPART:True
CODE LINE 63     file : str, path of file 

IDENT: 1
PART LENGTH LOCCount: 6
RUNINGPART:LOCCount  INPART:True
CODE LINE 64         file for counting lines..

IDENT: 2
PART LENGTH LOCCount: 7
RUNINGPART:LOCCount  INPART:True
BLANK LINE 14 

RUNINGPART:LOCCount  INPART:True
CODE LINE 65     Returns

IDENT: 1
PART LENGTH LOCCount: 8
RUNINGPART:LOCCount  INPART:True
CODE LINE 66     -------

IDENT: 1
PART LENGTH LOCCount: 9
RUNINGPART:LOCCount  INPART:True
CODE LINE 67     code_lines: int, 

IDENT: 1
PART LENGTH LOCCount: 10
RUNINGPART:LOCCount  INPART:True
CODE LINE 68         phisical code lines

IDENT: 2
PART LENGTH LOCCount: 11
RUNINGPART:LOCCount  INPART:True
CODE LINE 69     parts: dic

IDENT: 1
PART LENGTH LOCCount: 12
RUNINGPART:LOCCount  INPART:True
CODE LINE 70         Dictoinary of parts

IDENT: 2
PART LENGTH LOCCount: 13
RUNINGPART:LOCCount  INPART:True
CODE LINE 71     total_lines: int,

IDENT: 1
PART LENGTH LOCCount: 14
RUNINGPART:LOCCount  INPART:True
CODE LINE 72         Total fo lines.

IDENT: 2
PART LENGTH LOCCount: 15
RUNINGPART:LOCCount  INPART:True
CODE LINE 73     blank_lines: int,

IDENT: 1
PART LENGTH LOCCount: 16
RUNINGPART:LOCCount  INPART:True
CODE LINE 74         Blank Lines

IDENT: 2
PART LENGTH LOCCount: 17
RUNINGPART:LOCCount  INPART:True
CODE LINE 75     comment_lines: int,

IDENT: 1
PART LENGTH LOCCount: 18
RUNINGPART:LOCCount  INPART:True
CODE LINE 76         Comment lines.

IDENT: 2
PART LENGTH LOCCount: 19
RUNINGPART:LOCCount  INPART:True
CODE LINE 77     '''

IDENT: 1
PART LENGTH LOCCount: 20
RUNINGPART:LOCCount  INPART:True
CODE LINE 78     total_lines=0

IDENT: 1
PART LENGTH LOCCount: 21
RUNINGPART:LOCCount  INPART:True
CODE LINE 79     code_lines=0

IDENT: 1
PART LENGTH LOCCount: 22
RUNINGPART:LOCCount  INPART:True
CODE LINE 80     blank_lines=0

IDENT: 1
PART LENGTH LOCCount: 23
RUNINGPART:LOCCount  INPART:True
CODE LINE 81     comment_lines=0

IDENT: 1
PART LENGTH LOCCount: 24
RUNINGPART:LOCCount  INPART:True
CODE LINE 82     parts = {}

IDENT: 1
PART LENGTH LOCCount: 25
RUNINGPART:LOCCount  INPART:True
CODE LINE 83     in_part=False

IDENT: 1
PART LENGTH LOCCount: 26
RUNINGPART:LOCCount  INPART:True
CODE LINE 84     running_part=False

IDENT: 1
PART LENGTH LOCCount: 27
RUNINGPART:LOCCount  INPART:True
BLANK LINE 15             

RUNINGPART:LOCCount  INPART:True
CODE LINE 85     with open(file, 'rb') as code_file:

IDENT: 1
PART LENGTH LOCCount: 28
RUNINGPART:LOCCount  INPART:True
CODE LINE 86         for line in code_file:

IDENT: 2
PART LENGTH LOCCount: 29
RUNINGPART:LOCCount  INPART:True
CODE LINE 87             log.debug("RUNINGPART:%s  INPART:%s" % (running_part, in_part))

IDENT: 3
PART LENGTH LOCCount: 30
RUNINGPART:LOCCount  INPART:True
CODE LINE 88             total_lines+=1

IDENT: 3
PART LENGTH LOCCount: 31
RUNINGPART:LOCCount  INPART:True
CODE LINE 89             if line.strip().startswith("#"):

IDENT: 3
PART LENGTH LOCCount: 32
RUNINGPART:LOCCount  INPART:True
CODE LINE 90                 comment_lines+=1

IDENT: 4
PART LENGTH LOCCount: 33
RUNINGPART:LOCCount  INPART:True
CODE LINE 91                 log.debug("COMENT LINE %s %s" % (comment_lines, line))

IDENT: 4
PART LENGTH LOCCount: 34
RUNINGPART:LOCCount  INPART:True
CODE LINE 92             elif not line.strip():

IDENT: 3
PART LENGTH LOCCount: 35
RUNINGPART:LOCCount  INPART:True
CODE LINE 93                 blank_lines+=1

IDENT: 4
PART LENGTH LOCCount: 36
RUNINGPART:LOCCount  INPART:True
CODE LINE 94                 log.debug("BLANK LINE %s %s" % (blank_lines, line))

IDENT: 4
PART LENGTH LOCCount: 37
RUNINGPART:LOCCount  INPART:True
CODE LINE 95             else:

IDENT: 3
PART LENGTH LOCCount: 38
RUNINGPART:LOCCount  INPART:True
CODE LINE 96                 code_lines+=1

IDENT: 4
PART LENGTH LOCCount: 39
RUNINGPART:LOCCount  INPART:True
CODE LINE 97                 log.debug("CODE LINE %s %s" % (code_lines, line))

IDENT: 4
PART LENGTH LOCCount: 40
RUNINGPART:LOCCount  INPART:True
CODE LINE 98                 running_item=Item(line, total_lines)

IDENT: 4
PART LENGTH LOCCount: 41
RUNINGPART:LOCCount  INPART:True
CODE LINE 99                 if running_item.is_a_part:

IDENT: 4
PART LENGTH LOCCount: 42
RUNINGPART:LOCCount  INPART:True
CODE LINE 100                     if running_item.ident_level==0:

IDENT: 5
PART LENGTH LOCCount: 43
RUNINGPART:LOCCount  INPART:True
CODE LINE 101                         '''Is a Part'''

IDENT: 6
PART LENGTH LOCCount: 44
RUNINGPART:LOCCount  INPART:True
CODE LINE 102                         parts[running_item.name]=running_item

IDENT: 6
PART LENGTH LOCCount: 45
RUNINGPART:LOCCount  INPART:True
CODE LINE 103                         running_part=running_item.name

IDENT: 6
PART LENGTH LOCCount: 46
RUNINGPART:LOCCount  INPART:True
CODE LINE 104                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCount: 47
RUNINGPART:LOCCount  INPART:True
CODE LINE 105                         in_part=True

IDENT: 6
PART LENGTH LOCCount: 48
RUNINGPART:LOCCount  INPART:True
CODE LINE 106                         logpart=logging.getLogger('LOC.%s' % running_part)

IDENT: 6
PART LENGTH LOCCount: 49
RUNINGPART:LOCCount  INPART:True
CODE LINE 107                         log.debug("ADDED PART %s %s" % (running_item.name, 

IDENT: 6
PART LENGTH LOCCount: 50
RUNINGPART:LOCCount  INPART:True
CODE LINE 108                                                                         line))

IDENT: 18
PART LENGTH LOCCount: 51
RUNINGPART:LOCCount  INPART:True
CODE LINE 109                     elif running_item.ident_level==1:

IDENT: 5
PART LENGTH LOCCount: 52
RUNINGPART:LOCCount  INPART:True
CODE LINE 110                         parts[running_part].sub_items[running_item.name]=running_item

IDENT: 6
PART LENGTH LOCCount: 53
RUNINGPART:LOCCount  INPART:True
CODE LINE 111                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCount: 54
RUNINGPART:LOCCount  INPART:True
CODE LINE 112                         logpart.debug("IN PART %s  ADD ITEM %s: %s" % (running_part, 

IDENT: 6
PART LENGTH LOCCount: 55
RUNINGPART:LOCCount  INPART:True
CODE LINE 113                                                     running_item.name, line))

IDENT: 13
PART LENGTH LOCCount: 56
RUNINGPART:LOCCount  INPART:True
CODE LINE 114                     else:

IDENT: 5
PART LENGTH LOCCount: 57
RUNINGPART:LOCCount  INPART:True
CODE LINE 115                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCount: 58
RUNINGPART:LOCCount  INPART:True
CODE LINE 116                         logpart.debug("PART LENGTH %s: %s %s" % (running_part, 

IDENT: 6
PART LENGTH LOCCount: 59
RUNINGPART:LOCCount  INPART:True
CODE LINE 117                                             parts[running_part].length, line))

IDENT: 11
PART LENGTH LOCCount: 60
RUNINGPART:LOCCount  INPART:True
CODE LINE 118                 else:

IDENT: 4
PART LENGTH LOCCount: 61
RUNINGPART:LOCCount  INPART:True
CODE LINE 119                     if in_part:

IDENT: 5
PART LENGTH LOCCount: 62
RUNINGPART:LOCCount  INPART:True
CODE LINE 120                         logpart.debug("IDENT: %s" % running_item.ident_level)

IDENT: 6
PART LENGTH LOCCount: 63
RUNINGPART:LOCCount  INPART:True
CODE LINE 121                         if running_item.ident_level>0:

IDENT: 6
PART LENGTH LOCCount: 64
RUNINGPART:LOCCount  INPART:True
CODE LINE 122                             parts[running_part].length+=1

IDENT: 7
PART LENGTH LOCCount: 65
RUNINGPART:LOCCount  INPART:True
CODE LINE 123                             logpart.debug("PART LENGTH %s: %s" % (running_part, 

IDENT: 7
PART LENGTH LOCCount: 66
RUNINGPART:LOCCount  INPART:True
CODE LINE 124                                             parts[running_part].length))

IDENT: 11
PART LENGTH LOCCount: 67
RUNINGPART:LOCCount  INPART:True
CODE LINE 125                         else:

IDENT: 6
PART LENGTH LOCCount: 68
RUNINGPART:LOCCount  INPART:True
CODE LINE 126                             parts[running_part].end_line=total_lines

IDENT: 7
PART LENGTH LOCCount: 69
RUNINGPART:LOCCount  INPART:True
CODE LINE 127                             in_part=False

IDENT: 7
PART LENGTH LOCCount: 70
RUNINGPART:LOCCount  INPART:True
CODE LINE 128                             del running_item

IDENT: 7
PART LENGTH LOCCount: 71
RUNINGPART:LOCCount  INPART:True
CODE LINE 129     log.debug("===TOTAL===\n CODE LINES:%s\n PARTS:%s \n TOTAL LINES:%s \n "

IDENT: 1
PART LENGTH LOCCount: 72
RUNINGPART:LOCCount  INPART:True
CODE LINE 130               "BLANK LINE:%s \n COMMEN_LINES:%s" % 

IDENT: 3
PART LENGTH LOCCount: 73
RUNINGPART:LOCCount  INPART:True
CODE LINE 131               (code_lines, parts, total_lines, blank_lines, comment_lines))

IDENT: 3
PART LENGTH LOCCount: 74
RUNINGPART:LOCCount  INPART:True
CODE LINE 132     return (code_lines, parts, total_lines, blank_lines, comment_lines)

IDENT: 1
PART LENGTH LOCCount: 75
RUNINGPART:LOCCount  INPART:True
BLANK LINE 16 

RUNINGPART:LOCCount  INPART:True
CODE LINE 133 def FormatOutput(code_lines, parts, total_lines=0, blank_lines=0, comment_lines=0):

ADDED PART FormatOutput def FormatOutput(code_lines, parts, total_lines=0, blank_lines=0, comment_lines=0):

RUNINGPART:FormatOutput  INPART:True
CODE LINE 134     '''

IDENT: 1
PART LENGTH FormatOutput: 2
RUNINGPART:FormatOutput  INPART:True
CODE LINE 135     OutPut whit the optimal Format.

IDENT: 1
PART LENGTH FormatOutput: 3
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 17     

RUNINGPART:FormatOutput  INPART:True
CODE LINE 136     Parameters

IDENT: 1
PART LENGTH FormatOutput: 4
RUNINGPART:FormatOutput  INPART:True
CODE LINE 137     -------

IDENT: 1
PART LENGTH FormatOutput: 5
RUNINGPART:FormatOutput  INPART:True
CODE LINE 138     code_lines: int, 

IDENT: 1
PART LENGTH FormatOutput: 6
RUNINGPART:FormatOutput  INPART:True
CODE LINE 139         phisical code lines

IDENT: 2
PART LENGTH FormatOutput: 7
RUNINGPART:FormatOutput  INPART:True
CODE LINE 140     parts: dic

IDENT: 1
PART LENGTH FormatOutput: 8
RUNINGPART:FormatOutput  INPART:True
CODE LINE 141         Dictoinary of parts

IDENT: 2
PART LENGTH FormatOutput: 9
RUNINGPART:FormatOutput  INPART:True
CODE LINE 142     total_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 10
RUNINGPART:FormatOutput  INPART:True
CODE LINE 143         Total fo lines.

IDENT: 2
PART LENGTH FormatOutput: 11
RUNINGPART:FormatOutput  INPART:True
CODE LINE 144     blank_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 12
RUNINGPART:FormatOutput  INPART:True
CODE LINE 145         Blank Lines

IDENT: 2
PART LENGTH FormatOutput: 13
RUNINGPART:FormatOutput  INPART:True
CODE LINE 146     comment_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 14
RUNINGPART:FormatOutput  INPART:True
CODE LINE 147         Comment lines.

IDENT: 2
PART LENGTH FormatOutput: 15
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 18     

RUNINGPART:FormatOutput  INPART:True
CODE LINE 148     '''

IDENT: 1
PART LENGTH FormatOutput: 16
RUNINGPART:FormatOutput  INPART:True
CODE LINE 149     print "===================================================================="

IDENT: 1
PART LENGTH FormatOutput: 17
RUNINGPART:FormatOutput  INPART:True
CODE LINE 150     print string.expandtabs("Part Name\tN of Items\tPart Size\tTotal",16)

IDENT: 1
PART LENGTH FormatOutput: 18
RUNINGPART:FormatOutput  INPART:True
CODE LINE 151     print "===================================================================="

IDENT: 1
PART LENGTH FormatOutput: 19
RUNINGPART:FormatOutput  INPART:True
CODE LINE 152     for part in parts:

IDENT: 1
PART LENGTH FormatOutput: 20
RUNINGPART:FormatOutput  INPART:True
CODE LINE 153         print string.expandtabs("%s\t%s\t%s" % (parts[part].name, 

IDENT: 2
PART LENGTH FormatOutput: 21
RUNINGPART:FormatOutput  INPART:True
CODE LINE 154                     len(parts[part].sub_items.keys()), parts[part].length),16)

IDENT: 5
PART LENGTH FormatOutput: 22
RUNINGPART:FormatOutput  INPART:True
CODE LINE 155     print string.expandtabs("\t\t\t%s" % code_lines,16)

IDENT: 1
PART LENGTH FormatOutput: 23
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 19 

RUNINGPART:FormatOutput  INPART:True
BLANK LINE 20 

RUNINGPART:FormatOutput  INPART:True
CODE LINE 156 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 157     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 158     uso = "modo de uso: %prog [options]"

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 159     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 160     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 161                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 162     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 163     log.info("START COUNTING")              #Start Program

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 164     if options.file:

IDENT: 1
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 165         (code_lines, parts, total_lines, blank_lines, comment_lines)=LOCCount(options.file)

IDENT: 2
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 166         FormatOutput(code_lines, parts, total_lines, blank_lines, comment_lines)

IDENT: 2
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 167     else:

IDENT: 1
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 168         parser.error("please define File,  %prog -F example.py\n Please use -h for help")

IDENT: 2
PART LENGTH main: 13
RUNINGPART:main  INPART:True
BLANK LINE 21 

RUNINGPART:main  INPART:True
CODE LINE 169 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 170     main()

===TOTAL===
 CODE LINES:170
 PARTS:{'Item': <__main__.Item object at 0x7f0f83953ed0>, 'main': <__main__.Item object at 0x7f0f8395a150>, 'FormatOutput': <__main__.Item object at 0x7f0f8395a110>, 'LOCCount': <__main__.Item object at 0x7f0f8395a0d0>} 
 TOTAL LINES:211 
 BLANK LINE:21 
 COMMEN_LINES:20
START COUNTING
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       pyloc.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 import collections

RUNINGPART:False  INPART:False
CODE LINE 11 from weakref import proxy

RUNINGPART:False  INPART:False
CODE LINE 12 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 13 import string

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 14 LOG_FILENAME = 'loc.log'

RUNINGPART:False  INPART:False
CODE LINE 15 COMMENT_START_STRING = "#"

RUNINGPART:False  INPART:False
CODE LINE 16 PY_EXTENSION = [".py "]

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 17 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 18 log = logging.getLogger('LOC')

RUNINGPART:False  INPART:False
CODE LINE 19 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 20 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 21 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 6 

RUNINGPART:False  INPART:False
CODE LINE 22 class Item(object):

ADDED PART Item class Item(object):

RUNINGPART:Item  INPART:True
CODE LINE 23     '''

IDENT: 1
PART LENGTH Item: 2
RUNINGPART:Item  INPART:True
CODE LINE 24     Item of Code, PSP Defined Part

IDENT: 1
PART LENGTH Item: 3
RUNINGPART:Item  INPART:True
CODE LINE 25     '''

IDENT: 1
PART LENGTH Item: 4
RUNINGPART:Item  INPART:True
CODE LINE 26     def __init__(self, line, start_line):

IN PART Item  ADD ITEM __init__:     def __init__(self, line, start_line):

RUNINGPART:Item  INPART:True
CODE LINE 27         '''

IDENT: 2
PART LENGTH Item: 6
RUNINGPART:Item  INPART:True
CODE LINE 28         Item Constructor

IDENT: 2
PART LENGTH Item: 7
RUNINGPART:Item  INPART:True
BLANK LINE 7         

RUNINGPART:Item  INPART:True
CODE LINE 29         Parameters

IDENT: 2
PART LENGTH Item: 8
RUNINGPART:Item  INPART:True
CODE LINE 30         ----------

IDENT: 2
PART LENGTH Item: 9
RUNINGPART:Item  INPART:True
CODE LINE 31         line: str,

IDENT: 2
PART LENGTH Item: 10
RUNINGPART:Item  INPART:True
CODE LINE 32             line to analyze.

IDENT: 3
PART LENGTH Item: 11
RUNINGPART:Item  INPART:True
CODE LINE 33         start_line: int, 

IDENT: 2
PART LENGTH Item: 12
RUNINGPART:Item  INPART:True
CODE LINE 34             Start position

IDENT: 3
PART LENGTH Item: 13
RUNINGPART:Item  INPART:True
BLANK LINE 8         

RUNINGPART:Item  INPART:True
CODE LINE 35         '''

IDENT: 2
PART LENGTH Item: 14
RUNINGPART:Item  INPART:True
CODE LINE 36         self.line=line

IDENT: 2
PART LENGTH Item: 15
RUNINGPART:Item  INPART:True
CODE LINE 37         self.start_line=start_line

IDENT: 2
PART LENGTH Item: 16
RUNINGPART:Item  INPART:True
CODE LINE 38         self.end_line=False

IDENT: 2
PART LENGTH Item: 17
RUNINGPART:Item  INPART:True
CODE LINE 39         self.name=False

IDENT: 2
PART LENGTH Item: 18
RUNINGPART:Item  INPART:True
CODE LINE 40         self.ident_level=False

IDENT: 2
PART LENGTH Item: 19
RUNINGPART:Item  INPART:True
CODE LINE 41         self.length=0

IDENT: 2
PART LENGTH Item: 20
RUNINGPART:Item  INPART:True
CODE LINE 42         self.sub_items={}

IDENT: 2
PART LENGTH Item: 21
RUNINGPART:Item  INPART:True
CODE LINE 43         self.is_a_part=self.IdentifyPart()

IDENT: 2
PART LENGTH Item: 22
RUNINGPART:Item  INPART:True
BLANK LINE 9         

RUNINGPART:Item  INPART:True
CODE LINE 44     def IdentifyPart(self):

IN PART Item  ADD ITEM IdentifyPart:     def IdentifyPart(self):

RUNINGPART:Item  INPART:True
CODE LINE 45         '''

IDENT: 2
PART LENGTH Item: 24
RUNINGPART:Item  INPART:True
CODE LINE 46         Extract Item o Part Name. from line, Ident Level and If is a item

IDENT: 2
PART LENGTH Item: 25
RUNINGPART:Item  INPART:True
BLANK LINE 10         

RUNINGPART:Item  INPART:True
CODE LINE 47         Returns

IDENT: 2
PART LENGTH Item: 26
RUNINGPART:Item  INPART:True
CODE LINE 48         -------

IDENT: 2
PART LENGTH Item: 27
RUNINGPART:Item  INPART:True
CODE LINE 49             is_a_part: Bool, 

IDENT: 3
PART LENGTH Item: 28
RUNINGPART:Item  INPART:True
CODE LINE 50                 Is a Item, Part, Function or Classs

IDENT: 4
PART LENGTH Item: 29
RUNINGPART:Item  INPART:True
CODE LINE 51         '''

IDENT: 2
PART LENGTH Item: 30
RUNINGPART:Item  INPART:True
CODE LINE 52         idents=self.line.rstrip().split("    ")

IDENT: 3
PART LENGTH Item: 31
RUNINGPART:Item  INPART:True
CODE LINE 53         self.ident_level=len(idents) - 1

IDENT: 2
PART LENGTH Item: 32
RUNINGPART:Item  INPART:True
CODE LINE 54         for level in idents:

IDENT: 2
PART LENGTH Item: 33
RUNINGPART:Item  INPART:True
CODE LINE 55             if level.startswith("def ") or level.startswith("class "):

IDENT: 3
PART LENGTH Item: 34
RUNINGPART:Item  INPART:True
CODE LINE 56                 self.name=level.split(" ")[1].split("(")[0]

IDENT: 4
PART LENGTH Item: 35
RUNINGPART:Item  INPART:True
CODE LINE 57                 return True

IDENT: 4
PART LENGTH Item: 36
RUNINGPART:Item  INPART:True
CODE LINE 58         return False

IDENT: 2
PART LENGTH Item: 37
RUNINGPART:Item  INPART:True
BLANK LINE 11 

RUNINGPART:Item  INPART:True
CODE LINE 59 def LocateCountingFiles(root, extensions=PY_EXTENSION):

ADDED PART LocateCountingFiles def LocateCountingFiles(root, extensions=PY_EXTENSION):

RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 60     '''

IDENT: 1
PART LENGTH LocateCountingFiles: 2
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 61     Locate all files matching supplied filename pattern in and below

IDENT: 1
PART LENGTH LocateCountingFiles: 3
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 62     supplied root directory.

IDENT: 1
PART LENGTH LocateCountingFiles: 4
RUNINGPART:LocateCountingFiles  INPART:True
BLANK LINE 12     

RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 63     Parameters

IDENT: 1
PART LENGTH LocateCountingFiles: 5
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 64     ----------

IDENT: 1
PART LENGTH LocateCountingFiles: 6
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 65     root : str, path of programs 

IDENT: 1
PART LENGTH LocateCountingFiles: 7
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 66         search file for counting lines..

IDENT: 2
PART LENGTH LocateCountingFiles: 8
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 67     extensions : list, List of extensions

IDENT: 1
PART LENGTH LocateCountingFiles: 9
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 68         Extension to search programs

IDENT: 2
PART LENGTH LocateCountingFiles: 10
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 69     '''

IDENT: 1
PART LENGTH LocateCountingFiles: 11
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 70     for path, dirs, files in os.walk(os.path.abspath(root)):

IDENT: 1
PART LENGTH LocateCountingFiles: 12
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 71         for filename in files:

IDENT: 2
PART LENGTH LocateCountingFiles: 13
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 72             for ext in extensions:

IDENT: 3
PART LENGTH LocateCountingFiles: 14
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 73                 if filename.endswith(ext):

IDENT: 4
PART LENGTH LocateCountingFiles: 15
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 74                     if os.stat(os.path.join(path, filename)):

IDENT: 5
PART LENGTH LocateCountingFiles: 16
RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 75                         yield os.path.join(path, filename)

IDENT: 6
PART LENGTH LocateCountingFiles: 17
RUNINGPART:LocateCountingFiles  INPART:True
BLANK LINE 13 

RUNINGPART:LocateCountingFiles  INPART:True
CODE LINE 76 def LOCCountDir(root, extensions=PY_EXTENSION):

ADDED PART LOCCountDir def LOCCountDir(root, extensions=PY_EXTENSION):

RUNINGPART:LOCCountDir  INPART:True
CODE LINE 77     '''

IDENT: 1
PART LENGTH LOCCountDir: 2
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 78     Locate all files matching supplied filename pattern in and below

IDENT: 1
PART LENGTH LOCCountDir: 3
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 79     supplied root directory.

IDENT: 1
PART LENGTH LOCCountDir: 4
RUNINGPART:LOCCountDir  INPART:True
BLANK LINE 14     

RUNINGPART:LOCCountDir  INPART:True
CODE LINE 80     Parameters

IDENT: 1
PART LENGTH LOCCountDir: 5
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 81     ----------

IDENT: 1
PART LENGTH LOCCountDir: 6
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 82     root : str, path of programs 

IDENT: 1
PART LENGTH LOCCountDir: 7
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 83         search file for counting lines..

IDENT: 2
PART LENGTH LOCCountDir: 8
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 84     extensions : list, List of extensions

IDENT: 1
PART LENGTH LOCCountDir: 9
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 85         Extension to search programs

IDENT: 2
PART LENGTH LOCCountDir: 10
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 86     '''

IDENT: 1
PART LENGTH LOCCountDir: 11
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 87     locate = LocateCountingFiles(root, extensions)

IDENT: 1
PART LENGTH LOCCountDir: 12
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 88     great_total = 0

IDENT: 1
PART LENGTH LOCCountDir: 13
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 89     while True:

IDENT: 1
PART LENGTH LOCCountDir: 14
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 90         try:

IDENT: 2
PART LENGTH LOCCountDir: 15
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 91             file_to_count = locate.next()

IDENT: 3
PART LENGTH LOCCountDir: 16
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 92             log.info("Counting File: %s" % file_to_count)

IDENT: 3
PART LENGTH LOCCountDir: 17
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 93             (code_lines, parts, total_lines, blank_lines, comment_lines)=LOCCountFile(file_to_count)

IDENT: 3
PART LENGTH LOCCountDir: 18
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 94             print "===================================================================="

IDENT: 3
PART LENGTH LOCCountDir: 19
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 95             print string.expandtabs("\t\t%s" % file_to_count,16)

IDENT: 3
PART LENGTH LOCCountDir: 20
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 96             print "===================================================================="

IDENT: 3
PART LENGTH LOCCountDir: 21
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 97             FormatOutput(code_lines, parts, total_lines, blank_lines, comment_lines)

IDENT: 3
PART LENGTH LOCCountDir: 22
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 98             great_total+=code_lines

IDENT: 3
PART LENGTH LOCCountDir: 23
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 99         except StopIteration:

IDENT: 2
PART LENGTH LOCCountDir: 24
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 100             log.info("Fin De Archivado")

IDENT: 3
PART LENGTH LOCCountDir: 25
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 101             break

IDENT: 3
PART LENGTH LOCCountDir: 26
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 102     print "===================================================================="

IDENT: 1
PART LENGTH LOCCountDir: 27
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 103     print string.expandtabs("\t\t\t%s" % great_total,16)

IDENT: 1
PART LENGTH LOCCountDir: 28
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 104     print "===================================================================="

IDENT: 1
PART LENGTH LOCCountDir: 29
RUNINGPART:LOCCountDir  INPART:True
BLANK LINE 15             

RUNINGPART:LOCCountDir  INPART:True
BLANK LINE 16 

RUNINGPART:LOCCountDir  INPART:True
BLANK LINE 17     

RUNINGPART:LOCCountDir  INPART:True
BLANK LINE 18     

RUNINGPART:LOCCountDir  INPART:True
BLANK LINE 19 

RUNINGPART:LOCCountDir  INPART:True
CODE LINE 105 def LOCCountFile(file):

ADDED PART LOCCountFile def LOCCountFile(file):

RUNINGPART:LOCCountFile  INPART:True
CODE LINE 106     '''

IDENT: 1
PART LENGTH LOCCountFile: 2
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 107     Count LOC in File. Follow Python Code Standar.

IDENT: 1
PART LENGTH LOCCountFile: 3
RUNINGPART:LOCCountFile  INPART:True
BLANK LINE 20     

RUNINGPART:LOCCountFile  INPART:True
CODE LINE 108     Parameters

IDENT: 1
PART LENGTH LOCCountFile: 4
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 109     ----------

IDENT: 1
PART LENGTH LOCCountFile: 5
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 110     file : str, path of file 

IDENT: 1
PART LENGTH LOCCountFile: 6
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 111         file for counting lines..

IDENT: 2
PART LENGTH LOCCountFile: 7
RUNINGPART:LOCCountFile  INPART:True
BLANK LINE 21 

RUNINGPART:LOCCountFile  INPART:True
CODE LINE 112     Returns

IDENT: 1
PART LENGTH LOCCountFile: 8
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 113     -------

IDENT: 1
PART LENGTH LOCCountFile: 9
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 114     code_lines: int, 

IDENT: 1
PART LENGTH LOCCountFile: 10
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 115         phisical code lines

IDENT: 2
PART LENGTH LOCCountFile: 11
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 116     parts: dic

IDENT: 1
PART LENGTH LOCCountFile: 12
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 117         Dictoinary of parts

IDENT: 2
PART LENGTH LOCCountFile: 13
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 118     total_lines: int,

IDENT: 1
PART LENGTH LOCCountFile: 14
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 119         Total fo lines.

IDENT: 2
PART LENGTH LOCCountFile: 15
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 120     blank_lines: int,

IDENT: 1
PART LENGTH LOCCountFile: 16
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 121         Blank Lines

IDENT: 2
PART LENGTH LOCCountFile: 17
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 122     comment_lines: int,

IDENT: 1
PART LENGTH LOCCountFile: 18
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 123         Comment lines.

IDENT: 2
PART LENGTH LOCCountFile: 19
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 124     '''

IDENT: 1
PART LENGTH LOCCountFile: 20
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 125     total_lines=0

IDENT: 1
PART LENGTH LOCCountFile: 21
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 126     code_lines=0

IDENT: 1
PART LENGTH LOCCountFile: 22
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 127     blank_lines=0

IDENT: 1
PART LENGTH LOCCountFile: 23
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 128     comment_lines=0

IDENT: 1
PART LENGTH LOCCountFile: 24
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 129     parts = {}

IDENT: 1
PART LENGTH LOCCountFile: 25
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 130     in_part=False

IDENT: 1
PART LENGTH LOCCountFile: 26
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 131     running_part=False

IDENT: 1
PART LENGTH LOCCountFile: 27
RUNINGPART:LOCCountFile  INPART:True
BLANK LINE 22             

RUNINGPART:LOCCountFile  INPART:True
CODE LINE 132     with open(file, 'rb') as code_file:

IDENT: 1
PART LENGTH LOCCountFile: 28
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 133         for line in code_file:

IDENT: 2
PART LENGTH LOCCountFile: 29
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 134             log.debug("RUNINGPART:%s  INPART:%s" % (running_part, in_part))

IDENT: 3
PART LENGTH LOCCountFile: 30
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 135             total_lines+=1

IDENT: 3
PART LENGTH LOCCountFile: 31
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 136             if line.strip().startswith("#"):

IDENT: 3
PART LENGTH LOCCountFile: 32
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 137                 comment_lines+=1

IDENT: 4
PART LENGTH LOCCountFile: 33
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 138                 log.debug("COMENT LINE %s %s" % (comment_lines, line))

IDENT: 4
PART LENGTH LOCCountFile: 34
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 139             elif not line.strip():

IDENT: 3
PART LENGTH LOCCountFile: 35
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 140                 blank_lines+=1

IDENT: 4
PART LENGTH LOCCountFile: 36
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 141                 log.debug("BLANK LINE %s %s" % (blank_lines, line))

IDENT: 4
PART LENGTH LOCCountFile: 37
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 142             else:

IDENT: 3
PART LENGTH LOCCountFile: 38
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 143                 code_lines+=1

IDENT: 4
PART LENGTH LOCCountFile: 39
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 144                 log.debug("CODE LINE %s %s" % (code_lines, line))

IDENT: 4
PART LENGTH LOCCountFile: 40
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 145                 running_item=Item(line, total_lines)

IDENT: 4
PART LENGTH LOCCountFile: 41
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 146                 if running_item.is_a_part:

IDENT: 4
PART LENGTH LOCCountFile: 42
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 147                     if running_item.ident_level==0:

IDENT: 5
PART LENGTH LOCCountFile: 43
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 148                         '''Is a Part'''

IDENT: 6
PART LENGTH LOCCountFile: 44
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 149                         parts[running_item.name]=running_item

IDENT: 6
PART LENGTH LOCCountFile: 45
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 150                         running_part=running_item.name

IDENT: 6
PART LENGTH LOCCountFile: 46
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 151                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCountFile: 47
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 152                         in_part=True

IDENT: 6
PART LENGTH LOCCountFile: 48
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 153                         logpart=logging.getLogger('LOC.%s' % running_part)

IDENT: 6
PART LENGTH LOCCountFile: 49
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 154                         log.debug("ADDED PART %s %s" % (running_item.name, 

IDENT: 6
PART LENGTH LOCCountFile: 50
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 155                                                                         line))

IDENT: 18
PART LENGTH LOCCountFile: 51
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 156                     elif running_item.ident_level==1:

IDENT: 5
PART LENGTH LOCCountFile: 52
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 157                         parts[running_part].sub_items[running_item.name]=running_item

IDENT: 6
PART LENGTH LOCCountFile: 53
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 158                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCountFile: 54
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 159                         logpart.debug("IN PART %s  ADD ITEM %s: %s" % (running_part, 

IDENT: 6
PART LENGTH LOCCountFile: 55
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 160                                                     running_item.name, line))

IDENT: 13
PART LENGTH LOCCountFile: 56
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 161                     else:

IDENT: 5
PART LENGTH LOCCountFile: 57
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 162                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCountFile: 58
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 163                         logpart.debug("PART LENGTH %s: %s %s" % (running_part, 

IDENT: 6
PART LENGTH LOCCountFile: 59
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 164                                             parts[running_part].length, line))

IDENT: 11
PART LENGTH LOCCountFile: 60
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 165                 else:

IDENT: 4
PART LENGTH LOCCountFile: 61
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 166                     if in_part:

IDENT: 5
PART LENGTH LOCCountFile: 62
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 167                         logpart.debug("IDENT: %s" % running_item.ident_level)

IDENT: 6
PART LENGTH LOCCountFile: 63
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 168                         if running_item.ident_level>0:

IDENT: 6
PART LENGTH LOCCountFile: 64
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 169                             parts[running_part].length+=1

IDENT: 7
PART LENGTH LOCCountFile: 65
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 170                             logpart.debug("PART LENGTH %s: %s" % (running_part, 

IDENT: 7
PART LENGTH LOCCountFile: 66
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 171                                             parts[running_part].length))

IDENT: 11
PART LENGTH LOCCountFile: 67
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 172                         else:

IDENT: 6
PART LENGTH LOCCountFile: 68
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 173                             parts[running_part].end_line=total_lines

IDENT: 7
PART LENGTH LOCCountFile: 69
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 174                             in_part=False

IDENT: 7
PART LENGTH LOCCountFile: 70
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 175                             del running_item

IDENT: 7
PART LENGTH LOCCountFile: 71
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 176     log.debug("===TOTAL===\n CODE LINES:%s\n PARTS:%s \n TOTAL LINES:%s \n "

IDENT: 1
PART LENGTH LOCCountFile: 72
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 177               "BLANK LINE:%s \n COMMEN_LINES:%s" % 

IDENT: 3
PART LENGTH LOCCountFile: 73
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 178               (code_lines, parts, total_lines, blank_lines, comment_lines))

IDENT: 3
PART LENGTH LOCCountFile: 74
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 179     return (code_lines, parts, total_lines, blank_lines, comment_lines)

IDENT: 1
PART LENGTH LOCCountFile: 75
RUNINGPART:LOCCountFile  INPART:True
BLANK LINE 23 

RUNINGPART:LOCCountFile  INPART:True
CODE LINE 180 def FormatOutput(code_lines, parts, total_lines=0, blank_lines=0, comment_lines=0):

ADDED PART FormatOutput def FormatOutput(code_lines, parts, total_lines=0, blank_lines=0, comment_lines=0):

RUNINGPART:FormatOutput  INPART:True
CODE LINE 181     '''

IDENT: 1
PART LENGTH FormatOutput: 2
RUNINGPART:FormatOutput  INPART:True
CODE LINE 182     OutPut whit the optimal Format.

IDENT: 1
PART LENGTH FormatOutput: 3
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 24     

RUNINGPART:FormatOutput  INPART:True
CODE LINE 183     Parameters

IDENT: 1
PART LENGTH FormatOutput: 4
RUNINGPART:FormatOutput  INPART:True
CODE LINE 184     -------

IDENT: 1
PART LENGTH FormatOutput: 5
RUNINGPART:FormatOutput  INPART:True
CODE LINE 185     code_lines: int, 

IDENT: 1
PART LENGTH FormatOutput: 6
RUNINGPART:FormatOutput  INPART:True
CODE LINE 186         phisical code lines

IDENT: 2
PART LENGTH FormatOutput: 7
RUNINGPART:FormatOutput  INPART:True
CODE LINE 187     parts: dic

IDENT: 1
PART LENGTH FormatOutput: 8
RUNINGPART:FormatOutput  INPART:True
CODE LINE 188         Dictoinary of parts

IDENT: 2
PART LENGTH FormatOutput: 9
RUNINGPART:FormatOutput  INPART:True
CODE LINE 189     total_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 10
RUNINGPART:FormatOutput  INPART:True
CODE LINE 190         Total fo lines.

IDENT: 2
PART LENGTH FormatOutput: 11
RUNINGPART:FormatOutput  INPART:True
CODE LINE 191     blank_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 12
RUNINGPART:FormatOutput  INPART:True
CODE LINE 192         Blank Lines

IDENT: 2
PART LENGTH FormatOutput: 13
RUNINGPART:FormatOutput  INPART:True
CODE LINE 193     comment_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 14
RUNINGPART:FormatOutput  INPART:True
CODE LINE 194         Comment lines.

IDENT: 2
PART LENGTH FormatOutput: 15
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 25     

RUNINGPART:FormatOutput  INPART:True
CODE LINE 195     '''

IDENT: 1
PART LENGTH FormatOutput: 16
RUNINGPART:FormatOutput  INPART:True
CODE LINE 196     print "===================================================================="

IDENT: 1
PART LENGTH FormatOutput: 17
RUNINGPART:FormatOutput  INPART:True
CODE LINE 197     print string.expandtabs("Part Name\tN of Items\tPart Size\tTotal",16)

IDENT: 1
PART LENGTH FormatOutput: 18
RUNINGPART:FormatOutput  INPART:True
CODE LINE 198     print "===================================================================="

IDENT: 1
PART LENGTH FormatOutput: 19
RUNINGPART:FormatOutput  INPART:True
CODE LINE 199     for part in parts:

IDENT: 1
PART LENGTH FormatOutput: 20
RUNINGPART:FormatOutput  INPART:True
CODE LINE 200         print string.expandtabs("%s\t%s\t%s" % (parts[part].name, 

IDENT: 2
PART LENGTH FormatOutput: 21
RUNINGPART:FormatOutput  INPART:True
CODE LINE 201                     len(parts[part].sub_items.keys()), parts[part].length),16)

IDENT: 5
PART LENGTH FormatOutput: 22
RUNINGPART:FormatOutput  INPART:True
CODE LINE 202     print string.expandtabs("\t\t\t%s" % code_lines,16)

IDENT: 1
PART LENGTH FormatOutput: 23
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 26 

RUNINGPART:FormatOutput  INPART:True
BLANK LINE 27 

RUNINGPART:FormatOutput  INPART:True
CODE LINE 203 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 204     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 205     uso = "modo de uso: %prog [options]"

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 206     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 207     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 208                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 209     parser.add_option("-D", "--dir", dest="dir",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 210                   help="process dir [DIR]", metavar="Directory")

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 211     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 212     log.info("START COUNTING")              #Start Program

IDENT: 4
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 213     if options.dir:

IDENT: 1
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 214         LOCCountDir(dir)

IDENT: 2
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 215     elif options.file:

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 216         (code_lines, parts, total_lines, blank_lines, comment_lines)=LOCCountFile(options.file)

IDENT: 2
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 217         FormatOutput(code_lines, parts, total_lines, blank_lines, comment_lines)

IDENT: 2
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 218     else:

IDENT: 1
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 219         parser.error("please define File,  %prog -F example.py\n Please use -h for help")

IDENT: 2
PART LENGTH main: 17
RUNINGPART:main  INPART:True
BLANK LINE 28 

RUNINGPART:main  INPART:True
CODE LINE 220 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 221     main()

===TOTAL===
 CODE LINES:221
 PARTS:{'LocateCountingFiles': <__main__.Item object at 0x7f51abaa1fd0>, 'Item': <__main__.Item object at 0x7f51abaa1f90>, 'FormatOutput': <__main__.Item object at 0x7f51abaaa2d0>, 'LOCCountDir': <__main__.Item object at 0x7f51abaaa150>, 'main': <__main__.Item object at 0x7f51abaaa310>, 'LOCCountFile': <__main__.Item object at 0x7f51abaaa210>} 
 TOTAL LINES:269 
 BLANK LINE:28 
 COMMEN_LINES:20
START COUNTING
START COUNTING
START COUNTING
START COUNTING
START COUNTING
START COUNTING
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/test_mean_std.py
RUNINGPART:False  INPART:False
CODE LINE 1 import unittest

RUNINGPART:False  INPART:False
CODE LINE 2 from mean_std import Mean, Std, LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
CODE LINE 3 class TestAssignament(unittest.TestCase):

ADDED PART TestAssignament class TestAssignament(unittest.TestCase):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 4     def test_estimate_proxy_size(self):

IN PART TestAssignament  ADD ITEM test_estimate_proxy_size:     def test_estimate_proxy_size(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 5         a=LinkedList([160,591,114,229,230,270,128,1657,624,1503])

IDENT: 2
PART LENGTH TestAssignament: 3
RUNINGPART:TestAssignament  INPART:True
CODE LINE 6         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 4
RUNINGPART:TestAssignament  INPART:True
CODE LINE 7         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 5
RUNINGPART:TestAssignament  INPART:True
CODE LINE 8         print a

IDENT: 2
PART LENGTH TestAssignament: 6
RUNINGPART:TestAssignament  INPART:True
CODE LINE 9         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 7
RUNINGPART:TestAssignament  INPART:True
CODE LINE 10         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 8
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 2     

RUNINGPART:TestAssignament  INPART:True
CODE LINE 11     def test_development_hours(self):

IN PART TestAssignament  ADD ITEM test_development_hours:     def test_development_hours(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 12         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 10
RUNINGPART:TestAssignament  INPART:True
CODE LINE 13         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 11
RUNINGPART:TestAssignament  INPART:True
CODE LINE 14         a=LinkedList([15.0,69.9,6.5,22.4,28.4,65.9,19.4,198.7,38.8,138.2])

IDENT: 2
PART LENGTH TestAssignament: 12
RUNINGPART:TestAssignament  INPART:True
CODE LINE 15         print a

IDENT: 2
PART LENGTH TestAssignament: 13
RUNINGPART:TestAssignament  INPART:True
CODE LINE 16         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 14
RUNINGPART:TestAssignament  INPART:True
CODE LINE 17         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 15
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 3 

RUNINGPART:TestAssignament  INPART:True
CODE LINE 18 if __name__ == '__main__':

IDENT: 0
RUNINGPART:TestAssignament  INPART:False
CODE LINE 19     unittest.main()
===TOTAL===
 CODE LINES:19
 PARTS:{'TestAssignament': <__main__.Item object at 0x7f916ae74ed0>} 
 TOTAL LINES:22 
 BLANK LINE:3 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/mean_std.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 68     log.info("START APP")

IDENT: 1
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 69     if options.file:

IDENT: 1
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 70         if options.std or options.mean:

IDENT: 2
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 71             dataset=read_file(options.file)

IDENT: 3
PART LENGTH main: 17
RUNINGPART:main  INPART:True
CODE LINE 72             if options.std:

IDENT: 3
PART LENGTH main: 18
RUNINGPART:main  INPART:True
CODE LINE 73                 Std(dataset)

IDENT: 4
PART LENGTH main: 19
RUNINGPART:main  INPART:True
CODE LINE 74             if options.mean:

IDENT: 3
PART LENGTH main: 20
RUNINGPART:main  INPART:True
CODE LINE 75                 Mean(dataset)

IDENT: 4
PART LENGTH main: 21
RUNINGPART:main  INPART:True
CODE LINE 76         else:

IDENT: 2
PART LENGTH main: 22
RUNINGPART:main  INPART:True
CODE LINE 77              parser.error("please set calculation,\n Please use -h for help")

IDENT: 3
PART LENGTH main: 23
RUNINGPART:main  INPART:True
CODE LINE 78     else:

IDENT: 1
PART LENGTH main: 24
RUNINGPART:main  INPART:True
CODE LINE 79         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

IDENT: 2
PART LENGTH main: 25
RUNINGPART:main  INPART:True
BLANK LINE 11 

RUNINGPART:main  INPART:True
CODE LINE 80 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 81     main()

===TOTAL===
 CODE LINES:81
 PARTS:{'Std': <__main__.Item object at 0x7f916ae7d250>, 'main': <__main__.Item object at 0x7f916ae7d310>, 'read_file': <__main__.Item object at 0x7f916ae7d290>, 'Mean': <__main__.Item object at 0x7f916ae7d190>} 
 TOTAL LINES:114 
 BLANK LINE:11 
 COMMEN_LINES:22
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/__init__.py
===TOTAL===
 CODE LINES:0
 PARTS:{} 
 TOTAL LINES:0 
 BLANK LINE:0 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/LinkedList.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import collections

RUNINGPART:False  INPART:False
CODE LINE 7 from weakref import proxy

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 8 class Link(object):

ADDED PART Link class Link(object):

RUNINGPART:Link  INPART:True
CODE LINE 9     '''

IDENT: 1
PART LENGTH Link: 2
RUNINGPART:Link  INPART:True
CODE LINE 10     The proper use of __slots__ is to save space in objects.

IDENT: 1
PART LENGTH Link: 3
RUNINGPART:Link  INPART:True
CODE LINE 11     '''

IDENT: 1
PART LENGTH Link: 4
RUNINGPART:Link  INPART:True
CODE LINE 12     __slots__ = 'prev', 'next', 'key', '__weakref__'

IDENT: 1
PART LENGTH Link: 5
RUNINGPART:Link  INPART:True
BLANK LINE 5 

RUNINGPART:Link  INPART:True
CODE LINE 13 class LinkedList(collections.MutableSet):

ADDED PART LinkedList class LinkedList(collections.MutableSet):

RUNINGPART:LinkedList  INPART:True
CODE LINE 14     '''

IDENT: 1
PART LENGTH LinkedList: 2
RUNINGPART:LinkedList  INPART:True
CODE LINE 15     LinkedLink

IDENT: 1
PART LENGTH LinkedList: 3
RUNINGPART:LinkedList  INPART:True
CODE LINE 16     Set the remembers the order elements were added

IDENT: 1
PART LENGTH LinkedList: 4
RUNINGPART:LinkedList  INPART:True
CODE LINE 17     '''

IDENT: 1
PART LENGTH LinkedList: 5
RUNINGPART:LinkedList  INPART:True
BLANK LINE 6 

RUNINGPART:LinkedList  INPART:True
CODE LINE 18     def __init__(self, iterable=None):

IN PART LinkedList  ADD ITEM __init__:     def __init__(self, iterable=None):

RUNINGPART:LinkedList  INPART:True
CODE LINE 19         '''

IDENT: 2
PART LENGTH LinkedList: 7
RUNINGPART:LinkedList  INPART:True
CODE LINE 20         Init

IDENT: 2
PART LENGTH LinkedList: 8
RUNINGPART:LinkedList  INPART:True
CODE LINE 21         '''

IDENT: 2
PART LENGTH LinkedList: 9
RUNINGPART:LinkedList  INPART:True
CODE LINE 22         self.__root = root = Link()         

IDENT: 2
PART LENGTH LinkedList: 10
RUNINGPART:LinkedList  INPART:True
CODE LINE 23         root.prev = root.next = root

IDENT: 2
PART LENGTH LinkedList: 11
RUNINGPART:LinkedList  INPART:True
CODE LINE 24         self.__map = {}                     # key --> link

IDENT: 7
PART LENGTH LinkedList: 12
RUNINGPART:LinkedList  INPART:True
CODE LINE 25         if iterable is not None:

IDENT: 2
PART LENGTH LinkedList: 13
RUNINGPART:LinkedList  INPART:True
CODE LINE 26             self |= iterable

IDENT: 3
PART LENGTH LinkedList: 14
RUNINGPART:LinkedList  INPART:True
BLANK LINE 7 

RUNINGPART:LinkedList  INPART:True
CODE LINE 27     def __len__(self):

IN PART LinkedList  ADD ITEM __len__:     def __len__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 28         '''

IDENT: 2
PART LENGTH LinkedList: 16
RUNINGPART:LinkedList  INPART:True
CODE LINE 29         Length for the LinkedList

IDENT: 2
PART LENGTH LinkedList: 17
RUNINGPART:LinkedList  INPART:True
CODE LINE 30         '''

IDENT: 2
PART LENGTH LinkedList: 18
RUNINGPART:LinkedList  INPART:True
CODE LINE 31         return len(self.__map)

IDENT: 2
PART LENGTH LinkedList: 19
RUNINGPART:LinkedList  INPART:True
BLANK LINE 8 

RUNINGPART:LinkedList  INPART:True
CODE LINE 32     def __contains__(self, key):

IN PART LinkedList  ADD ITEM __contains__:     def __contains__(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 33         '''

IDENT: 2
PART LENGTH LinkedList: 21
RUNINGPART:LinkedList  INPART:True
CODE LINE 34         Return Content of LinkedList

IDENT: 2
PART LENGTH LinkedList: 22
RUNINGPART:LinkedList  INPART:True
CODE LINE 35         '''

IDENT: 2
PART LENGTH LinkedList: 23
RUNINGPART:LinkedList  INPART:True
CODE LINE 36         return key in self.__map

IDENT: 2
PART LENGTH LinkedList: 24
RUNINGPART:LinkedList  INPART:True
BLANK LINE 9 

RUNINGPART:LinkedList  INPART:True
CODE LINE 37     def add(self, key):

IN PART LinkedList  ADD ITEM add:     def add(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 38         '''

IDENT: 2
PART LENGTH LinkedList: 26
RUNINGPART:LinkedList  INPART:True
CODE LINE 39         Add Node

IDENT: 2
PART LENGTH LinkedList: 27
RUNINGPART:LinkedList  INPART:True
CODE LINE 40         Store new key in a new link at the end of the linked list

IDENT: 2
PART LENGTH LinkedList: 28
RUNINGPART:LinkedList  INPART:True
CODE LINE 41         '''

IDENT: 2
PART LENGTH LinkedList: 29
RUNINGPART:LinkedList  INPART:True
CODE LINE 42         if key not in self.__map:

IDENT: 2
PART LENGTH LinkedList: 30
RUNINGPART:LinkedList  INPART:True
CODE LINE 43             '''

IDENT: 3
PART LENGTH LinkedList: 31
RUNINGPART:LinkedList  INPART:True
CODE LINE 44             Not Element Eq in the list

IDENT: 3
PART LENGTH LinkedList: 32
RUNINGPART:LinkedList  INPART:True
CODE LINE 45             '''

IDENT: 3
PART LENGTH LinkedList: 33
RUNINGPART:LinkedList  INPART:True
CODE LINE 46             self.__map[key] = link = Link()            

IDENT: 3
PART LENGTH LinkedList: 34
RUNINGPART:LinkedList  INPART:True
CODE LINE 47             root = self.__root

IDENT: 3
PART LENGTH LinkedList: 35
RUNINGPART:LinkedList  INPART:True
CODE LINE 48             last = root.prev

IDENT: 3
PART LENGTH LinkedList: 36
RUNINGPART:LinkedList  INPART:True
CODE LINE 49             link.prev, link.next, link.key = last, root, key

IDENT: 3
PART LENGTH LinkedList: 37
RUNINGPART:LinkedList  INPART:True
CODE LINE 50             last.next = root.prev = proxy(link)

IDENT: 3
PART LENGTH LinkedList: 38
RUNINGPART:LinkedList  INPART:True
BLANK LINE 10     

RUNINGPART:LinkedList  INPART:True
CODE LINE 51     def head(self):

IN PART LinkedList  ADD ITEM head:     def head(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 52         '''

IDENT: 2
PART LENGTH LinkedList: 40
RUNINGPART:LinkedList  INPART:True
CODE LINE 53         Return Head

IDENT: 2
PART LENGTH LinkedList: 41
RUNINGPART:LinkedList  INPART:True
CODE LINE 54         '''

IDENT: 2
PART LENGTH LinkedList: 42
RUNINGPART:LinkedList  INPART:True
CODE LINE 55         return list(self)[0],list(self)[-1] 

IDENT: 2
PART LENGTH LinkedList: 43
RUNINGPART:LinkedList  INPART:True
BLANK LINE 11         

RUNINGPART:LinkedList  INPART:True
BLANK LINE 12 

RUNINGPART:LinkedList  INPART:True
CODE LINE 56     def discard(self, key):

IN PART LinkedList  ADD ITEM discard:     def discard(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 57         '''

IDENT: 2
PART LENGTH LinkedList: 45
RUNINGPART:LinkedList  INPART:True
CODE LINE 58         Remove an existing item using self.__map to find the link which is

IDENT: 2
PART LENGTH LinkedList: 46
RUNINGPART:LinkedList  INPART:True
CODE LINE 59         then removed by updating the links in the predecessor and successors.

IDENT: 2
PART LENGTH LinkedList: 47
RUNINGPART:LinkedList  INPART:True
CODE LINE 60         '''

IDENT: 2
PART LENGTH LinkedList: 48
RUNINGPART:LinkedList  INPART:True
CODE LINE 61         if key in self.__map:

IDENT: 2
PART LENGTH LinkedList: 49
RUNINGPART:LinkedList  INPART:True
CODE LINE 62             link = self.__map.pop(key)

IDENT: 3
PART LENGTH LinkedList: 50
RUNINGPART:LinkedList  INPART:True
CODE LINE 63             link.prev.next = link.next

IDENT: 3
PART LENGTH LinkedList: 51
RUNINGPART:LinkedList  INPART:True
CODE LINE 64             link.next.prev = link.prev

IDENT: 3
PART LENGTH LinkedList: 52
RUNINGPART:LinkedList  INPART:True
BLANK LINE 13 

RUNINGPART:LinkedList  INPART:True
CODE LINE 65     def __iter__(self):

IN PART LinkedList  ADD ITEM __iter__:     def __iter__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 66         '''

IDENT: 2
PART LENGTH LinkedList: 54
RUNINGPART:LinkedList  INPART:True
CODE LINE 67         iteration for the Next Method

IDENT: 2
PART LENGTH LinkedList: 55
RUNINGPART:LinkedList  INPART:True
CODE LINE 68         '''

IDENT: 2
PART LENGTH LinkedList: 56
RUNINGPART:LinkedList  INPART:True
CODE LINE 69         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 57
RUNINGPART:LinkedList  INPART:True
CODE LINE 70         curr = root.next

IDENT: 2
PART LENGTH LinkedList: 58
RUNINGPART:LinkedList  INPART:True
CODE LINE 71         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 59
RUNINGPART:LinkedList  INPART:True
CODE LINE 72             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 60
RUNINGPART:LinkedList  INPART:True
CODE LINE 73             curr = curr.next

IDENT: 3
PART LENGTH LinkedList: 61
RUNINGPART:LinkedList  INPART:True
BLANK LINE 14 

RUNINGPART:LinkedList  INPART:True
CODE LINE 74     def __reversed__(self):

IN PART LinkedList  ADD ITEM __reversed__:     def __reversed__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 75         '''

IDENT: 2
PART LENGTH LinkedList: 63
RUNINGPART:LinkedList  INPART:True
CODE LINE 76         iteration in reverse mode Method

IDENT: 2
PART LENGTH LinkedList: 64
RUNINGPART:LinkedList  INPART:True
CODE LINE 77         '''

IDENT: 2
PART LENGTH LinkedList: 65
RUNINGPART:LinkedList  INPART:True
CODE LINE 78         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 66
RUNINGPART:LinkedList  INPART:True
CODE LINE 79         curr = root.prev

IDENT: 2
PART LENGTH LinkedList: 67
RUNINGPART:LinkedList  INPART:True
CODE LINE 80         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 68
RUNINGPART:LinkedList  INPART:True
CODE LINE 81             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 69
RUNINGPART:LinkedList  INPART:True
CODE LINE 82             curr = curr.prev

IDENT: 3
PART LENGTH LinkedList: 70
RUNINGPART:LinkedList  INPART:True
BLANK LINE 15 

RUNINGPART:LinkedList  INPART:True
CODE LINE 83     def pop(self, last=True):

IN PART LinkedList  ADD ITEM pop:     def pop(self, last=True):

RUNINGPART:LinkedList  INPART:True
CODE LINE 84         '''

IDENT: 2
PART LENGTH LinkedList: 72
RUNINGPART:LinkedList  INPART:True
CODE LINE 85         pop key

IDENT: 2
PART LENGTH LinkedList: 73
RUNINGPART:LinkedList  INPART:True
CODE LINE 86         '''

IDENT: 2
PART LENGTH LinkedList: 74
RUNINGPART:LinkedList  INPART:True
CODE LINE 87         if not self:

IDENT: 2
PART LENGTH LinkedList: 75
RUNINGPART:LinkedList  INPART:True
CODE LINE 88             raise KeyError('set is empty')

IDENT: 3
PART LENGTH LinkedList: 76
RUNINGPART:LinkedList  INPART:True
CODE LINE 89         key = next(reversed(self)) if last else next(iter(self))

IDENT: 2
PART LENGTH LinkedList: 77
RUNINGPART:LinkedList  INPART:True
CODE LINE 90         self.discard(key)

IDENT: 2
PART LENGTH LinkedList: 78
RUNINGPART:LinkedList  INPART:True
CODE LINE 91         return key

IDENT: 2
PART LENGTH LinkedList: 79
RUNINGPART:LinkedList  INPART:True
BLANK LINE 16 

RUNINGPART:LinkedList  INPART:True
CODE LINE 92     def __repr__(self):

IN PART LinkedList  ADD ITEM __repr__:     def __repr__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 93         '''

IDENT: 2
PART LENGTH LinkedList: 81
RUNINGPART:LinkedList  INPART:True
CODE LINE 94         String Conversion representation of object LinkeList repr()

IDENT: 2
PART LENGTH LinkedList: 82
RUNINGPART:LinkedList  INPART:True
CODE LINE 95         '''

IDENT: 2
PART LENGTH LinkedList: 83
RUNINGPART:LinkedList  INPART:True
CODE LINE 96         if not self:

IDENT: 2
PART LENGTH LinkedList: 84
RUNINGPART:LinkedList  INPART:True
CODE LINE 97             return '%s()' % (self.__class__.__name__,)

IDENT: 3
PART LENGTH LinkedList: 85
RUNINGPART:LinkedList  INPART:True
CODE LINE 98         return '%s(%r)' % (self.__class__.__name__, list(self))

IDENT: 2
PART LENGTH LinkedList: 86
RUNINGPART:LinkedList  INPART:True
BLANK LINE 17 

RUNINGPART:LinkedList  INPART:True
CODE LINE 99     def __eq__(self, other):

IN PART LinkedList  ADD ITEM __eq__:     def __eq__(self, other):

RUNINGPART:LinkedList  INPART:True
CODE LINE 100         '''

IDENT: 2
PART LENGTH LinkedList: 88
RUNINGPART:LinkedList  INPART:True
CODE LINE 101         Method for de Equal comparation.

IDENT: 2
PART LENGTH LinkedList: 89
RUNINGPART:LinkedList  INPART:True
CODE LINE 102         '''

IDENT: 2
PART LENGTH LinkedList: 90
RUNINGPART:LinkedList  INPART:True
CODE LINE 103         if isinstance(other, LinkedList):

IDENT: 2
PART LENGTH LinkedList: 91
RUNINGPART:LinkedList  INPART:True
CODE LINE 104             return len(self) == len(other) and list(self) == list(other)

IDENT: 3
PART LENGTH LinkedList: 92
RUNINGPART:LinkedList  INPART:True
CODE LINE 105         return not self.isdisjoint(other)

IDENT: 2
PART LENGTH LinkedList: 93
===TOTAL===
 CODE LINES:105
 PARTS:{'Link': <__main__.Item object at 0x7f916ae7d290>, 'LinkedList': <__main__.Item object at 0x7f916ae7d190>} 
 TOTAL LINES:142 
 BLANK LINE:17 
 COMMEN_LINES:20
Fin De Archivado
START COUNTING
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/test_mean_std.py
RUNINGPART:False  INPART:False
CODE LINE 1 import unittest

RUNINGPART:False  INPART:False
CODE LINE 2 from mean_std import Mean, Std, LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
CODE LINE 3 class TestAssignament(unittest.TestCase):

ADDED PART TestAssignament class TestAssignament(unittest.TestCase):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 4     def test_estimate_proxy_size(self):

IN PART TestAssignament  ADD ITEM test_estimate_proxy_size:     def test_estimate_proxy_size(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 5         a=LinkedList([160,591,114,229,230,270,128,1657,624,1503])

IDENT: 2
PART LENGTH TestAssignament: 3
RUNINGPART:TestAssignament  INPART:True
CODE LINE 6         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 4
RUNINGPART:TestAssignament  INPART:True
CODE LINE 7         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 5
RUNINGPART:TestAssignament  INPART:True
CODE LINE 8         print a

IDENT: 2
PART LENGTH TestAssignament: 6
RUNINGPART:TestAssignament  INPART:True
CODE LINE 9         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 7
RUNINGPART:TestAssignament  INPART:True
CODE LINE 10         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 8
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 2     

RUNINGPART:TestAssignament  INPART:True
CODE LINE 11     def test_development_hours(self):

IN PART TestAssignament  ADD ITEM test_development_hours:     def test_development_hours(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 12         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 10
RUNINGPART:TestAssignament  INPART:True
CODE LINE 13         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 11
RUNINGPART:TestAssignament  INPART:True
CODE LINE 14         a=LinkedList([15.0,69.9,6.5,22.4,28.4,65.9,19.4,198.7,38.8,138.2])

IDENT: 2
PART LENGTH TestAssignament: 12
RUNINGPART:TestAssignament  INPART:True
CODE LINE 15         print a

IDENT: 2
PART LENGTH TestAssignament: 13
RUNINGPART:TestAssignament  INPART:True
CODE LINE 16         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 14
RUNINGPART:TestAssignament  INPART:True
CODE LINE 17         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 15
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 3 

RUNINGPART:TestAssignament  INPART:True
CODE LINE 18 if __name__ == '__main__':

IDENT: 0
RUNINGPART:TestAssignament  INPART:False
CODE LINE 19     unittest.main()
===TOTAL===
 CODE LINES:19
 PARTS:{'TestAssignament': <__main__.Item object at 0x7fb4b2ed1ed0>} 
 TOTAL LINES:22 
 BLANK LINE:3 
 COMMEN_LINES:0
START COUNTING
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/test_mean_std.py
RUNINGPART:False  INPART:False
CODE LINE 1 import unittest

RUNINGPART:False  INPART:False
CODE LINE 2 from mean_std import Mean, Std, LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
CODE LINE 3 class TestAssignament(unittest.TestCase):

ADDED PART TestAssignament class TestAssignament(unittest.TestCase):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 4     def test_estimate_proxy_size(self):

IN PART TestAssignament  ADD ITEM test_estimate_proxy_size:     def test_estimate_proxy_size(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 5         a=LinkedList([160,591,114,229,230,270,128,1657,624,1503])

IDENT: 2
PART LENGTH TestAssignament: 3
RUNINGPART:TestAssignament  INPART:True
CODE LINE 6         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 4
RUNINGPART:TestAssignament  INPART:True
CODE LINE 7         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 5
RUNINGPART:TestAssignament  INPART:True
CODE LINE 8         print a

IDENT: 2
PART LENGTH TestAssignament: 6
RUNINGPART:TestAssignament  INPART:True
CODE LINE 9         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 7
RUNINGPART:TestAssignament  INPART:True
CODE LINE 10         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 8
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 2     

RUNINGPART:TestAssignament  INPART:True
CODE LINE 11     def test_development_hours(self):

IN PART TestAssignament  ADD ITEM test_development_hours:     def test_development_hours(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 12         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 10
RUNINGPART:TestAssignament  INPART:True
CODE LINE 13         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 11
RUNINGPART:TestAssignament  INPART:True
CODE LINE 14         a=LinkedList([15.0,69.9,6.5,22.4,28.4,65.9,19.4,198.7,38.8,138.2])

IDENT: 2
PART LENGTH TestAssignament: 12
RUNINGPART:TestAssignament  INPART:True
CODE LINE 15         print a

IDENT: 2
PART LENGTH TestAssignament: 13
RUNINGPART:TestAssignament  INPART:True
CODE LINE 16         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 14
RUNINGPART:TestAssignament  INPART:True
CODE LINE 17         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 15
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 3 

RUNINGPART:TestAssignament  INPART:True
CODE LINE 18 if __name__ == '__main__':

IDENT: 0
RUNINGPART:TestAssignament  INPART:False
CODE LINE 19     unittest.main()
===TOTAL===
 CODE LINES:19
 PARTS:{'TestAssignament': <__main__.Item object at 0x7f7a1b932ed0>} 
 TOTAL LINES:22 
 BLANK LINE:3 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/mean_std.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 68     log.info("START APP")

IDENT: 1
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 69     if options.file:

IDENT: 1
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 70         if options.std or options.mean:

IDENT: 2
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 71             dataset=read_file(options.file)

IDENT: 3
PART LENGTH main: 17
RUNINGPART:main  INPART:True
CODE LINE 72             if options.std:

IDENT: 3
PART LENGTH main: 18
RUNINGPART:main  INPART:True
CODE LINE 73                 Std(dataset)

IDENT: 4
PART LENGTH main: 19
RUNINGPART:main  INPART:True
CODE LINE 74             if options.mean:

IDENT: 3
PART LENGTH main: 20
RUNINGPART:main  INPART:True
CODE LINE 75                 Mean(dataset)

IDENT: 4
PART LENGTH main: 21
RUNINGPART:main  INPART:True
CODE LINE 76         else:

IDENT: 2
PART LENGTH main: 22
RUNINGPART:main  INPART:True
CODE LINE 77              parser.error("please set calculation,\n Please use -h for help")

IDENT: 3
PART LENGTH main: 23
RUNINGPART:main  INPART:True
CODE LINE 78     else:

IDENT: 1
PART LENGTH main: 24
RUNINGPART:main  INPART:True
CODE LINE 79         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

IDENT: 2
PART LENGTH main: 25
RUNINGPART:main  INPART:True
BLANK LINE 11 

RUNINGPART:main  INPART:True
CODE LINE 80 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 81     main()

===TOTAL===
 CODE LINES:81
 PARTS:{'Std': <__main__.Item object at 0x7f7a1b93b250>, 'main': <__main__.Item object at 0x7f7a1b93b310>, 'read_file': <__main__.Item object at 0x7f7a1b93b290>, 'Mean': <__main__.Item object at 0x7f7a1b93b190>} 
 TOTAL LINES:114 
 BLANK LINE:11 
 COMMEN_LINES:22
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/__init__.py
===TOTAL===
 CODE LINES:0
 PARTS:{} 
 TOTAL LINES:0 
 BLANK LINE:0 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/LinkedList.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import collections

RUNINGPART:False  INPART:False
CODE LINE 7 from weakref import proxy

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 8 class Link(object):

ADDED PART Link class Link(object):

RUNINGPART:Link  INPART:True
CODE LINE 9     '''

IDENT: 1
PART LENGTH Link: 2
RUNINGPART:Link  INPART:True
CODE LINE 10     The proper use of __slots__ is to save space in objects.

IDENT: 1
PART LENGTH Link: 3
RUNINGPART:Link  INPART:True
CODE LINE 11     '''

IDENT: 1
PART LENGTH Link: 4
RUNINGPART:Link  INPART:True
CODE LINE 12     __slots__ = 'prev', 'next', 'key', '__weakref__'

IDENT: 1
PART LENGTH Link: 5
RUNINGPART:Link  INPART:True
BLANK LINE 5 

RUNINGPART:Link  INPART:True
CODE LINE 13 class LinkedList(collections.MutableSet):

ADDED PART LinkedList class LinkedList(collections.MutableSet):

RUNINGPART:LinkedList  INPART:True
CODE LINE 14     '''

IDENT: 1
PART LENGTH LinkedList: 2
RUNINGPART:LinkedList  INPART:True
CODE LINE 15     LinkedLink

IDENT: 1
PART LENGTH LinkedList: 3
RUNINGPART:LinkedList  INPART:True
CODE LINE 16     Set the remembers the order elements were added

IDENT: 1
PART LENGTH LinkedList: 4
RUNINGPART:LinkedList  INPART:True
CODE LINE 17     '''

IDENT: 1
PART LENGTH LinkedList: 5
RUNINGPART:LinkedList  INPART:True
BLANK LINE 6 

RUNINGPART:LinkedList  INPART:True
CODE LINE 18     def __init__(self, iterable=None):

IN PART LinkedList  ADD ITEM __init__:     def __init__(self, iterable=None):

RUNINGPART:LinkedList  INPART:True
CODE LINE 19         '''

IDENT: 2
PART LENGTH LinkedList: 7
RUNINGPART:LinkedList  INPART:True
CODE LINE 20         Init

IDENT: 2
PART LENGTH LinkedList: 8
RUNINGPART:LinkedList  INPART:True
CODE LINE 21         '''

IDENT: 2
PART LENGTH LinkedList: 9
RUNINGPART:LinkedList  INPART:True
CODE LINE 22         self.__root = root = Link()         

IDENT: 2
PART LENGTH LinkedList: 10
RUNINGPART:LinkedList  INPART:True
CODE LINE 23         root.prev = root.next = root

IDENT: 2
PART LENGTH LinkedList: 11
RUNINGPART:LinkedList  INPART:True
CODE LINE 24         self.__map = {}                     # key --> link

IDENT: 7
PART LENGTH LinkedList: 12
RUNINGPART:LinkedList  INPART:True
CODE LINE 25         if iterable is not None:

IDENT: 2
PART LENGTH LinkedList: 13
RUNINGPART:LinkedList  INPART:True
CODE LINE 26             self |= iterable

IDENT: 3
PART LENGTH LinkedList: 14
RUNINGPART:LinkedList  INPART:True
BLANK LINE 7 

RUNINGPART:LinkedList  INPART:True
CODE LINE 27     def __len__(self):

IN PART LinkedList  ADD ITEM __len__:     def __len__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 28         '''

IDENT: 2
PART LENGTH LinkedList: 16
RUNINGPART:LinkedList  INPART:True
CODE LINE 29         Length for the LinkedList

IDENT: 2
PART LENGTH LinkedList: 17
RUNINGPART:LinkedList  INPART:True
CODE LINE 30         '''

IDENT: 2
PART LENGTH LinkedList: 18
RUNINGPART:LinkedList  INPART:True
CODE LINE 31         return len(self.__map)

IDENT: 2
PART LENGTH LinkedList: 19
RUNINGPART:LinkedList  INPART:True
BLANK LINE 8 

RUNINGPART:LinkedList  INPART:True
CODE LINE 32     def __contains__(self, key):

IN PART LinkedList  ADD ITEM __contains__:     def __contains__(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 33         '''

IDENT: 2
PART LENGTH LinkedList: 21
RUNINGPART:LinkedList  INPART:True
CODE LINE 34         Return Content of LinkedList

IDENT: 2
PART LENGTH LinkedList: 22
RUNINGPART:LinkedList  INPART:True
CODE LINE 35         '''

IDENT: 2
PART LENGTH LinkedList: 23
RUNINGPART:LinkedList  INPART:True
CODE LINE 36         return key in self.__map

IDENT: 2
PART LENGTH LinkedList: 24
RUNINGPART:LinkedList  INPART:True
BLANK LINE 9 

RUNINGPART:LinkedList  INPART:True
CODE LINE 37     def add(self, key):

IN PART LinkedList  ADD ITEM add:     def add(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 38         '''

IDENT: 2
PART LENGTH LinkedList: 26
RUNINGPART:LinkedList  INPART:True
CODE LINE 39         Add Node

IDENT: 2
PART LENGTH LinkedList: 27
RUNINGPART:LinkedList  INPART:True
CODE LINE 40         Store new key in a new link at the end of the linked list

IDENT: 2
PART LENGTH LinkedList: 28
RUNINGPART:LinkedList  INPART:True
CODE LINE 41         '''

IDENT: 2
PART LENGTH LinkedList: 29
RUNINGPART:LinkedList  INPART:True
CODE LINE 42         if key not in self.__map:

IDENT: 2
PART LENGTH LinkedList: 30
RUNINGPART:LinkedList  INPART:True
CODE LINE 43             '''

IDENT: 3
PART LENGTH LinkedList: 31
RUNINGPART:LinkedList  INPART:True
CODE LINE 44             Not Element Eq in the list

IDENT: 3
PART LENGTH LinkedList: 32
RUNINGPART:LinkedList  INPART:True
CODE LINE 45             '''

IDENT: 3
PART LENGTH LinkedList: 33
RUNINGPART:LinkedList  INPART:True
CODE LINE 46             self.__map[key] = link = Link()            

IDENT: 3
PART LENGTH LinkedList: 34
RUNINGPART:LinkedList  INPART:True
CODE LINE 47             root = self.__root

IDENT: 3
PART LENGTH LinkedList: 35
RUNINGPART:LinkedList  INPART:True
CODE LINE 48             last = root.prev

IDENT: 3
PART LENGTH LinkedList: 36
RUNINGPART:LinkedList  INPART:True
CODE LINE 49             link.prev, link.next, link.key = last, root, key

IDENT: 3
PART LENGTH LinkedList: 37
RUNINGPART:LinkedList  INPART:True
CODE LINE 50             last.next = root.prev = proxy(link)

IDENT: 3
PART LENGTH LinkedList: 38
RUNINGPART:LinkedList  INPART:True
BLANK LINE 10     

RUNINGPART:LinkedList  INPART:True
CODE LINE 51     def head(self):

IN PART LinkedList  ADD ITEM head:     def head(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 52         '''

IDENT: 2
PART LENGTH LinkedList: 40
RUNINGPART:LinkedList  INPART:True
CODE LINE 53         Return Head

IDENT: 2
PART LENGTH LinkedList: 41
RUNINGPART:LinkedList  INPART:True
CODE LINE 54         '''

IDENT: 2
PART LENGTH LinkedList: 42
RUNINGPART:LinkedList  INPART:True
CODE LINE 55         return list(self)[0],list(self)[-1] 

IDENT: 2
PART LENGTH LinkedList: 43
RUNINGPART:LinkedList  INPART:True
BLANK LINE 11         

RUNINGPART:LinkedList  INPART:True
BLANK LINE 12 

RUNINGPART:LinkedList  INPART:True
CODE LINE 56     def discard(self, key):

IN PART LinkedList  ADD ITEM discard:     def discard(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 57         '''

IDENT: 2
PART LENGTH LinkedList: 45
RUNINGPART:LinkedList  INPART:True
CODE LINE 58         Remove an existing item using self.__map to find the link which is

IDENT: 2
PART LENGTH LinkedList: 46
RUNINGPART:LinkedList  INPART:True
CODE LINE 59         then removed by updating the links in the predecessor and successors.

IDENT: 2
PART LENGTH LinkedList: 47
RUNINGPART:LinkedList  INPART:True
CODE LINE 60         '''

IDENT: 2
PART LENGTH LinkedList: 48
RUNINGPART:LinkedList  INPART:True
CODE LINE 61         if key in self.__map:

IDENT: 2
PART LENGTH LinkedList: 49
RUNINGPART:LinkedList  INPART:True
CODE LINE 62             link = self.__map.pop(key)

IDENT: 3
PART LENGTH LinkedList: 50
RUNINGPART:LinkedList  INPART:True
CODE LINE 63             link.prev.next = link.next

IDENT: 3
PART LENGTH LinkedList: 51
RUNINGPART:LinkedList  INPART:True
CODE LINE 64             link.next.prev = link.prev

IDENT: 3
PART LENGTH LinkedList: 52
RUNINGPART:LinkedList  INPART:True
BLANK LINE 13 

RUNINGPART:LinkedList  INPART:True
CODE LINE 65     def __iter__(self):

IN PART LinkedList  ADD ITEM __iter__:     def __iter__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 66         '''

IDENT: 2
PART LENGTH LinkedList: 54
RUNINGPART:LinkedList  INPART:True
CODE LINE 67         iteration for the Next Method

IDENT: 2
PART LENGTH LinkedList: 55
RUNINGPART:LinkedList  INPART:True
CODE LINE 68         '''

IDENT: 2
PART LENGTH LinkedList: 56
RUNINGPART:LinkedList  INPART:True
CODE LINE 69         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 57
RUNINGPART:LinkedList  INPART:True
CODE LINE 70         curr = root.next

IDENT: 2
PART LENGTH LinkedList: 58
RUNINGPART:LinkedList  INPART:True
CODE LINE 71         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 59
RUNINGPART:LinkedList  INPART:True
CODE LINE 72             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 60
RUNINGPART:LinkedList  INPART:True
CODE LINE 73             curr = curr.next

IDENT: 3
PART LENGTH LinkedList: 61
RUNINGPART:LinkedList  INPART:True
BLANK LINE 14 

RUNINGPART:LinkedList  INPART:True
CODE LINE 74     def __reversed__(self):

IN PART LinkedList  ADD ITEM __reversed__:     def __reversed__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 75         '''

IDENT: 2
PART LENGTH LinkedList: 63
RUNINGPART:LinkedList  INPART:True
CODE LINE 76         iteration in reverse mode Method

IDENT: 2
PART LENGTH LinkedList: 64
RUNINGPART:LinkedList  INPART:True
CODE LINE 77         '''

IDENT: 2
PART LENGTH LinkedList: 65
RUNINGPART:LinkedList  INPART:True
CODE LINE 78         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 66
RUNINGPART:LinkedList  INPART:True
CODE LINE 79         curr = root.prev

IDENT: 2
PART LENGTH LinkedList: 67
RUNINGPART:LinkedList  INPART:True
CODE LINE 80         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 68
RUNINGPART:LinkedList  INPART:True
CODE LINE 81             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 69
RUNINGPART:LinkedList  INPART:True
CODE LINE 82             curr = curr.prev

IDENT: 3
PART LENGTH LinkedList: 70
RUNINGPART:LinkedList  INPART:True
BLANK LINE 15 

RUNINGPART:LinkedList  INPART:True
CODE LINE 83     def pop(self, last=True):

IN PART LinkedList  ADD ITEM pop:     def pop(self, last=True):

RUNINGPART:LinkedList  INPART:True
CODE LINE 84         '''

IDENT: 2
PART LENGTH LinkedList: 72
RUNINGPART:LinkedList  INPART:True
CODE LINE 85         pop key

IDENT: 2
PART LENGTH LinkedList: 73
RUNINGPART:LinkedList  INPART:True
CODE LINE 86         '''

IDENT: 2
PART LENGTH LinkedList: 74
RUNINGPART:LinkedList  INPART:True
CODE LINE 87         if not self:

IDENT: 2
PART LENGTH LinkedList: 75
RUNINGPART:LinkedList  INPART:True
CODE LINE 88             raise KeyError('set is empty')

IDENT: 3
PART LENGTH LinkedList: 76
RUNINGPART:LinkedList  INPART:True
CODE LINE 89         key = next(reversed(self)) if last else next(iter(self))

IDENT: 2
PART LENGTH LinkedList: 77
RUNINGPART:LinkedList  INPART:True
CODE LINE 90         self.discard(key)

IDENT: 2
PART LENGTH LinkedList: 78
RUNINGPART:LinkedList  INPART:True
CODE LINE 91         return key

IDENT: 2
PART LENGTH LinkedList: 79
RUNINGPART:LinkedList  INPART:True
BLANK LINE 16 

RUNINGPART:LinkedList  INPART:True
CODE LINE 92     def __repr__(self):

IN PART LinkedList  ADD ITEM __repr__:     def __repr__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 93         '''

IDENT: 2
PART LENGTH LinkedList: 81
RUNINGPART:LinkedList  INPART:True
CODE LINE 94         String Conversion representation of object LinkeList repr()

IDENT: 2
PART LENGTH LinkedList: 82
RUNINGPART:LinkedList  INPART:True
CODE LINE 95         '''

IDENT: 2
PART LENGTH LinkedList: 83
RUNINGPART:LinkedList  INPART:True
CODE LINE 96         if not self:

IDENT: 2
PART LENGTH LinkedList: 84
RUNINGPART:LinkedList  INPART:True
CODE LINE 97             return '%s()' % (self.__class__.__name__,)

IDENT: 3
PART LENGTH LinkedList: 85
RUNINGPART:LinkedList  INPART:True
CODE LINE 98         return '%s(%r)' % (self.__class__.__name__, list(self))

IDENT: 2
PART LENGTH LinkedList: 86
RUNINGPART:LinkedList  INPART:True
BLANK LINE 17 

RUNINGPART:LinkedList  INPART:True
CODE LINE 99     def __eq__(self, other):

IN PART LinkedList  ADD ITEM __eq__:     def __eq__(self, other):

RUNINGPART:LinkedList  INPART:True
CODE LINE 100         '''

IDENT: 2
PART LENGTH LinkedList: 88
RUNINGPART:LinkedList  INPART:True
CODE LINE 101         Method for de Equal comparation.

IDENT: 2
PART LENGTH LinkedList: 89
RUNINGPART:LinkedList  INPART:True
CODE LINE 102         '''

IDENT: 2
PART LENGTH LinkedList: 90
RUNINGPART:LinkedList  INPART:True
CODE LINE 103         if isinstance(other, LinkedList):

IDENT: 2
PART LENGTH LinkedList: 91
RUNINGPART:LinkedList  INPART:True
CODE LINE 104             return len(self) == len(other) and list(self) == list(other)

IDENT: 3
PART LENGTH LinkedList: 92
RUNINGPART:LinkedList  INPART:True
CODE LINE 105         return not self.isdisjoint(other)

IDENT: 2
PART LENGTH LinkedList: 93
===TOTAL===
 CODE LINES:105
 PARTS:{'Link': <__main__.Item object at 0x7f7a1b93b290>, 'LinkedList': <__main__.Item object at 0x7f7a1b93b190>} 
 TOTAL LINES:142 
 BLANK LINE:17 
 COMMEN_LINES:20
Fin De Archivado
START COUNTING
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/test_mean_std.py
RUNINGPART:False  INPART:False
CODE LINE 1 import unittest

RUNINGPART:False  INPART:False
CODE LINE 2 from mean_std import Mean, Std, LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
CODE LINE 3 class TestAssignament(unittest.TestCase):

ADDED PART TestAssignament class TestAssignament(unittest.TestCase):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 4     def test_estimate_proxy_size(self):

IN PART TestAssignament  ADD ITEM test_estimate_proxy_size:     def test_estimate_proxy_size(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 5         a=LinkedList([160,591,114,229,230,270,128,1657,624,1503])

IDENT: 2
PART LENGTH TestAssignament: 3
RUNINGPART:TestAssignament  INPART:True
CODE LINE 6         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 4
RUNINGPART:TestAssignament  INPART:True
CODE LINE 7         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 5
RUNINGPART:TestAssignament  INPART:True
CODE LINE 8         print a

IDENT: 2
PART LENGTH TestAssignament: 6
RUNINGPART:TestAssignament  INPART:True
CODE LINE 9         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 7
RUNINGPART:TestAssignament  INPART:True
CODE LINE 10         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 8
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 2     

RUNINGPART:TestAssignament  INPART:True
CODE LINE 11     def test_development_hours(self):

IN PART TestAssignament  ADD ITEM test_development_hours:     def test_development_hours(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 12         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 10
RUNINGPART:TestAssignament  INPART:True
CODE LINE 13         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 11
RUNINGPART:TestAssignament  INPART:True
CODE LINE 14         a=LinkedList([15.0,69.9,6.5,22.4,28.4,65.9,19.4,198.7,38.8,138.2])

IDENT: 2
PART LENGTH TestAssignament: 12
RUNINGPART:TestAssignament  INPART:True
CODE LINE 15         print a

IDENT: 2
PART LENGTH TestAssignament: 13
RUNINGPART:TestAssignament  INPART:True
CODE LINE 16         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 14
RUNINGPART:TestAssignament  INPART:True
CODE LINE 17         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 15
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 3 

RUNINGPART:TestAssignament  INPART:True
CODE LINE 18 if __name__ == '__main__':

IDENT: 0
RUNINGPART:TestAssignament  INPART:False
CODE LINE 19     unittest.main()
===TOTAL===
 CODE LINES:19
 PARTS:{'TestAssignament': <__main__.Item object at 0x7f594c4ebed0>} 
 TOTAL LINES:22 
 BLANK LINE:3 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/mean_std.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 68     log.info("START APP")

IDENT: 1
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 69     if options.file:

IDENT: 1
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 70         if options.std or options.mean:

IDENT: 2
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 71             dataset=read_file(options.file)

IDENT: 3
PART LENGTH main: 17
RUNINGPART:main  INPART:True
CODE LINE 72             if options.std:

IDENT: 3
PART LENGTH main: 18
RUNINGPART:main  INPART:True
CODE LINE 73                 Std(dataset)

IDENT: 4
PART LENGTH main: 19
RUNINGPART:main  INPART:True
CODE LINE 74             if options.mean:

IDENT: 3
PART LENGTH main: 20
RUNINGPART:main  INPART:True
CODE LINE 75                 Mean(dataset)

IDENT: 4
PART LENGTH main: 21
RUNINGPART:main  INPART:True
CODE LINE 76         else:

IDENT: 2
PART LENGTH main: 22
RUNINGPART:main  INPART:True
CODE LINE 77              parser.error("please set calculation,\n Please use -h for help")

IDENT: 3
PART LENGTH main: 23
RUNINGPART:main  INPART:True
CODE LINE 78     else:

IDENT: 1
PART LENGTH main: 24
RUNINGPART:main  INPART:True
CODE LINE 79         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

IDENT: 2
PART LENGTH main: 25
RUNINGPART:main  INPART:True
BLANK LINE 11 

RUNINGPART:main  INPART:True
CODE LINE 80 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 81     main()

===TOTAL===
 CODE LINES:81
 PARTS:{'Std': <__main__.Item object at 0x7f594c4f4250>, 'main': <__main__.Item object at 0x7f594c4f4310>, 'read_file': <__main__.Item object at 0x7f594c4f4290>, 'Mean': <__main__.Item object at 0x7f594c4f4190>} 
 TOTAL LINES:114 
 BLANK LINE:11 
 COMMEN_LINES:22
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/__init__.py
===TOTAL===
 CODE LINES:0
 PARTS:{} 
 TOTAL LINES:0 
 BLANK LINE:0 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/LinkedList.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import collections

RUNINGPART:False  INPART:False
CODE LINE 7 from weakref import proxy

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 8 class Link(object):

ADDED PART Link class Link(object):

RUNINGPART:Link  INPART:True
CODE LINE 9     '''

IDENT: 1
PART LENGTH Link: 2
RUNINGPART:Link  INPART:True
CODE LINE 10     The proper use of __slots__ is to save space in objects.

IDENT: 1
PART LENGTH Link: 3
RUNINGPART:Link  INPART:True
CODE LINE 11     '''

IDENT: 1
PART LENGTH Link: 4
RUNINGPART:Link  INPART:True
CODE LINE 12     __slots__ = 'prev', 'next', 'key', '__weakref__'

IDENT: 1
PART LENGTH Link: 5
RUNINGPART:Link  INPART:True
BLANK LINE 5 

RUNINGPART:Link  INPART:True
CODE LINE 13 class LinkedList(collections.MutableSet):

ADDED PART LinkedList class LinkedList(collections.MutableSet):

RUNINGPART:LinkedList  INPART:True
CODE LINE 14     '''

IDENT: 1
PART LENGTH LinkedList: 2
RUNINGPART:LinkedList  INPART:True
CODE LINE 15     LinkedLink

IDENT: 1
PART LENGTH LinkedList: 3
RUNINGPART:LinkedList  INPART:True
CODE LINE 16     Set the remembers the order elements were added

IDENT: 1
PART LENGTH LinkedList: 4
RUNINGPART:LinkedList  INPART:True
CODE LINE 17     '''

IDENT: 1
PART LENGTH LinkedList: 5
RUNINGPART:LinkedList  INPART:True
BLANK LINE 6 

RUNINGPART:LinkedList  INPART:True
CODE LINE 18     def __init__(self, iterable=None):

IN PART LinkedList  ADD ITEM __init__:     def __init__(self, iterable=None):

RUNINGPART:LinkedList  INPART:True
CODE LINE 19         '''

IDENT: 2
PART LENGTH LinkedList: 7
RUNINGPART:LinkedList  INPART:True
CODE LINE 20         Init

IDENT: 2
PART LENGTH LinkedList: 8
RUNINGPART:LinkedList  INPART:True
CODE LINE 21         '''

IDENT: 2
PART LENGTH LinkedList: 9
RUNINGPART:LinkedList  INPART:True
CODE LINE 22         self.__root = root = Link()         

IDENT: 2
PART LENGTH LinkedList: 10
RUNINGPART:LinkedList  INPART:True
CODE LINE 23         root.prev = root.next = root

IDENT: 2
PART LENGTH LinkedList: 11
RUNINGPART:LinkedList  INPART:True
CODE LINE 24         self.__map = {}                     # key --> link

IDENT: 7
PART LENGTH LinkedList: 12
RUNINGPART:LinkedList  INPART:True
CODE LINE 25         if iterable is not None:

IDENT: 2
PART LENGTH LinkedList: 13
RUNINGPART:LinkedList  INPART:True
CODE LINE 26             self |= iterable

IDENT: 3
PART LENGTH LinkedList: 14
RUNINGPART:LinkedList  INPART:True
BLANK LINE 7 

RUNINGPART:LinkedList  INPART:True
CODE LINE 27     def __len__(self):

IN PART LinkedList  ADD ITEM __len__:     def __len__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 28         '''

IDENT: 2
PART LENGTH LinkedList: 16
RUNINGPART:LinkedList  INPART:True
CODE LINE 29         Length for the LinkedList

IDENT: 2
PART LENGTH LinkedList: 17
RUNINGPART:LinkedList  INPART:True
CODE LINE 30         '''

IDENT: 2
PART LENGTH LinkedList: 18
RUNINGPART:LinkedList  INPART:True
CODE LINE 31         return len(self.__map)

IDENT: 2
PART LENGTH LinkedList: 19
RUNINGPART:LinkedList  INPART:True
BLANK LINE 8 

RUNINGPART:LinkedList  INPART:True
CODE LINE 32     def __contains__(self, key):

IN PART LinkedList  ADD ITEM __contains__:     def __contains__(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 33         '''

IDENT: 2
PART LENGTH LinkedList: 21
RUNINGPART:LinkedList  INPART:True
CODE LINE 34         Return Content of LinkedList

IDENT: 2
PART LENGTH LinkedList: 22
RUNINGPART:LinkedList  INPART:True
CODE LINE 35         '''

IDENT: 2
PART LENGTH LinkedList: 23
RUNINGPART:LinkedList  INPART:True
CODE LINE 36         return key in self.__map

IDENT: 2
PART LENGTH LinkedList: 24
RUNINGPART:LinkedList  INPART:True
BLANK LINE 9 

RUNINGPART:LinkedList  INPART:True
CODE LINE 37     def add(self, key):

IN PART LinkedList  ADD ITEM add:     def add(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 38         '''

IDENT: 2
PART LENGTH LinkedList: 26
RUNINGPART:LinkedList  INPART:True
CODE LINE 39         Add Node

IDENT: 2
PART LENGTH LinkedList: 27
RUNINGPART:LinkedList  INPART:True
CODE LINE 40         Store new key in a new link at the end of the linked list

IDENT: 2
PART LENGTH LinkedList: 28
RUNINGPART:LinkedList  INPART:True
CODE LINE 41         '''

IDENT: 2
PART LENGTH LinkedList: 29
RUNINGPART:LinkedList  INPART:True
CODE LINE 42         if key not in self.__map:

IDENT: 2
PART LENGTH LinkedList: 30
RUNINGPART:LinkedList  INPART:True
CODE LINE 43             '''

IDENT: 3
PART LENGTH LinkedList: 31
RUNINGPART:LinkedList  INPART:True
CODE LINE 44             Not Element Eq in the list

IDENT: 3
PART LENGTH LinkedList: 32
RUNINGPART:LinkedList  INPART:True
CODE LINE 45             '''

IDENT: 3
PART LENGTH LinkedList: 33
RUNINGPART:LinkedList  INPART:True
CODE LINE 46             self.__map[key] = link = Link()            

IDENT: 3
PART LENGTH LinkedList: 34
RUNINGPART:LinkedList  INPART:True
CODE LINE 47             root = self.__root

IDENT: 3
PART LENGTH LinkedList: 35
RUNINGPART:LinkedList  INPART:True
CODE LINE 48             last = root.prev

IDENT: 3
PART LENGTH LinkedList: 36
RUNINGPART:LinkedList  INPART:True
CODE LINE 49             link.prev, link.next, link.key = last, root, key

IDENT: 3
PART LENGTH LinkedList: 37
RUNINGPART:LinkedList  INPART:True
CODE LINE 50             last.next = root.prev = proxy(link)

IDENT: 3
PART LENGTH LinkedList: 38
RUNINGPART:LinkedList  INPART:True
BLANK LINE 10     

RUNINGPART:LinkedList  INPART:True
CODE LINE 51     def head(self):

IN PART LinkedList  ADD ITEM head:     def head(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 52         '''

IDENT: 2
PART LENGTH LinkedList: 40
RUNINGPART:LinkedList  INPART:True
CODE LINE 53         Return Head

IDENT: 2
PART LENGTH LinkedList: 41
RUNINGPART:LinkedList  INPART:True
CODE LINE 54         '''

IDENT: 2
PART LENGTH LinkedList: 42
RUNINGPART:LinkedList  INPART:True
CODE LINE 55         return list(self)[0],list(self)[-1] 

IDENT: 2
PART LENGTH LinkedList: 43
RUNINGPART:LinkedList  INPART:True
BLANK LINE 11         

RUNINGPART:LinkedList  INPART:True
BLANK LINE 12 

RUNINGPART:LinkedList  INPART:True
CODE LINE 56     def discard(self, key):

IN PART LinkedList  ADD ITEM discard:     def discard(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 57         '''

IDENT: 2
PART LENGTH LinkedList: 45
RUNINGPART:LinkedList  INPART:True
CODE LINE 58         Remove an existing item using self.__map to find the link which is

IDENT: 2
PART LENGTH LinkedList: 46
RUNINGPART:LinkedList  INPART:True
CODE LINE 59         then removed by updating the links in the predecessor and successors.

IDENT: 2
PART LENGTH LinkedList: 47
RUNINGPART:LinkedList  INPART:True
CODE LINE 60         '''

IDENT: 2
PART LENGTH LinkedList: 48
RUNINGPART:LinkedList  INPART:True
CODE LINE 61         if key in self.__map:

IDENT: 2
PART LENGTH LinkedList: 49
RUNINGPART:LinkedList  INPART:True
CODE LINE 62             link = self.__map.pop(key)

IDENT: 3
PART LENGTH LinkedList: 50
RUNINGPART:LinkedList  INPART:True
CODE LINE 63             link.prev.next = link.next

IDENT: 3
PART LENGTH LinkedList: 51
RUNINGPART:LinkedList  INPART:True
CODE LINE 64             link.next.prev = link.prev

IDENT: 3
PART LENGTH LinkedList: 52
RUNINGPART:LinkedList  INPART:True
BLANK LINE 13 

RUNINGPART:LinkedList  INPART:True
CODE LINE 65     def __iter__(self):

IN PART LinkedList  ADD ITEM __iter__:     def __iter__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 66         '''

IDENT: 2
PART LENGTH LinkedList: 54
RUNINGPART:LinkedList  INPART:True
CODE LINE 67         iteration for the Next Method

IDENT: 2
PART LENGTH LinkedList: 55
RUNINGPART:LinkedList  INPART:True
CODE LINE 68         '''

IDENT: 2
PART LENGTH LinkedList: 56
RUNINGPART:LinkedList  INPART:True
CODE LINE 69         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 57
RUNINGPART:LinkedList  INPART:True
CODE LINE 70         curr = root.next

IDENT: 2
PART LENGTH LinkedList: 58
RUNINGPART:LinkedList  INPART:True
CODE LINE 71         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 59
RUNINGPART:LinkedList  INPART:True
CODE LINE 72             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 60
RUNINGPART:LinkedList  INPART:True
CODE LINE 73             curr = curr.next

IDENT: 3
PART LENGTH LinkedList: 61
RUNINGPART:LinkedList  INPART:True
BLANK LINE 14 

RUNINGPART:LinkedList  INPART:True
CODE LINE 74     def __reversed__(self):

IN PART LinkedList  ADD ITEM __reversed__:     def __reversed__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 75         '''

IDENT: 2
PART LENGTH LinkedList: 63
RUNINGPART:LinkedList  INPART:True
CODE LINE 76         iteration in reverse mode Method

IDENT: 2
PART LENGTH LinkedList: 64
RUNINGPART:LinkedList  INPART:True
CODE LINE 77         '''

IDENT: 2
PART LENGTH LinkedList: 65
RUNINGPART:LinkedList  INPART:True
CODE LINE 78         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 66
RUNINGPART:LinkedList  INPART:True
CODE LINE 79         curr = root.prev

IDENT: 2
PART LENGTH LinkedList: 67
RUNINGPART:LinkedList  INPART:True
CODE LINE 80         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 68
RUNINGPART:LinkedList  INPART:True
CODE LINE 81             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 69
RUNINGPART:LinkedList  INPART:True
CODE LINE 82             curr = curr.prev

IDENT: 3
PART LENGTH LinkedList: 70
RUNINGPART:LinkedList  INPART:True
BLANK LINE 15 

RUNINGPART:LinkedList  INPART:True
CODE LINE 83     def pop(self, last=True):

IN PART LinkedList  ADD ITEM pop:     def pop(self, last=True):

RUNINGPART:LinkedList  INPART:True
CODE LINE 84         '''

IDENT: 2
PART LENGTH LinkedList: 72
RUNINGPART:LinkedList  INPART:True
CODE LINE 85         pop key

IDENT: 2
PART LENGTH LinkedList: 73
RUNINGPART:LinkedList  INPART:True
CODE LINE 86         '''

IDENT: 2
PART LENGTH LinkedList: 74
RUNINGPART:LinkedList  INPART:True
CODE LINE 87         if not self:

IDENT: 2
PART LENGTH LinkedList: 75
RUNINGPART:LinkedList  INPART:True
CODE LINE 88             raise KeyError('set is empty')

IDENT: 3
PART LENGTH LinkedList: 76
RUNINGPART:LinkedList  INPART:True
CODE LINE 89         key = next(reversed(self)) if last else next(iter(self))

IDENT: 2
PART LENGTH LinkedList: 77
RUNINGPART:LinkedList  INPART:True
CODE LINE 90         self.discard(key)

IDENT: 2
PART LENGTH LinkedList: 78
RUNINGPART:LinkedList  INPART:True
CODE LINE 91         return key

IDENT: 2
PART LENGTH LinkedList: 79
RUNINGPART:LinkedList  INPART:True
BLANK LINE 16 

RUNINGPART:LinkedList  INPART:True
CODE LINE 92     def __repr__(self):

IN PART LinkedList  ADD ITEM __repr__:     def __repr__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 93         '''

IDENT: 2
PART LENGTH LinkedList: 81
RUNINGPART:LinkedList  INPART:True
CODE LINE 94         String Conversion representation of object LinkeList repr()

IDENT: 2
PART LENGTH LinkedList: 82
RUNINGPART:LinkedList  INPART:True
CODE LINE 95         '''

IDENT: 2
PART LENGTH LinkedList: 83
RUNINGPART:LinkedList  INPART:True
CODE LINE 96         if not self:

IDENT: 2
PART LENGTH LinkedList: 84
RUNINGPART:LinkedList  INPART:True
CODE LINE 97             return '%s()' % (self.__class__.__name__,)

IDENT: 3
PART LENGTH LinkedList: 85
RUNINGPART:LinkedList  INPART:True
CODE LINE 98         return '%s(%r)' % (self.__class__.__name__, list(self))

IDENT: 2
PART LENGTH LinkedList: 86
RUNINGPART:LinkedList  INPART:True
BLANK LINE 17 

RUNINGPART:LinkedList  INPART:True
CODE LINE 99     def __eq__(self, other):

IN PART LinkedList  ADD ITEM __eq__:     def __eq__(self, other):

RUNINGPART:LinkedList  INPART:True
CODE LINE 100         '''

IDENT: 2
PART LENGTH LinkedList: 88
RUNINGPART:LinkedList  INPART:True
CODE LINE 101         Method for de Equal comparation.

IDENT: 2
PART LENGTH LinkedList: 89
RUNINGPART:LinkedList  INPART:True
CODE LINE 102         '''

IDENT: 2
PART LENGTH LinkedList: 90
RUNINGPART:LinkedList  INPART:True
CODE LINE 103         if isinstance(other, LinkedList):

IDENT: 2
PART LENGTH LinkedList: 91
RUNINGPART:LinkedList  INPART:True
CODE LINE 104             return len(self) == len(other) and list(self) == list(other)

IDENT: 3
PART LENGTH LinkedList: 92
RUNINGPART:LinkedList  INPART:True
CODE LINE 105         return not self.isdisjoint(other)

IDENT: 2
PART LENGTH LinkedList: 93
===TOTAL===
 CODE LINES:105
 PARTS:{'Link': <__main__.Item object at 0x7f594c4f4290>, 'LinkedList': <__main__.Item object at 0x7f594c4f4190>} 
 TOTAL LINES:142 
 BLANK LINE:17 
 COMMEN_LINES:20
Fin De Archivado
START COUNTING
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/test_mean_std.py
RUNINGPART:False  INPART:False
CODE LINE 1 import unittest

RUNINGPART:False  INPART:False
CODE LINE 2 from mean_std import Mean, Std, LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
CODE LINE 3 class TestAssignament(unittest.TestCase):

ADDED PART TestAssignament class TestAssignament(unittest.TestCase):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 4     def test_estimate_proxy_size(self):

IN PART TestAssignament  ADD ITEM test_estimate_proxy_size:     def test_estimate_proxy_size(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 5         a=LinkedList([160,591,114,229,230,270,128,1657,624,1503])

IDENT: 2
PART LENGTH TestAssignament: 3
RUNINGPART:TestAssignament  INPART:True
CODE LINE 6         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 4
RUNINGPART:TestAssignament  INPART:True
CODE LINE 7         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 5
RUNINGPART:TestAssignament  INPART:True
CODE LINE 8         print a

IDENT: 2
PART LENGTH TestAssignament: 6
RUNINGPART:TestAssignament  INPART:True
CODE LINE 9         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 7
RUNINGPART:TestAssignament  INPART:True
CODE LINE 10         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 8
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 2     

RUNINGPART:TestAssignament  INPART:True
CODE LINE 11     def test_development_hours(self):

IN PART TestAssignament  ADD ITEM test_development_hours:     def test_development_hours(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 12         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 10
RUNINGPART:TestAssignament  INPART:True
CODE LINE 13         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 11
RUNINGPART:TestAssignament  INPART:True
CODE LINE 14         a=LinkedList([15.0,69.9,6.5,22.4,28.4,65.9,19.4,198.7,38.8,138.2])

IDENT: 2
PART LENGTH TestAssignament: 12
RUNINGPART:TestAssignament  INPART:True
CODE LINE 15         print a

IDENT: 2
PART LENGTH TestAssignament: 13
RUNINGPART:TestAssignament  INPART:True
CODE LINE 16         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 14
RUNINGPART:TestAssignament  INPART:True
CODE LINE 17         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 15
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 3 

RUNINGPART:TestAssignament  INPART:True
CODE LINE 18 if __name__ == '__main__':

IDENT: 0
RUNINGPART:TestAssignament  INPART:False
CODE LINE 19     unittest.main()
===TOTAL===
 CODE LINES:19
 PARTS:{'TestAssignament': <__main__.Item object at 0x7fad2c788ed0>} 
 TOTAL LINES:22 
 BLANK LINE:3 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/mean_std.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 68     log.info("START APP")

IDENT: 1
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 69     if options.file:

IDENT: 1
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 70         if options.std or options.mean:

IDENT: 2
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 71             dataset=read_file(options.file)

IDENT: 3
PART LENGTH main: 17
RUNINGPART:main  INPART:True
CODE LINE 72             if options.std:

IDENT: 3
PART LENGTH main: 18
RUNINGPART:main  INPART:True
CODE LINE 73                 Std(dataset)

IDENT: 4
PART LENGTH main: 19
RUNINGPART:main  INPART:True
CODE LINE 74             if options.mean:

IDENT: 3
PART LENGTH main: 20
RUNINGPART:main  INPART:True
CODE LINE 75                 Mean(dataset)

IDENT: 4
PART LENGTH main: 21
RUNINGPART:main  INPART:True
CODE LINE 76         else:

IDENT: 2
PART LENGTH main: 22
RUNINGPART:main  INPART:True
CODE LINE 77              parser.error("please set calculation,\n Please use -h for help")

IDENT: 3
PART LENGTH main: 23
RUNINGPART:main  INPART:True
CODE LINE 78     else:

IDENT: 1
PART LENGTH main: 24
RUNINGPART:main  INPART:True
CODE LINE 79         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

IDENT: 2
PART LENGTH main: 25
RUNINGPART:main  INPART:True
BLANK LINE 11 

RUNINGPART:main  INPART:True
CODE LINE 80 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 81     main()

===TOTAL===
 CODE LINES:81
 PARTS:{'Std': <__main__.Item object at 0x7fad2c791250>, 'main': <__main__.Item object at 0x7fad2c791310>, 'read_file': <__main__.Item object at 0x7fad2c791290>, 'Mean': <__main__.Item object at 0x7fad2c791190>} 
 TOTAL LINES:114 
 BLANK LINE:11 
 COMMEN_LINES:22
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/__init__.py
===TOTAL===
 CODE LINES:0
 PARTS:{} 
 TOTAL LINES:0 
 BLANK LINE:0 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/LinkedList.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import collections

RUNINGPART:False  INPART:False
CODE LINE 7 from weakref import proxy

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 8 class Link(object):

ADDED PART Link class Link(object):

RUNINGPART:Link  INPART:True
CODE LINE 9     '''

IDENT: 1
PART LENGTH Link: 2
RUNINGPART:Link  INPART:True
CODE LINE 10     The proper use of __slots__ is to save space in objects.

IDENT: 1
PART LENGTH Link: 3
RUNINGPART:Link  INPART:True
CODE LINE 11     '''

IDENT: 1
PART LENGTH Link: 4
RUNINGPART:Link  INPART:True
CODE LINE 12     __slots__ = 'prev', 'next', 'key', '__weakref__'

IDENT: 1
PART LENGTH Link: 5
RUNINGPART:Link  INPART:True
BLANK LINE 5 

RUNINGPART:Link  INPART:True
CODE LINE 13 class LinkedList(collections.MutableSet):

ADDED PART LinkedList class LinkedList(collections.MutableSet):

RUNINGPART:LinkedList  INPART:True
CODE LINE 14     '''

IDENT: 1
PART LENGTH LinkedList: 2
RUNINGPART:LinkedList  INPART:True
CODE LINE 15     LinkedLink

IDENT: 1
PART LENGTH LinkedList: 3
RUNINGPART:LinkedList  INPART:True
CODE LINE 16     Set the remembers the order elements were added

IDENT: 1
PART LENGTH LinkedList: 4
RUNINGPART:LinkedList  INPART:True
CODE LINE 17     '''

IDENT: 1
PART LENGTH LinkedList: 5
RUNINGPART:LinkedList  INPART:True
BLANK LINE 6 

RUNINGPART:LinkedList  INPART:True
CODE LINE 18     def __init__(self, iterable=None):

IN PART LinkedList  ADD ITEM __init__:     def __init__(self, iterable=None):

RUNINGPART:LinkedList  INPART:True
CODE LINE 19         '''

IDENT: 2
PART LENGTH LinkedList: 7
RUNINGPART:LinkedList  INPART:True
CODE LINE 20         Init

IDENT: 2
PART LENGTH LinkedList: 8
RUNINGPART:LinkedList  INPART:True
CODE LINE 21         '''

IDENT: 2
PART LENGTH LinkedList: 9
RUNINGPART:LinkedList  INPART:True
CODE LINE 22         self.__root = root = Link()         

IDENT: 2
PART LENGTH LinkedList: 10
RUNINGPART:LinkedList  INPART:True
CODE LINE 23         root.prev = root.next = root

IDENT: 2
PART LENGTH LinkedList: 11
RUNINGPART:LinkedList  INPART:True
CODE LINE 24         self.__map = {}                     # key --> link

IDENT: 7
PART LENGTH LinkedList: 12
RUNINGPART:LinkedList  INPART:True
CODE LINE 25         if iterable is not None:

IDENT: 2
PART LENGTH LinkedList: 13
RUNINGPART:LinkedList  INPART:True
CODE LINE 26             self |= iterable

IDENT: 3
PART LENGTH LinkedList: 14
RUNINGPART:LinkedList  INPART:True
BLANK LINE 7 

RUNINGPART:LinkedList  INPART:True
CODE LINE 27     def __len__(self):

IN PART LinkedList  ADD ITEM __len__:     def __len__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 28         '''

IDENT: 2
PART LENGTH LinkedList: 16
RUNINGPART:LinkedList  INPART:True
CODE LINE 29         Length for the LinkedList

IDENT: 2
PART LENGTH LinkedList: 17
RUNINGPART:LinkedList  INPART:True
CODE LINE 30         '''

IDENT: 2
PART LENGTH LinkedList: 18
RUNINGPART:LinkedList  INPART:True
CODE LINE 31         return len(self.__map)

IDENT: 2
PART LENGTH LinkedList: 19
RUNINGPART:LinkedList  INPART:True
BLANK LINE 8 

RUNINGPART:LinkedList  INPART:True
CODE LINE 32     def __contains__(self, key):

IN PART LinkedList  ADD ITEM __contains__:     def __contains__(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 33         '''

IDENT: 2
PART LENGTH LinkedList: 21
RUNINGPART:LinkedList  INPART:True
CODE LINE 34         Return Content of LinkedList

IDENT: 2
PART LENGTH LinkedList: 22
RUNINGPART:LinkedList  INPART:True
CODE LINE 35         '''

IDENT: 2
PART LENGTH LinkedList: 23
RUNINGPART:LinkedList  INPART:True
CODE LINE 36         return key in self.__map

IDENT: 2
PART LENGTH LinkedList: 24
RUNINGPART:LinkedList  INPART:True
BLANK LINE 9 

RUNINGPART:LinkedList  INPART:True
CODE LINE 37     def add(self, key):

IN PART LinkedList  ADD ITEM add:     def add(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 38         '''

IDENT: 2
PART LENGTH LinkedList: 26
RUNINGPART:LinkedList  INPART:True
CODE LINE 39         Add Node

IDENT: 2
PART LENGTH LinkedList: 27
RUNINGPART:LinkedList  INPART:True
CODE LINE 40         Store new key in a new link at the end of the linked list

IDENT: 2
PART LENGTH LinkedList: 28
RUNINGPART:LinkedList  INPART:True
CODE LINE 41         '''

IDENT: 2
PART LENGTH LinkedList: 29
RUNINGPART:LinkedList  INPART:True
CODE LINE 42         if key not in self.__map:

IDENT: 2
PART LENGTH LinkedList: 30
RUNINGPART:LinkedList  INPART:True
CODE LINE 43             '''

IDENT: 3
PART LENGTH LinkedList: 31
RUNINGPART:LinkedList  INPART:True
CODE LINE 44             Not Element Eq in the list

IDENT: 3
PART LENGTH LinkedList: 32
RUNINGPART:LinkedList  INPART:True
CODE LINE 45             '''

IDENT: 3
PART LENGTH LinkedList: 33
RUNINGPART:LinkedList  INPART:True
CODE LINE 46             self.__map[key] = link = Link()            

IDENT: 3
PART LENGTH LinkedList: 34
RUNINGPART:LinkedList  INPART:True
CODE LINE 47             root = self.__root

IDENT: 3
PART LENGTH LinkedList: 35
RUNINGPART:LinkedList  INPART:True
CODE LINE 48             last = root.prev

IDENT: 3
PART LENGTH LinkedList: 36
RUNINGPART:LinkedList  INPART:True
CODE LINE 49             link.prev, link.next, link.key = last, root, key

IDENT: 3
PART LENGTH LinkedList: 37
RUNINGPART:LinkedList  INPART:True
CODE LINE 50             last.next = root.prev = proxy(link)

IDENT: 3
PART LENGTH LinkedList: 38
RUNINGPART:LinkedList  INPART:True
BLANK LINE 10     

RUNINGPART:LinkedList  INPART:True
CODE LINE 51     def head(self):

IN PART LinkedList  ADD ITEM head:     def head(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 52         '''

IDENT: 2
PART LENGTH LinkedList: 40
RUNINGPART:LinkedList  INPART:True
CODE LINE 53         Return Head

IDENT: 2
PART LENGTH LinkedList: 41
RUNINGPART:LinkedList  INPART:True
CODE LINE 54         '''

IDENT: 2
PART LENGTH LinkedList: 42
RUNINGPART:LinkedList  INPART:True
CODE LINE 55         return list(self)[0],list(self)[-1] 

IDENT: 2
PART LENGTH LinkedList: 43
RUNINGPART:LinkedList  INPART:True
BLANK LINE 11         

RUNINGPART:LinkedList  INPART:True
BLANK LINE 12 

RUNINGPART:LinkedList  INPART:True
CODE LINE 56     def discard(self, key):

IN PART LinkedList  ADD ITEM discard:     def discard(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 57         '''

IDENT: 2
PART LENGTH LinkedList: 45
RUNINGPART:LinkedList  INPART:True
CODE LINE 58         Remove an existing item using self.__map to find the link which is

IDENT: 2
PART LENGTH LinkedList: 46
RUNINGPART:LinkedList  INPART:True
CODE LINE 59         then removed by updating the links in the predecessor and successors.

IDENT: 2
PART LENGTH LinkedList: 47
RUNINGPART:LinkedList  INPART:True
CODE LINE 60         '''

IDENT: 2
PART LENGTH LinkedList: 48
RUNINGPART:LinkedList  INPART:True
CODE LINE 61         if key in self.__map:

IDENT: 2
PART LENGTH LinkedList: 49
RUNINGPART:LinkedList  INPART:True
CODE LINE 62             link = self.__map.pop(key)

IDENT: 3
PART LENGTH LinkedList: 50
RUNINGPART:LinkedList  INPART:True
CODE LINE 63             link.prev.next = link.next

IDENT: 3
PART LENGTH LinkedList: 51
RUNINGPART:LinkedList  INPART:True
CODE LINE 64             link.next.prev = link.prev

IDENT: 3
PART LENGTH LinkedList: 52
RUNINGPART:LinkedList  INPART:True
BLANK LINE 13 

RUNINGPART:LinkedList  INPART:True
CODE LINE 65     def __iter__(self):

IN PART LinkedList  ADD ITEM __iter__:     def __iter__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 66         '''

IDENT: 2
PART LENGTH LinkedList: 54
RUNINGPART:LinkedList  INPART:True
CODE LINE 67         iteration for the Next Method

IDENT: 2
PART LENGTH LinkedList: 55
RUNINGPART:LinkedList  INPART:True
CODE LINE 68         '''

IDENT: 2
PART LENGTH LinkedList: 56
RUNINGPART:LinkedList  INPART:True
CODE LINE 69         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 57
RUNINGPART:LinkedList  INPART:True
CODE LINE 70         curr = root.next

IDENT: 2
PART LENGTH LinkedList: 58
RUNINGPART:LinkedList  INPART:True
CODE LINE 71         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 59
RUNINGPART:LinkedList  INPART:True
CODE LINE 72             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 60
RUNINGPART:LinkedList  INPART:True
CODE LINE 73             curr = curr.next

IDENT: 3
PART LENGTH LinkedList: 61
RUNINGPART:LinkedList  INPART:True
BLANK LINE 14 

RUNINGPART:LinkedList  INPART:True
CODE LINE 74     def __reversed__(self):

IN PART LinkedList  ADD ITEM __reversed__:     def __reversed__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 75         '''

IDENT: 2
PART LENGTH LinkedList: 63
RUNINGPART:LinkedList  INPART:True
CODE LINE 76         iteration in reverse mode Method

IDENT: 2
PART LENGTH LinkedList: 64
RUNINGPART:LinkedList  INPART:True
CODE LINE 77         '''

IDENT: 2
PART LENGTH LinkedList: 65
RUNINGPART:LinkedList  INPART:True
CODE LINE 78         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 66
RUNINGPART:LinkedList  INPART:True
CODE LINE 79         curr = root.prev

IDENT: 2
PART LENGTH LinkedList: 67
RUNINGPART:LinkedList  INPART:True
CODE LINE 80         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 68
RUNINGPART:LinkedList  INPART:True
CODE LINE 81             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 69
RUNINGPART:LinkedList  INPART:True
CODE LINE 82             curr = curr.prev

IDENT: 3
PART LENGTH LinkedList: 70
RUNINGPART:LinkedList  INPART:True
BLANK LINE 15 

RUNINGPART:LinkedList  INPART:True
CODE LINE 83     def pop(self, last=True):

IN PART LinkedList  ADD ITEM pop:     def pop(self, last=True):

RUNINGPART:LinkedList  INPART:True
CODE LINE 84         '''

IDENT: 2
PART LENGTH LinkedList: 72
RUNINGPART:LinkedList  INPART:True
CODE LINE 85         pop key

IDENT: 2
PART LENGTH LinkedList: 73
RUNINGPART:LinkedList  INPART:True
CODE LINE 86         '''

IDENT: 2
PART LENGTH LinkedList: 74
RUNINGPART:LinkedList  INPART:True
CODE LINE 87         if not self:

IDENT: 2
PART LENGTH LinkedList: 75
RUNINGPART:LinkedList  INPART:True
CODE LINE 88             raise KeyError('set is empty')

IDENT: 3
PART LENGTH LinkedList: 76
RUNINGPART:LinkedList  INPART:True
CODE LINE 89         key = next(reversed(self)) if last else next(iter(self))

IDENT: 2
PART LENGTH LinkedList: 77
RUNINGPART:LinkedList  INPART:True
CODE LINE 90         self.discard(key)

IDENT: 2
PART LENGTH LinkedList: 78
RUNINGPART:LinkedList  INPART:True
CODE LINE 91         return key

IDENT: 2
PART LENGTH LinkedList: 79
RUNINGPART:LinkedList  INPART:True
BLANK LINE 16 

RUNINGPART:LinkedList  INPART:True
CODE LINE 92     def __repr__(self):

IN PART LinkedList  ADD ITEM __repr__:     def __repr__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 93         '''

IDENT: 2
PART LENGTH LinkedList: 81
RUNINGPART:LinkedList  INPART:True
CODE LINE 94         String Conversion representation of object LinkeList repr()

IDENT: 2
PART LENGTH LinkedList: 82
RUNINGPART:LinkedList  INPART:True
CODE LINE 95         '''

IDENT: 2
PART LENGTH LinkedList: 83
RUNINGPART:LinkedList  INPART:True
CODE LINE 96         if not self:

IDENT: 2
PART LENGTH LinkedList: 84
RUNINGPART:LinkedList  INPART:True
CODE LINE 97             return '%s()' % (self.__class__.__name__,)

IDENT: 3
PART LENGTH LinkedList: 85
RUNINGPART:LinkedList  INPART:True
CODE LINE 98         return '%s(%r)' % (self.__class__.__name__, list(self))

IDENT: 2
PART LENGTH LinkedList: 86
RUNINGPART:LinkedList  INPART:True
BLANK LINE 17 

RUNINGPART:LinkedList  INPART:True
CODE LINE 99     def __eq__(self, other):

IN PART LinkedList  ADD ITEM __eq__:     def __eq__(self, other):

RUNINGPART:LinkedList  INPART:True
CODE LINE 100         '''

IDENT: 2
PART LENGTH LinkedList: 88
RUNINGPART:LinkedList  INPART:True
CODE LINE 101         Method for de Equal comparation.

IDENT: 2
PART LENGTH LinkedList: 89
RUNINGPART:LinkedList  INPART:True
CODE LINE 102         '''

IDENT: 2
PART LENGTH LinkedList: 90
RUNINGPART:LinkedList  INPART:True
CODE LINE 103         if isinstance(other, LinkedList):

IDENT: 2
PART LENGTH LinkedList: 91
RUNINGPART:LinkedList  INPART:True
CODE LINE 104             return len(self) == len(other) and list(self) == list(other)

IDENT: 3
PART LENGTH LinkedList: 92
RUNINGPART:LinkedList  INPART:True
CODE LINE 105         return not self.isdisjoint(other)

IDENT: 2
PART LENGTH LinkedList: 93
===TOTAL===
 CODE LINES:105
 PARTS:{'Link': <__main__.Item object at 0x7fad2c791290>, 'LinkedList': <__main__.Item object at 0x7fad2c791190>} 
 TOTAL LINES:142 
 BLANK LINE:17 
 COMMEN_LINES:20
Fin De Archivado
START COUNTING
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/test_mean_std.py
RUNINGPART:False  INPART:False
CODE LINE 1 import unittest

RUNINGPART:False  INPART:False
CODE LINE 2 from mean_std import Mean, Std, LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
CODE LINE 3 class TestAssignament(unittest.TestCase):

ADDED PART TestAssignament class TestAssignament(unittest.TestCase):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 4     def test_estimate_proxy_size(self):

IN PART TestAssignament  ADD ITEM test_estimate_proxy_size:     def test_estimate_proxy_size(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 5         a=LinkedList([160,591,114,229,230,270,128,1657,624,1503])

IDENT: 2
PART LENGTH TestAssignament: 3
RUNINGPART:TestAssignament  INPART:True
CODE LINE 6         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 4
RUNINGPART:TestAssignament  INPART:True
CODE LINE 7         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 5
RUNINGPART:TestAssignament  INPART:True
CODE LINE 8         print a

IDENT: 2
PART LENGTH TestAssignament: 6
RUNINGPART:TestAssignament  INPART:True
CODE LINE 9         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 7
RUNINGPART:TestAssignament  INPART:True
CODE LINE 10         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 8
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 2     

RUNINGPART:TestAssignament  INPART:True
CODE LINE 11     def test_development_hours(self):

IN PART TestAssignament  ADD ITEM test_development_hours:     def test_development_hours(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 12         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 10
RUNINGPART:TestAssignament  INPART:True
CODE LINE 13         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 11
RUNINGPART:TestAssignament  INPART:True
CODE LINE 14         a=LinkedList([15.0,69.9,6.5,22.4,28.4,65.9,19.4,198.7,38.8,138.2])

IDENT: 2
PART LENGTH TestAssignament: 12
RUNINGPART:TestAssignament  INPART:True
CODE LINE 15         print a

IDENT: 2
PART LENGTH TestAssignament: 13
RUNINGPART:TestAssignament  INPART:True
CODE LINE 16         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 14
RUNINGPART:TestAssignament  INPART:True
CODE LINE 17         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 15
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 3 

RUNINGPART:TestAssignament  INPART:True
CODE LINE 18 if __name__ == '__main__':

IDENT: 0
RUNINGPART:TestAssignament  INPART:False
CODE LINE 19     unittest.main()
===TOTAL===
 CODE LINES:19
 PARTS:{'TestAssignament': <__main__.Item object at 0x7fbbb56eded0>} 
 TOTAL LINES:22 
 BLANK LINE:3 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/mean_std.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 68     log.info("START APP")

IDENT: 1
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 69     if options.file:

IDENT: 1
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 70         if options.std or options.mean:

IDENT: 2
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 71             dataset=read_file(options.file)

IDENT: 3
PART LENGTH main: 17
RUNINGPART:main  INPART:True
CODE LINE 72             if options.std:

IDENT: 3
PART LENGTH main: 18
RUNINGPART:main  INPART:True
CODE LINE 73                 Std(dataset)

IDENT: 4
PART LENGTH main: 19
RUNINGPART:main  INPART:True
CODE LINE 74             if options.mean:

IDENT: 3
PART LENGTH main: 20
RUNINGPART:main  INPART:True
CODE LINE 75                 Mean(dataset)

IDENT: 4
PART LENGTH main: 21
RUNINGPART:main  INPART:True
CODE LINE 76         else:

IDENT: 2
PART LENGTH main: 22
RUNINGPART:main  INPART:True
CODE LINE 77              parser.error("please set calculation,\n Please use -h for help")

IDENT: 3
PART LENGTH main: 23
RUNINGPART:main  INPART:True
CODE LINE 78     else:

IDENT: 1
PART LENGTH main: 24
RUNINGPART:main  INPART:True
CODE LINE 79         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

IDENT: 2
PART LENGTH main: 25
RUNINGPART:main  INPART:True
BLANK LINE 11 

RUNINGPART:main  INPART:True
CODE LINE 80 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 81     main()

===TOTAL===
 CODE LINES:81
 PARTS:{'Std': <__main__.Item object at 0x7fbbb56f6250>, 'main': <__main__.Item object at 0x7fbbb56f6310>, 'read_file': <__main__.Item object at 0x7fbbb56f6290>, 'Mean': <__main__.Item object at 0x7fbbb56f6190>} 
 TOTAL LINES:114 
 BLANK LINE:11 
 COMMEN_LINES:22
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/__init__.py
===TOTAL===
 CODE LINES:0
 PARTS:{} 
 TOTAL LINES:0 
 BLANK LINE:0 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/LinkedList.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import collections

RUNINGPART:False  INPART:False
CODE LINE 7 from weakref import proxy

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 8 class Link(object):

ADDED PART Link class Link(object):

RUNINGPART:Link  INPART:True
CODE LINE 9     '''

IDENT: 1
PART LENGTH Link: 2
RUNINGPART:Link  INPART:True
CODE LINE 10     The proper use of __slots__ is to save space in objects.

IDENT: 1
PART LENGTH Link: 3
RUNINGPART:Link  INPART:True
CODE LINE 11     '''

IDENT: 1
PART LENGTH Link: 4
RUNINGPART:Link  INPART:True
CODE LINE 12     __slots__ = 'prev', 'next', 'key', '__weakref__'

IDENT: 1
PART LENGTH Link: 5
RUNINGPART:Link  INPART:True
BLANK LINE 5 

RUNINGPART:Link  INPART:True
CODE LINE 13 class LinkedList(collections.MutableSet):

ADDED PART LinkedList class LinkedList(collections.MutableSet):

RUNINGPART:LinkedList  INPART:True
CODE LINE 14     '''

IDENT: 1
PART LENGTH LinkedList: 2
RUNINGPART:LinkedList  INPART:True
CODE LINE 15     LinkedLink

IDENT: 1
PART LENGTH LinkedList: 3
RUNINGPART:LinkedList  INPART:True
CODE LINE 16     Set the remembers the order elements were added

IDENT: 1
PART LENGTH LinkedList: 4
RUNINGPART:LinkedList  INPART:True
CODE LINE 17     '''

IDENT: 1
PART LENGTH LinkedList: 5
RUNINGPART:LinkedList  INPART:True
BLANK LINE 6 

RUNINGPART:LinkedList  INPART:True
CODE LINE 18     def __init__(self, iterable=None):

IN PART LinkedList  ADD ITEM __init__:     def __init__(self, iterable=None):

RUNINGPART:LinkedList  INPART:True
CODE LINE 19         '''

IDENT: 2
PART LENGTH LinkedList: 7
RUNINGPART:LinkedList  INPART:True
CODE LINE 20         Init

IDENT: 2
PART LENGTH LinkedList: 8
RUNINGPART:LinkedList  INPART:True
CODE LINE 21         '''

IDENT: 2
PART LENGTH LinkedList: 9
RUNINGPART:LinkedList  INPART:True
CODE LINE 22         self.__root = root = Link()         

IDENT: 2
PART LENGTH LinkedList: 10
RUNINGPART:LinkedList  INPART:True
CODE LINE 23         root.prev = root.next = root

IDENT: 2
PART LENGTH LinkedList: 11
RUNINGPART:LinkedList  INPART:True
CODE LINE 24         self.__map = {}                     # key --> link

IDENT: 7
PART LENGTH LinkedList: 12
RUNINGPART:LinkedList  INPART:True
CODE LINE 25         if iterable is not None:

IDENT: 2
PART LENGTH LinkedList: 13
RUNINGPART:LinkedList  INPART:True
CODE LINE 26             self |= iterable

IDENT: 3
PART LENGTH LinkedList: 14
RUNINGPART:LinkedList  INPART:True
BLANK LINE 7 

RUNINGPART:LinkedList  INPART:True
CODE LINE 27     def __len__(self):

IN PART LinkedList  ADD ITEM __len__:     def __len__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 28         '''

IDENT: 2
PART LENGTH LinkedList: 16
RUNINGPART:LinkedList  INPART:True
CODE LINE 29         Length for the LinkedList

IDENT: 2
PART LENGTH LinkedList: 17
RUNINGPART:LinkedList  INPART:True
CODE LINE 30         '''

IDENT: 2
PART LENGTH LinkedList: 18
RUNINGPART:LinkedList  INPART:True
CODE LINE 31         return len(self.__map)

IDENT: 2
PART LENGTH LinkedList: 19
RUNINGPART:LinkedList  INPART:True
BLANK LINE 8 

RUNINGPART:LinkedList  INPART:True
CODE LINE 32     def __contains__(self, key):

IN PART LinkedList  ADD ITEM __contains__:     def __contains__(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 33         '''

IDENT: 2
PART LENGTH LinkedList: 21
RUNINGPART:LinkedList  INPART:True
CODE LINE 34         Return Content of LinkedList

IDENT: 2
PART LENGTH LinkedList: 22
RUNINGPART:LinkedList  INPART:True
CODE LINE 35         '''

IDENT: 2
PART LENGTH LinkedList: 23
RUNINGPART:LinkedList  INPART:True
CODE LINE 36         return key in self.__map

IDENT: 2
PART LENGTH LinkedList: 24
RUNINGPART:LinkedList  INPART:True
BLANK LINE 9 

RUNINGPART:LinkedList  INPART:True
CODE LINE 37     def add(self, key):

IN PART LinkedList  ADD ITEM add:     def add(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 38         '''

IDENT: 2
PART LENGTH LinkedList: 26
RUNINGPART:LinkedList  INPART:True
CODE LINE 39         Add Node

IDENT: 2
PART LENGTH LinkedList: 27
RUNINGPART:LinkedList  INPART:True
CODE LINE 40         Store new key in a new link at the end of the linked list

IDENT: 2
PART LENGTH LinkedList: 28
RUNINGPART:LinkedList  INPART:True
CODE LINE 41         '''

IDENT: 2
PART LENGTH LinkedList: 29
RUNINGPART:LinkedList  INPART:True
CODE LINE 42         if key not in self.__map:

IDENT: 2
PART LENGTH LinkedList: 30
RUNINGPART:LinkedList  INPART:True
CODE LINE 43             '''

IDENT: 3
PART LENGTH LinkedList: 31
RUNINGPART:LinkedList  INPART:True
CODE LINE 44             Not Element Eq in the list

IDENT: 3
PART LENGTH LinkedList: 32
RUNINGPART:LinkedList  INPART:True
CODE LINE 45             '''

IDENT: 3
PART LENGTH LinkedList: 33
RUNINGPART:LinkedList  INPART:True
CODE LINE 46             self.__map[key] = link = Link()            

IDENT: 3
PART LENGTH LinkedList: 34
RUNINGPART:LinkedList  INPART:True
CODE LINE 47             root = self.__root

IDENT: 3
PART LENGTH LinkedList: 35
RUNINGPART:LinkedList  INPART:True
CODE LINE 48             last = root.prev

IDENT: 3
PART LENGTH LinkedList: 36
RUNINGPART:LinkedList  INPART:True
CODE LINE 49             link.prev, link.next, link.key = last, root, key

IDENT: 3
PART LENGTH LinkedList: 37
RUNINGPART:LinkedList  INPART:True
CODE LINE 50             last.next = root.prev = proxy(link)

IDENT: 3
PART LENGTH LinkedList: 38
RUNINGPART:LinkedList  INPART:True
BLANK LINE 10     

RUNINGPART:LinkedList  INPART:True
CODE LINE 51     def head(self):

IN PART LinkedList  ADD ITEM head:     def head(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 52         '''

IDENT: 2
PART LENGTH LinkedList: 40
RUNINGPART:LinkedList  INPART:True
CODE LINE 53         Return Head

IDENT: 2
PART LENGTH LinkedList: 41
RUNINGPART:LinkedList  INPART:True
CODE LINE 54         '''

IDENT: 2
PART LENGTH LinkedList: 42
RUNINGPART:LinkedList  INPART:True
CODE LINE 55         return list(self)[0],list(self)[-1] 

IDENT: 2
PART LENGTH LinkedList: 43
RUNINGPART:LinkedList  INPART:True
BLANK LINE 11         

RUNINGPART:LinkedList  INPART:True
BLANK LINE 12 

RUNINGPART:LinkedList  INPART:True
CODE LINE 56     def discard(self, key):

IN PART LinkedList  ADD ITEM discard:     def discard(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 57         '''

IDENT: 2
PART LENGTH LinkedList: 45
RUNINGPART:LinkedList  INPART:True
CODE LINE 58         Remove an existing item using self.__map to find the link which is

IDENT: 2
PART LENGTH LinkedList: 46
RUNINGPART:LinkedList  INPART:True
CODE LINE 59         then removed by updating the links in the predecessor and successors.

IDENT: 2
PART LENGTH LinkedList: 47
RUNINGPART:LinkedList  INPART:True
CODE LINE 60         '''

IDENT: 2
PART LENGTH LinkedList: 48
RUNINGPART:LinkedList  INPART:True
CODE LINE 61         if key in self.__map:

IDENT: 2
PART LENGTH LinkedList: 49
RUNINGPART:LinkedList  INPART:True
CODE LINE 62             link = self.__map.pop(key)

IDENT: 3
PART LENGTH LinkedList: 50
RUNINGPART:LinkedList  INPART:True
CODE LINE 63             link.prev.next = link.next

IDENT: 3
PART LENGTH LinkedList: 51
RUNINGPART:LinkedList  INPART:True
CODE LINE 64             link.next.prev = link.prev

IDENT: 3
PART LENGTH LinkedList: 52
RUNINGPART:LinkedList  INPART:True
BLANK LINE 13 

RUNINGPART:LinkedList  INPART:True
CODE LINE 65     def __iter__(self):

IN PART LinkedList  ADD ITEM __iter__:     def __iter__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 66         '''

IDENT: 2
PART LENGTH LinkedList: 54
RUNINGPART:LinkedList  INPART:True
CODE LINE 67         iteration for the Next Method

IDENT: 2
PART LENGTH LinkedList: 55
RUNINGPART:LinkedList  INPART:True
CODE LINE 68         '''

IDENT: 2
PART LENGTH LinkedList: 56
RUNINGPART:LinkedList  INPART:True
CODE LINE 69         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 57
RUNINGPART:LinkedList  INPART:True
CODE LINE 70         curr = root.next

IDENT: 2
PART LENGTH LinkedList: 58
RUNINGPART:LinkedList  INPART:True
CODE LINE 71         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 59
RUNINGPART:LinkedList  INPART:True
CODE LINE 72             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 60
RUNINGPART:LinkedList  INPART:True
CODE LINE 73             curr = curr.next

IDENT: 3
PART LENGTH LinkedList: 61
RUNINGPART:LinkedList  INPART:True
BLANK LINE 14 

RUNINGPART:LinkedList  INPART:True
CODE LINE 74     def __reversed__(self):

IN PART LinkedList  ADD ITEM __reversed__:     def __reversed__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 75         '''

IDENT: 2
PART LENGTH LinkedList: 63
RUNINGPART:LinkedList  INPART:True
CODE LINE 76         iteration in reverse mode Method

IDENT: 2
PART LENGTH LinkedList: 64
RUNINGPART:LinkedList  INPART:True
CODE LINE 77         '''

IDENT: 2
PART LENGTH LinkedList: 65
RUNINGPART:LinkedList  INPART:True
CODE LINE 78         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 66
RUNINGPART:LinkedList  INPART:True
CODE LINE 79         curr = root.prev

IDENT: 2
PART LENGTH LinkedList: 67
RUNINGPART:LinkedList  INPART:True
CODE LINE 80         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 68
RUNINGPART:LinkedList  INPART:True
CODE LINE 81             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 69
RUNINGPART:LinkedList  INPART:True
CODE LINE 82             curr = curr.prev

IDENT: 3
PART LENGTH LinkedList: 70
RUNINGPART:LinkedList  INPART:True
BLANK LINE 15 

RUNINGPART:LinkedList  INPART:True
CODE LINE 83     def pop(self, last=True):

IN PART LinkedList  ADD ITEM pop:     def pop(self, last=True):

RUNINGPART:LinkedList  INPART:True
CODE LINE 84         '''

IDENT: 2
PART LENGTH LinkedList: 72
RUNINGPART:LinkedList  INPART:True
CODE LINE 85         pop key

IDENT: 2
PART LENGTH LinkedList: 73
RUNINGPART:LinkedList  INPART:True
CODE LINE 86         '''

IDENT: 2
PART LENGTH LinkedList: 74
RUNINGPART:LinkedList  INPART:True
CODE LINE 87         if not self:

IDENT: 2
PART LENGTH LinkedList: 75
RUNINGPART:LinkedList  INPART:True
CODE LINE 88             raise KeyError('set is empty')

IDENT: 3
PART LENGTH LinkedList: 76
RUNINGPART:LinkedList  INPART:True
CODE LINE 89         key = next(reversed(self)) if last else next(iter(self))

IDENT: 2
PART LENGTH LinkedList: 77
RUNINGPART:LinkedList  INPART:True
CODE LINE 90         self.discard(key)

IDENT: 2
PART LENGTH LinkedList: 78
RUNINGPART:LinkedList  INPART:True
CODE LINE 91         return key

IDENT: 2
PART LENGTH LinkedList: 79
RUNINGPART:LinkedList  INPART:True
BLANK LINE 16 

RUNINGPART:LinkedList  INPART:True
CODE LINE 92     def __repr__(self):

IN PART LinkedList  ADD ITEM __repr__:     def __repr__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 93         '''

IDENT: 2
PART LENGTH LinkedList: 81
RUNINGPART:LinkedList  INPART:True
CODE LINE 94         String Conversion representation of object LinkeList repr()

IDENT: 2
PART LENGTH LinkedList: 82
RUNINGPART:LinkedList  INPART:True
CODE LINE 95         '''

IDENT: 2
PART LENGTH LinkedList: 83
RUNINGPART:LinkedList  INPART:True
CODE LINE 96         if not self:

IDENT: 2
PART LENGTH LinkedList: 84
RUNINGPART:LinkedList  INPART:True
CODE LINE 97             return '%s()' % (self.__class__.__name__,)

IDENT: 3
PART LENGTH LinkedList: 85
RUNINGPART:LinkedList  INPART:True
CODE LINE 98         return '%s(%r)' % (self.__class__.__name__, list(self))

IDENT: 2
PART LENGTH LinkedList: 86
RUNINGPART:LinkedList  INPART:True
BLANK LINE 17 

RUNINGPART:LinkedList  INPART:True
CODE LINE 99     def __eq__(self, other):

IN PART LinkedList  ADD ITEM __eq__:     def __eq__(self, other):

RUNINGPART:LinkedList  INPART:True
CODE LINE 100         '''

IDENT: 2
PART LENGTH LinkedList: 88
RUNINGPART:LinkedList  INPART:True
CODE LINE 101         Method for de Equal comparation.

IDENT: 2
PART LENGTH LinkedList: 89
RUNINGPART:LinkedList  INPART:True
CODE LINE 102         '''

IDENT: 2
PART LENGTH LinkedList: 90
RUNINGPART:LinkedList  INPART:True
CODE LINE 103         if isinstance(other, LinkedList):

IDENT: 2
PART LENGTH LinkedList: 91
RUNINGPART:LinkedList  INPART:True
CODE LINE 104             return len(self) == len(other) and list(self) == list(other)

IDENT: 3
PART LENGTH LinkedList: 92
RUNINGPART:LinkedList  INPART:True
CODE LINE 105         return not self.isdisjoint(other)

IDENT: 2
PART LENGTH LinkedList: 93
===TOTAL===
 CODE LINES:105
 PARTS:{'Link': <__main__.Item object at 0x7fbbb56f6290>, 'LinkedList': <__main__.Item object at 0x7fbbb56f6190>} 
 TOTAL LINES:142 
 BLANK LINE:17 
 COMMEN_LINES:20
Fin De Archivado
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament2/pyloc.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       pyloc.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 import collections

RUNINGPART:False  INPART:False
CODE LINE 11 from weakref import proxy

RUNINGPART:False  INPART:False
CODE LINE 12 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 13 import string

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 14 LOG_FILENAME = 'loc.log'

RUNINGPART:False  INPART:False
CODE LINE 15 COMMENT_START_STRING = "#"

RUNINGPART:False  INPART:False
CODE LINE 16 PY_EXTENSION = ("py","python")

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 17 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 18 log = logging.getLogger('LOC')

RUNINGPART:False  INPART:False
CODE LINE 19 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 20 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 21 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 6 

RUNINGPART:False  INPART:False
CODE LINE 22 class Item(object):

ADDED PART Item class Item(object):

RUNINGPART:Item  INPART:True
CODE LINE 23     '''

IDENT: 1
PART LENGTH Item: 2
RUNINGPART:Item  INPART:True
CODE LINE 24     Item of Code, PSP Defined Part

IDENT: 1
PART LENGTH Item: 3
RUNINGPART:Item  INPART:True
CODE LINE 25     '''

IDENT: 1
PART LENGTH Item: 4
RUNINGPART:Item  INPART:True
CODE LINE 26     def __init__(self, line, start_line):

IN PART Item  ADD ITEM __init__:     def __init__(self, line, start_line):

RUNINGPART:Item  INPART:True
CODE LINE 27         '''

IDENT: 2
PART LENGTH Item: 6
RUNINGPART:Item  INPART:True
CODE LINE 28         Item Constructor

IDENT: 2
PART LENGTH Item: 7
RUNINGPART:Item  INPART:True
BLANK LINE 7         

RUNINGPART:Item  INPART:True
CODE LINE 29         Parameters

IDENT: 2
PART LENGTH Item: 8
RUNINGPART:Item  INPART:True
CODE LINE 30         ----------

IDENT: 2
PART LENGTH Item: 9
RUNINGPART:Item  INPART:True
CODE LINE 31         line: str,

IDENT: 2
PART LENGTH Item: 10
RUNINGPART:Item  INPART:True
CODE LINE 32             line to analyze.

IDENT: 3
PART LENGTH Item: 11
RUNINGPART:Item  INPART:True
CODE LINE 33         start_line: int, 

IDENT: 2
PART LENGTH Item: 12
RUNINGPART:Item  INPART:True
CODE LINE 34             Start position

IDENT: 3
PART LENGTH Item: 13
RUNINGPART:Item  INPART:True
BLANK LINE 8         

RUNINGPART:Item  INPART:True
CODE LINE 35         '''

IDENT: 2
PART LENGTH Item: 14
RUNINGPART:Item  INPART:True
CODE LINE 36         self.line=line

IDENT: 2
PART LENGTH Item: 15
RUNINGPART:Item  INPART:True
CODE LINE 37         self.start_line=start_line

IDENT: 2
PART LENGTH Item: 16
RUNINGPART:Item  INPART:True
CODE LINE 38         self.end_line=False

IDENT: 2
PART LENGTH Item: 17
RUNINGPART:Item  INPART:True
CODE LINE 39         self.name=False

IDENT: 2
PART LENGTH Item: 18
RUNINGPART:Item  INPART:True
CODE LINE 40         self.ident_level=False

IDENT: 2
PART LENGTH Item: 19
RUNINGPART:Item  INPART:True
CODE LINE 41         self.length=0

IDENT: 2
PART LENGTH Item: 20
RUNINGPART:Item  INPART:True
CODE LINE 42         self.sub_items={}

IDENT: 2
PART LENGTH Item: 21
RUNINGPART:Item  INPART:True
CODE LINE 43         self.is_a_part=self.IdentifyPart()

IDENT: 2
PART LENGTH Item: 22
RUNINGPART:Item  INPART:True
BLANK LINE 9         

RUNINGPART:Item  INPART:True
CODE LINE 44     def IdentifyPart(self):

IN PART Item  ADD ITEM IdentifyPart:     def IdentifyPart(self):

RUNINGPART:Item  INPART:True
CODE LINE 45         '''

IDENT: 2
PART LENGTH Item: 24
RUNINGPART:Item  INPART:True
CODE LINE 46         Extract Item o Part Name. from line, Ident Level and If is a item

IDENT: 2
PART LENGTH Item: 25
RUNINGPART:Item  INPART:True
BLANK LINE 10         

RUNINGPART:Item  INPART:True
CODE LINE 47         Returns

IDENT: 2
PART LENGTH Item: 26
RUNINGPART:Item  INPART:True
CODE LINE 48         -------

IDENT: 2
PART LENGTH Item: 27
RUNINGPART:Item  INPART:True
CODE LINE 49             is_a_part: Bool, 

IDENT: 3
PART LENGTH Item: 28
RUNINGPART:Item  INPART:True
CODE LINE 50                 Is a Item, Part, Function or Classs

IDENT: 4
PART LENGTH Item: 29
RUNINGPART:Item  INPART:True
CODE LINE 51         '''

IDENT: 2
PART LENGTH Item: 30
RUNINGPART:Item  INPART:True
CODE LINE 52         idents=self.line.rstrip().split("    ")

IDENT: 3
PART LENGTH Item: 31
RUNINGPART:Item  INPART:True
CODE LINE 53         self.ident_level=len(idents) - 1

IDENT: 2
PART LENGTH Item: 32
RUNINGPART:Item  INPART:True
CODE LINE 54         for level in idents:

IDENT: 2
PART LENGTH Item: 33
RUNINGPART:Item  INPART:True
CODE LINE 55             if level.startswith("def ") or level.startswith("class "):

IDENT: 3
PART LENGTH Item: 34
RUNINGPART:Item  INPART:True
CODE LINE 56                 self.name=level.split(" ")[1].split("(")[0]

IDENT: 4
PART LENGTH Item: 35
RUNINGPART:Item  INPART:True
CODE LINE 57                 return True

IDENT: 4
PART LENGTH Item: 36
RUNINGPART:Item  INPART:True
CODE LINE 58         return False

IDENT: 2
PART LENGTH Item: 37
RUNINGPART:Item  INPART:True
BLANK LINE 11 

RUNINGPART:Item  INPART:True
CODE LINE 59 def LocateFiles(root, extensions=PY_EXTENSION):

ADDED PART LocateFiles def LocateFiles(root, extensions=PY_EXTENSION):

RUNINGPART:LocateFiles  INPART:True
CODE LINE 60     '''

IDENT: 1
PART LENGTH LocateFiles: 2
RUNINGPART:LocateFiles  INPART:True
CODE LINE 61     Locate all files matching supplied filename pattern in and below

IDENT: 1
PART LENGTH LocateFiles: 3
RUNINGPART:LocateFiles  INPART:True
CODE LINE 62     supplied root directory.

IDENT: 1
PART LENGTH LocateFiles: 4
RUNINGPART:LocateFiles  INPART:True
BLANK LINE 12     

RUNINGPART:LocateFiles  INPART:True
CODE LINE 63     Parameters

IDENT: 1
PART LENGTH LocateFiles: 5
RUNINGPART:LocateFiles  INPART:True
CODE LINE 64     ----------

IDENT: 1
PART LENGTH LocateFiles: 6
RUNINGPART:LocateFiles  INPART:True
CODE LINE 65     root : str, path of programs 

IDENT: 1
PART LENGTH LocateFiles: 7
RUNINGPART:LocateFiles  INPART:True
CODE LINE 66         search file for counting lines..

IDENT: 2
PART LENGTH LocateFiles: 8
RUNINGPART:LocateFiles  INPART:True
CODE LINE 67     extensions : list, List of extensions

IDENT: 1
PART LENGTH LocateFiles: 9
RUNINGPART:LocateFiles  INPART:True
CODE LINE 68         Extension to search programs

IDENT: 2
PART LENGTH LocateFiles: 10
RUNINGPART:LocateFiles  INPART:True
CODE LINE 69     '''

IDENT: 1
PART LENGTH LocateFiles: 11
RUNINGPART:LocateFiles  INPART:True
CODE LINE 70     for path, dirs, files in os.walk(os.path.abspath(root)):

IDENT: 1
PART LENGTH LocateFiles: 12
RUNINGPART:LocateFiles  INPART:True
CODE LINE 71         for filename in files:

IDENT: 2
PART LENGTH LocateFiles: 13
RUNINGPART:LocateFiles  INPART:True
CODE LINE 72             for ext in extensions:

IDENT: 3
PART LENGTH LocateFiles: 14
RUNINGPART:LocateFiles  INPART:True
CODE LINE 73                 if filename.endswith(ext):

IDENT: 4
PART LENGTH LocateFiles: 15
RUNINGPART:LocateFiles  INPART:True
CODE LINE 74                     if os.stat(os.path.join(path, filename)):

IDENT: 5
PART LENGTH LocateFiles: 16
RUNINGPART:LocateFiles  INPART:True
CODE LINE 75                         yield os.path.join(path, filename)

IDENT: 6
PART LENGTH LocateFiles: 17
RUNINGPART:LocateFiles  INPART:True
BLANK LINE 13 

RUNINGPART:LocateFiles  INPART:True
CODE LINE 76 def LOCCountDir(root, extensions=PY_EXTENSION):

ADDED PART LOCCountDir def LOCCountDir(root, extensions=PY_EXTENSION):

RUNINGPART:LOCCountDir  INPART:True
CODE LINE 77     '''

IDENT: 1
PART LENGTH LOCCountDir: 2
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 78     Locate all files matching supplied filename pattern in and below

IDENT: 1
PART LENGTH LOCCountDir: 3
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 79     supplied root directory.

IDENT: 1
PART LENGTH LOCCountDir: 4
RUNINGPART:LOCCountDir  INPART:True
BLANK LINE 14     

RUNINGPART:LOCCountDir  INPART:True
CODE LINE 80     Parameters

IDENT: 1
PART LENGTH LOCCountDir: 5
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 81     ----------

IDENT: 1
PART LENGTH LOCCountDir: 6
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 82     root : str, path of programs 

IDENT: 1
PART LENGTH LOCCountDir: 7
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 83         search file for counting lines..

IDENT: 2
PART LENGTH LOCCountDir: 8
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 84     extensions : list, List of extensions

IDENT: 1
PART LENGTH LOCCountDir: 9
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 85         Extension to search programs

IDENT: 2
PART LENGTH LOCCountDir: 10
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 86     '''

IDENT: 1
PART LENGTH LOCCountDir: 11
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 87     locate = LocateFiles(root, extensions)

IDENT: 1
PART LENGTH LOCCountDir: 12
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 88     great_total = 0

IDENT: 1
PART LENGTH LOCCountDir: 13
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 89     while True:

IDENT: 1
PART LENGTH LOCCountDir: 14
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 90         try:

IDENT: 2
PART LENGTH LOCCountDir: 15
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 91             file_to_count = locate.next()

IDENT: 3
PART LENGTH LOCCountDir: 16
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 92             log.info("Counting File: %s" % file_to_count)

IDENT: 3
PART LENGTH LOCCountDir: 17
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 93             (code_lines, parts, total_lines, blank_lines, comment_lines)=LOCCountFile(file_to_count)

IDENT: 3
PART LENGTH LOCCountDir: 18
RUNINGPART:LOCCountDir  INPART:True
COMENT LINE 21             #print "===================================================================="

RUNINGPART:LOCCountDir  INPART:True
CODE LINE 94             print string.expandtabs("\t%s" % file_to_count.split("/")[-1],16)

IDENT: 3
PART LENGTH LOCCountDir: 19
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 95             FormatOutput(code_lines, parts, total_lines, blank_lines, comment_lines)

IDENT: 3
PART LENGTH LOCCountDir: 20
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 96             great_total+=code_lines

IDENT: 3
PART LENGTH LOCCountDir: 21
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 97         except StopIteration:

IDENT: 2
PART LENGTH LOCCountDir: 22
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 98             log.info("Fin De Archivado")

IDENT: 3
PART LENGTH LOCCountDir: 23
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 99             break

IDENT: 3
PART LENGTH LOCCountDir: 24
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 100     print "===================================================================="

IDENT: 1
PART LENGTH LOCCountDir: 25
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 101     print string.expandtabs("TOTAL\t\t\t%s" % great_total,16)

IDENT: 1
PART LENGTH LOCCountDir: 26
RUNINGPART:LOCCountDir  INPART:True
CODE LINE 102     print "===================================================================="

IDENT: 1
PART LENGTH LOCCountDir: 27
RUNINGPART:LOCCountDir  INPART:True
BLANK LINE 15             

RUNINGPART:LOCCountDir  INPART:True
BLANK LINE 16 

RUNINGPART:LOCCountDir  INPART:True
BLANK LINE 17     

RUNINGPART:LOCCountDir  INPART:True
BLANK LINE 18     

RUNINGPART:LOCCountDir  INPART:True
BLANK LINE 19 

RUNINGPART:LOCCountDir  INPART:True
CODE LINE 103 def LOCCountFile(file):

ADDED PART LOCCountFile def LOCCountFile(file):

RUNINGPART:LOCCountFile  INPART:True
CODE LINE 104     '''

IDENT: 1
PART LENGTH LOCCountFile: 2
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 105     Count LOC in File. Follow Python Code Standar.

IDENT: 1
PART LENGTH LOCCountFile: 3
RUNINGPART:LOCCountFile  INPART:True
BLANK LINE 20     

RUNINGPART:LOCCountFile  INPART:True
CODE LINE 106     Parameters

IDENT: 1
PART LENGTH LOCCountFile: 4
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 107     ----------

IDENT: 1
PART LENGTH LOCCountFile: 5
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 108     file : str, path of file 

IDENT: 1
PART LENGTH LOCCountFile: 6
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 109         file for counting lines..

IDENT: 2
PART LENGTH LOCCountFile: 7
RUNINGPART:LOCCountFile  INPART:True
BLANK LINE 21 

RUNINGPART:LOCCountFile  INPART:True
CODE LINE 110     Returns

IDENT: 1
PART LENGTH LOCCountFile: 8
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 111     -------

IDENT: 1
PART LENGTH LOCCountFile: 9
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 112     code_lines: int, 

IDENT: 1
PART LENGTH LOCCountFile: 10
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 113         phisical code lines

IDENT: 2
PART LENGTH LOCCountFile: 11
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 114     parts: dic

IDENT: 1
PART LENGTH LOCCountFile: 12
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 115         Dictoinary of parts

IDENT: 2
PART LENGTH LOCCountFile: 13
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 116     total_lines: int,

IDENT: 1
PART LENGTH LOCCountFile: 14
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 117         Total fo lines.

IDENT: 2
PART LENGTH LOCCountFile: 15
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 118     blank_lines: int,

IDENT: 1
PART LENGTH LOCCountFile: 16
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 119         Blank Lines

IDENT: 2
PART LENGTH LOCCountFile: 17
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 120     comment_lines: int,

IDENT: 1
PART LENGTH LOCCountFile: 18
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 121         Comment lines.

IDENT: 2
PART LENGTH LOCCountFile: 19
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 122     '''

IDENT: 1
PART LENGTH LOCCountFile: 20
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 123     total_lines=0

IDENT: 1
PART LENGTH LOCCountFile: 21
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 124     code_lines=0

IDENT: 1
PART LENGTH LOCCountFile: 22
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 125     blank_lines=0

IDENT: 1
PART LENGTH LOCCountFile: 23
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 126     comment_lines=0

IDENT: 1
PART LENGTH LOCCountFile: 24
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 127     parts = {}

IDENT: 1
PART LENGTH LOCCountFile: 25
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 128     in_part=False

IDENT: 1
PART LENGTH LOCCountFile: 26
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 129     running_part=False

IDENT: 1
PART LENGTH LOCCountFile: 27
RUNINGPART:LOCCountFile  INPART:True
BLANK LINE 22             

RUNINGPART:LOCCountFile  INPART:True
CODE LINE 130     with open(file, 'rb') as code_file:

IDENT: 1
PART LENGTH LOCCountFile: 28
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 131         for line in code_file:

IDENT: 2
PART LENGTH LOCCountFile: 29
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 132             log.debug("RUNINGPART:%s  INPART:%s" % (running_part, in_part))

IDENT: 3
PART LENGTH LOCCountFile: 30
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 133             total_lines+=1

IDENT: 3
PART LENGTH LOCCountFile: 31
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 134             if line.strip().startswith("#"):

IDENT: 3
PART LENGTH LOCCountFile: 32
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 135                 comment_lines+=1

IDENT: 4
PART LENGTH LOCCountFile: 33
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 136                 log.debug("COMENT LINE %s %s" % (comment_lines, line))

IDENT: 4
PART LENGTH LOCCountFile: 34
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 137             elif not line.strip():

IDENT: 3
PART LENGTH LOCCountFile: 35
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 138                 blank_lines+=1

IDENT: 4
PART LENGTH LOCCountFile: 36
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 139                 log.debug("BLANK LINE %s %s" % (blank_lines, line))

IDENT: 4
PART LENGTH LOCCountFile: 37
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 140             else:

IDENT: 3
PART LENGTH LOCCountFile: 38
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 141                 code_lines+=1

IDENT: 4
PART LENGTH LOCCountFile: 39
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 142                 log.debug("CODE LINE %s %s" % (code_lines, line))

IDENT: 4
PART LENGTH LOCCountFile: 40
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 143                 running_item=Item(line, total_lines)

IDENT: 4
PART LENGTH LOCCountFile: 41
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 144                 if running_item.is_a_part:

IDENT: 4
PART LENGTH LOCCountFile: 42
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 145                     if running_item.ident_level==0:

IDENT: 5
PART LENGTH LOCCountFile: 43
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 146                         '''Is a Part'''

IDENT: 6
PART LENGTH LOCCountFile: 44
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 147                         parts[running_item.name]=running_item

IDENT: 6
PART LENGTH LOCCountFile: 45
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 148                         running_part=running_item.name

IDENT: 6
PART LENGTH LOCCountFile: 46
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 149                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCountFile: 47
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 150                         in_part=True

IDENT: 6
PART LENGTH LOCCountFile: 48
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 151                         logpart=logging.getLogger('LOC.%s' % running_part)

IDENT: 6
PART LENGTH LOCCountFile: 49
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 152                         log.debug("ADDED PART %s %s" % (running_item.name, 

IDENT: 6
PART LENGTH LOCCountFile: 50
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 153                                                                         line))

IDENT: 18
PART LENGTH LOCCountFile: 51
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 154                     elif running_item.ident_level==1:

IDENT: 5
PART LENGTH LOCCountFile: 52
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 155                         parts[running_part].sub_items[running_item.name]=running_item

IDENT: 6
PART LENGTH LOCCountFile: 53
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 156                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCountFile: 54
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 157                         logpart.debug("IN PART %s  ADD ITEM %s: %s" % (running_part, 

IDENT: 6
PART LENGTH LOCCountFile: 55
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 158                                                     running_item.name, line))

IDENT: 13
PART LENGTH LOCCountFile: 56
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 159                     else:

IDENT: 5
PART LENGTH LOCCountFile: 57
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 160                         parts[running_part].length+=1

IDENT: 6
PART LENGTH LOCCountFile: 58
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 161                         logpart.debug("PART LENGTH %s: %s %s" % (running_part, 

IDENT: 6
PART LENGTH LOCCountFile: 59
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 162                                             parts[running_part].length, line))

IDENT: 11
PART LENGTH LOCCountFile: 60
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 163                 else:

IDENT: 4
PART LENGTH LOCCountFile: 61
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 164                     if in_part:

IDENT: 5
PART LENGTH LOCCountFile: 62
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 165                         logpart.debug("IDENT: %s" % running_item.ident_level)

IDENT: 6
PART LENGTH LOCCountFile: 63
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 166                         if running_item.ident_level>0:

IDENT: 6
PART LENGTH LOCCountFile: 64
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 167                             parts[running_part].length+=1

IDENT: 7
PART LENGTH LOCCountFile: 65
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 168                             logpart.debug("PART LENGTH %s: %s" % (running_part, 

IDENT: 7
PART LENGTH LOCCountFile: 66
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 169                                             parts[running_part].length))

IDENT: 11
PART LENGTH LOCCountFile: 67
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 170                         else:

IDENT: 6
PART LENGTH LOCCountFile: 68
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 171                             parts[running_part].end_line=total_lines

IDENT: 7
PART LENGTH LOCCountFile: 69
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 172                             in_part=False

IDENT: 7
PART LENGTH LOCCountFile: 70
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 173                             del running_item

IDENT: 7
PART LENGTH LOCCountFile: 71
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 174     log.debug("===TOTAL===\n CODE LINES:%s\n PARTS:%s \n TOTAL LINES:%s \n "

IDENT: 1
PART LENGTH LOCCountFile: 72
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 175               "BLANK LINE:%s \n COMMEN_LINES:%s" % 

IDENT: 3
PART LENGTH LOCCountFile: 73
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 176               (code_lines, parts, total_lines, blank_lines, comment_lines))

IDENT: 3
PART LENGTH LOCCountFile: 74
RUNINGPART:LOCCountFile  INPART:True
CODE LINE 177     return (code_lines, parts, total_lines, blank_lines, comment_lines)

IDENT: 1
PART LENGTH LOCCountFile: 75
RUNINGPART:LOCCountFile  INPART:True
BLANK LINE 23 

RUNINGPART:LOCCountFile  INPART:True
CODE LINE 178 def FormatOutput(code_lines, parts, total_lines=0, blank_lines=0, comment_lines=0):

ADDED PART FormatOutput def FormatOutput(code_lines, parts, total_lines=0, blank_lines=0, comment_lines=0):

RUNINGPART:FormatOutput  INPART:True
CODE LINE 179     '''

IDENT: 1
PART LENGTH FormatOutput: 2
RUNINGPART:FormatOutput  INPART:True
CODE LINE 180     OutPut whit the optimal Format.

IDENT: 1
PART LENGTH FormatOutput: 3
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 24     

RUNINGPART:FormatOutput  INPART:True
CODE LINE 181     Parameters

IDENT: 1
PART LENGTH FormatOutput: 4
RUNINGPART:FormatOutput  INPART:True
CODE LINE 182     -------

IDENT: 1
PART LENGTH FormatOutput: 5
RUNINGPART:FormatOutput  INPART:True
CODE LINE 183     code_lines: int, 

IDENT: 1
PART LENGTH FormatOutput: 6
RUNINGPART:FormatOutput  INPART:True
CODE LINE 184         phisical code lines

IDENT: 2
PART LENGTH FormatOutput: 7
RUNINGPART:FormatOutput  INPART:True
CODE LINE 185     parts: dic

IDENT: 1
PART LENGTH FormatOutput: 8
RUNINGPART:FormatOutput  INPART:True
CODE LINE 186         Dictoinary of parts

IDENT: 2
PART LENGTH FormatOutput: 9
RUNINGPART:FormatOutput  INPART:True
CODE LINE 187     total_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 10
RUNINGPART:FormatOutput  INPART:True
CODE LINE 188         Total fo lines.

IDENT: 2
PART LENGTH FormatOutput: 11
RUNINGPART:FormatOutput  INPART:True
CODE LINE 189     blank_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 12
RUNINGPART:FormatOutput  INPART:True
CODE LINE 190         Blank Lines

IDENT: 2
PART LENGTH FormatOutput: 13
RUNINGPART:FormatOutput  INPART:True
CODE LINE 191     comment_lines: int,

IDENT: 1
PART LENGTH FormatOutput: 14
RUNINGPART:FormatOutput  INPART:True
CODE LINE 192         Comment lines.

IDENT: 2
PART LENGTH FormatOutput: 15
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 25     

RUNINGPART:FormatOutput  INPART:True
CODE LINE 193     '''

IDENT: 1
PART LENGTH FormatOutput: 16
RUNINGPART:FormatOutput  INPART:True
CODE LINE 194     print "===================================================================="

IDENT: 1
PART LENGTH FormatOutput: 17
RUNINGPART:FormatOutput  INPART:True
CODE LINE 195     print string.expandtabs("Part Name\tN of Items\tPart Size\tTotal",16)

IDENT: 1
PART LENGTH FormatOutput: 18
RUNINGPART:FormatOutput  INPART:True
CODE LINE 196     print "===================================================================="

IDENT: 1
PART LENGTH FormatOutput: 19
RUNINGPART:FormatOutput  INPART:True
CODE LINE 197     for part in parts:

IDENT: 1
PART LENGTH FormatOutput: 20
RUNINGPART:FormatOutput  INPART:True
CODE LINE 198         if len(parts[part].sub_items.keys())==0:

IDENT: 2
PART LENGTH FormatOutput: 21
RUNINGPART:FormatOutput  INPART:True
CODE LINE 199             parts[part].sub_items[None]=None

IDENT: 3
PART LENGTH FormatOutput: 22
RUNINGPART:FormatOutput  INPART:True
CODE LINE 200         print string.expandtabs("%s\t%s\t%s" % (parts[part].name, 

IDENT: 2
PART LENGTH FormatOutput: 23
RUNINGPART:FormatOutput  INPART:True
CODE LINE 201                     len(parts[part].sub_items.keys()), parts[part].length),16)

IDENT: 5
PART LENGTH FormatOutput: 24
RUNINGPART:FormatOutput  INPART:True
CODE LINE 202     print string.expandtabs("\t\t\t%s" % code_lines,16)

IDENT: 1
PART LENGTH FormatOutput: 25
RUNINGPART:FormatOutput  INPART:True
BLANK LINE 26 

RUNINGPART:FormatOutput  INPART:True
BLANK LINE 27 

RUNINGPART:FormatOutput  INPART:True
CODE LINE 203 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 204     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 205     uso = "modo de uso: %prog [options]"

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 206     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 207     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 208                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 209     parser.add_option("-D", "--dir", dest="dir",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 210                   help="process dir [DIR]", metavar="Directory")

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 211     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 212     log.info("START COUNTING")              #Start Program

IDENT: 4
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 213     if options.dir:

IDENT: 1
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 214         LOCCountDir(options.dir)

IDENT: 2
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 215     elif options.file:

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 216         (code_lines, parts, total_lines, blank_lines, comment_lines)=LOCCountFile(options.file)

IDENT: 2
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 217         FormatOutput(code_lines, parts, total_lines, blank_lines, comment_lines)

IDENT: 2
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 218     else:

IDENT: 1
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 219         parser.error("please define File,  %prog -F example.py\n Please use -h for help")

IDENT: 2
PART LENGTH main: 17
RUNINGPART:main  INPART:True
BLANK LINE 28 

RUNINGPART:main  INPART:True
CODE LINE 220 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 221     main()

===TOTAL===
 CODE LINES:221
 PARTS:{'LocateFiles': <pyloc.Item object at 0xbbcf50>, 'Item': <pyloc.Item object at 0xbbce90>, 'FormatOutput': <pyloc.Item object at 0xbc3210>, 'LOCCountDir': <pyloc.Item object at 0xbc3050>, 'main': <pyloc.Item object at 0xbc3250>, 'LOCCountFile': <pyloc.Item object at 0xbc3150>} 
 TOTAL LINES:270 
 BLANK LINE:28 
 COMMEN_LINES:21
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament2/test_pyloc.py
RUNINGPART:False  INPART:False
CODE LINE 1 import unittest

RUNINGPART:False  INPART:False
CODE LINE 2 from pyloc import LOCCountDir

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
CODE LINE 3 class TestAssignamentDos(unittest.TestCase):

ADDED PART TestAssignamentDos class TestAssignamentDos(unittest.TestCase):

RUNINGPART:TestAssignamentDos  INPART:True
CODE LINE 4     def test_CountUno(self):

IN PART TestAssignamentDos  ADD ITEM test_CountUno:     def test_CountUno(self):

RUNINGPART:TestAssignamentDos  INPART:True
CODE LINE 5         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignamentDos: 3
RUNINGPART:TestAssignamentDos  INPART:True
CODE LINE 6         LOCCountDir('../assignament1/')

IDENT: 2
PART LENGTH TestAssignamentDos: 4
RUNINGPART:TestAssignamentDos  INPART:True
CODE LINE 7     def test_CountDos(self):

IN PART TestAssignamentDos  ADD ITEM test_CountDos:     def test_CountDos(self):

RUNINGPART:TestAssignamentDos  INPART:True
CODE LINE 8         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignamentDos: 6
RUNINGPART:TestAssignamentDos  INPART:True
CODE LINE 9         LOCCountDir('../assignament2/')

IDENT: 2
PART LENGTH TestAssignamentDos: 7
RUNINGPART:TestAssignamentDos  INPART:True
BLANK LINE 2 

RUNINGPART:TestAssignamentDos  INPART:True
CODE LINE 10 if __name__ == '__main__':

IDENT: 0
RUNINGPART:TestAssignamentDos  INPART:False
CODE LINE 11     unittest.main()
===TOTAL===
 CODE LINES:11
 PARTS:{'TestAssignamentDos': <pyloc.Item object at 0xbc31d0>} 
 TOTAL LINES:13 
 BLANK LINE:2 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament2/__init__.py
===TOTAL===
 CODE LINES:0
 PARTS:{} 
 TOTAL LINES:0 
 BLANK LINE:0 
 COMMEN_LINES:0
Fin De Archivado
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/test_mean_std.py
RUNINGPART:False  INPART:False
CODE LINE 1 import unittest

RUNINGPART:False  INPART:False
CODE LINE 2 from mean_std import Mean, Std, LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
CODE LINE 3 class TestAssignament(unittest.TestCase):

ADDED PART TestAssignament class TestAssignament(unittest.TestCase):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 4     def test_estimate_proxy_size(self):

IN PART TestAssignament  ADD ITEM test_estimate_proxy_size:     def test_estimate_proxy_size(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 5         a=LinkedList([160,591,114,229,230,270,128,1657,624,1503])

IDENT: 2
PART LENGTH TestAssignament: 3
RUNINGPART:TestAssignament  INPART:True
CODE LINE 6         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 4
RUNINGPART:TestAssignament  INPART:True
CODE LINE 7         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 5
RUNINGPART:TestAssignament  INPART:True
CODE LINE 8         print a

IDENT: 2
PART LENGTH TestAssignament: 6
RUNINGPART:TestAssignament  INPART:True
CODE LINE 9         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 7
RUNINGPART:TestAssignament  INPART:True
CODE LINE 10         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 8
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 2     

RUNINGPART:TestAssignament  INPART:True
CODE LINE 11     def test_development_hours(self):

IN PART TestAssignament  ADD ITEM test_development_hours:     def test_development_hours(self):

RUNINGPART:TestAssignament  INPART:True
CODE LINE 12         print "---------------------------------------"

IDENT: 2
PART LENGTH TestAssignament: 10
RUNINGPART:TestAssignament  INPART:True
CODE LINE 13         print "In method", self._testMethodName

IDENT: 2
PART LENGTH TestAssignament: 11
RUNINGPART:TestAssignament  INPART:True
CODE LINE 14         a=LinkedList([15.0,69.9,6.5,22.4,28.4,65.9,19.4,198.7,38.8,138.2])

IDENT: 2
PART LENGTH TestAssignament: 12
RUNINGPART:TestAssignament  INPART:True
CODE LINE 15         print a

IDENT: 2
PART LENGTH TestAssignament: 13
RUNINGPART:TestAssignament  INPART:True
CODE LINE 16         print("%.2f" % Mean(a))

IDENT: 2
PART LENGTH TestAssignament: 14
RUNINGPART:TestAssignament  INPART:True
CODE LINE 17         print("%.2f" % Std(a))

IDENT: 2
PART LENGTH TestAssignament: 15
RUNINGPART:TestAssignament  INPART:True
BLANK LINE 3 

RUNINGPART:TestAssignament  INPART:True
CODE LINE 18 if __name__ == '__main__':

IDENT: 0
RUNINGPART:TestAssignament  INPART:False
CODE LINE 19     unittest.main()
===TOTAL===
 CODE LINES:19
 PARTS:{'TestAssignament': <pyloc.Item object at 0xbbce90>} 
 TOTAL LINES:22 
 BLANK LINE:3 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/mean_std.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.2"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import os

RUNINGPART:False  INPART:False
CODE LINE 7 import logging

RUNINGPART:False  INPART:False
CODE LINE 8 from optparse import OptionParser

RUNINGPART:False  INPART:False
CODE LINE 9 import csv

RUNINGPART:False  INPART:False
CODE LINE 10 from math import sqrt, fsum

RUNINGPART:False  INPART:False
CODE LINE 11 from LinkedList import LinkedList

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 12 logging.basicConfig(level=logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 13 LOG_FILENAME = 'assignament1.log'

RUNINGPART:False  INPART:False
CODE LINE 14 log = logging.getLogger('MEAN_STD')

RUNINGPART:False  INPART:False
CODE LINE 15 handler = logging.FileHandler(LOG_FILENAME)

RUNINGPART:False  INPART:False
CODE LINE 16 handler.setLevel(logging.DEBUG)

RUNINGPART:False  INPART:False
CODE LINE 17 log.addHandler(handler)

RUNINGPART:False  INPART:False
BLANK LINE 5 

RUNINGPART:False  INPART:False
CODE LINE 18 def Mean(dataset):

ADDED PART Mean def Mean(dataset):

RUNINGPART:Mean  INPART:True
CODE LINE 19     '''

IDENT: 1
PART LENGTH Mean: 2
RUNINGPART:Mean  INPART:True
CODE LINE 20     Calculate Mean from dataset

IDENT: 1
PART LENGTH Mean: 3
RUNINGPART:Mean  INPART:True
CODE LINE 21     '''

IDENT: 1
PART LENGTH Mean: 4
RUNINGPART:Mean  INPART:True
CODE LINE 22     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Mean: 5
RUNINGPART:Mean  INPART:True
CODE LINE 23     Length=len(dataset)

IDENT: 1
PART LENGTH Mean: 6
RUNINGPART:Mean  INPART:True
CODE LINE 24     Mean=Summatory/Length

IDENT: 1
PART LENGTH Mean: 7
RUNINGPART:Mean  INPART:True
CODE LINE 25     log.info("The Mean of dataset is %s" % Mean)

IDENT: 1
PART LENGTH Mean: 8
RUNINGPART:Mean  INPART:True
CODE LINE 26     return Mean

IDENT: 1
PART LENGTH Mean: 9
RUNINGPART:Mean  INPART:True
BLANK LINE 6 

RUNINGPART:Mean  INPART:True
CODE LINE 27 def Std(dataset):

ADDED PART Std def Std(dataset):

RUNINGPART:Std  INPART:True
CODE LINE 28     '''

IDENT: 1
PART LENGTH Std: 2
RUNINGPART:Std  INPART:True
CODE LINE 29     Calculate Standar deviation from dataset

IDENT: 1
PART LENGTH Std: 3
RUNINGPART:Std  INPART:True
CODE LINE 30     '''

IDENT: 1
PART LENGTH Std: 4
RUNINGPART:Std  INPART:True
CODE LINE 31     Summatory=fsum(dataset)

IDENT: 1
PART LENGTH Std: 5
RUNINGPART:Std  INPART:True
CODE LINE 32     LengthMinusOne=len(dataset)-1

IDENT: 1
PART LENGTH Std: 6
RUNINGPART:Std  INPART:True
CODE LINE 33     CurrentMean=Mean(dataset)

IDENT: 1
PART LENGTH Std: 7
RUNINGPART:Std  INPART:True
CODE LINE 34     Std=sqrt(sum([(data - CurrentMean)**2 for data in dataset]) / LengthMinusOne)

IDENT: 1
PART LENGTH Std: 8
RUNINGPART:Std  INPART:True
CODE LINE 35     log.info("The Std of dataset is %s" % Std)

IDENT: 1
PART LENGTH Std: 9
RUNINGPART:Std  INPART:True
CODE LINE 36     return Std

IDENT: 1
PART LENGTH Std: 10
RUNINGPART:Std  INPART:True
BLANK LINE 7 

RUNINGPART:Std  INPART:True
CODE LINE 37 def read_file(file):

ADDED PART read_file def read_file(file):

RUNINGPART:read_file  INPART:True
CODE LINE 38     '''

IDENT: 1
PART LENGTH read_file: 2
RUNINGPART:read_file  INPART:True
CODE LINE 39     Read CSV File, Important Only Read column 1

IDENT: 1
PART LENGTH read_file: 3
RUNINGPART:read_file  INPART:True
BLANK LINE 8     

RUNINGPART:read_file  INPART:True
CODE LINE 40     :param file: path for file to read 

IDENT: 1
PART LENGTH read_file: 4
RUNINGPART:read_file  INPART:True
CODE LINE 41     :returns dataset: LinkedLink dataset

IDENT: 1
PART LENGTH read_file: 5
RUNINGPART:read_file  INPART:True
CODE LINE 42     '''

IDENT: 1
PART LENGTH read_file: 6
RUNINGPART:read_file  INPART:True
CODE LINE 43     with open(file, 'rb') as csvfile:

IDENT: 1
PART LENGTH read_file: 7
RUNINGPART:read_file  INPART:True
COMENT LINE 21         #dialect = csv.Sniffer().sniff(csvfile.read(1024))

RUNINGPART:read_file  INPART:True
COMENT LINE 22         #csvfile.seek(0)

RUNINGPART:read_file  INPART:True
CODE LINE 44         reader = csv.reader(csvfile)

IDENT: 2
PART LENGTH read_file: 8
RUNINGPART:read_file  INPART:True
CODE LINE 45         dataset=LinkedList()

IDENT: 2
PART LENGTH read_file: 9
RUNINGPART:read_file  INPART:True
CODE LINE 46         for row in reader:

IDENT: 2
PART LENGTH read_file: 10
RUNINGPART:read_file  INPART:True
CODE LINE 47                 if len(row) >= 1:

IDENT: 4
PART LENGTH read_file: 11
RUNINGPART:read_file  INPART:True
CODE LINE 48                     try:

IDENT: 5
PART LENGTH read_file: 12
RUNINGPART:read_file  INPART:True
CODE LINE 49                         dataset.add(float(row[0]))

IDENT: 6
PART LENGTH read_file: 13
RUNINGPART:read_file  INPART:True
CODE LINE 50                     except ValueError:

IDENT: 5
PART LENGTH read_file: 14
RUNINGPART:read_file  INPART:True
CODE LINE 51                         log.warning("%s Is not a float" % row[0])

IDENT: 6
PART LENGTH read_file: 15
RUNINGPART:read_file  INPART:True
CODE LINE 52                 else:

IDENT: 4
PART LENGTH read_file: 16
RUNINGPART:read_file  INPART:True
CODE LINE 53                     log.warning("Empty Row")

IDENT: 5
PART LENGTH read_file: 17
RUNINGPART:read_file  INPART:True
CODE LINE 54         return dataset

IDENT: 2
PART LENGTH read_file: 18
RUNINGPART:read_file  INPART:True
BLANK LINE 9 

RUNINGPART:read_file  INPART:True
BLANK LINE 10 

RUNINGPART:read_file  INPART:True
CODE LINE 55 def main():

ADDED PART main def main():

RUNINGPART:main  INPART:True
CODE LINE 56     '''Unix parsing command-line options'''

IDENT: 1
PART LENGTH main: 2
RUNINGPART:main  INPART:True
CODE LINE 57     uso = "modo de uso: %prog [options] "

IDENT: 1
PART LENGTH main: 3
RUNINGPART:main  INPART:True
CODE LINE 58     parser = OptionParser(uso)

IDENT: 1
PART LENGTH main: 4
RUNINGPART:main  INPART:True
CODE LINE 59     parser.add_option("-F", "--file", dest="file",

IDENT: 1
PART LENGTH main: 5
RUNINGPART:main  INPART:True
CODE LINE 60                   help="process file [file]", metavar="file")

IDENT: 4
PART LENGTH main: 6
RUNINGPART:main  INPART:True
CODE LINE 61     parser.add_option("-s", "--standar-deviation", dest="std",

IDENT: 1
PART LENGTH main: 7
RUNINGPART:main  INPART:True
CODE LINE 62                   help="Calculate Standar deviation from dataset [file].csv", 

IDENT: 4
PART LENGTH main: 8
RUNINGPART:main  INPART:True
CODE LINE 63                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 9
RUNINGPART:main  INPART:True
CODE LINE 64     parser.add_option("-m", "--mean", dest="mean",

IDENT: 1
PART LENGTH main: 10
RUNINGPART:main  INPART:True
CODE LINE 65                   help="Calculate Mean from dataset [file]", 

IDENT: 4
PART LENGTH main: 11
RUNINGPART:main  INPART:True
CODE LINE 66                   action="store_true", metavar="file")

IDENT: 4
PART LENGTH main: 12
RUNINGPART:main  INPART:True
CODE LINE 67     (options, args) = parser.parse_args()

IDENT: 1
PART LENGTH main: 13
RUNINGPART:main  INPART:True
CODE LINE 68     log.info("START APP")

IDENT: 1
PART LENGTH main: 14
RUNINGPART:main  INPART:True
CODE LINE 69     if options.file:

IDENT: 1
PART LENGTH main: 15
RUNINGPART:main  INPART:True
CODE LINE 70         if options.std or options.mean:

IDENT: 2
PART LENGTH main: 16
RUNINGPART:main  INPART:True
CODE LINE 71             dataset=read_file(options.file)

IDENT: 3
PART LENGTH main: 17
RUNINGPART:main  INPART:True
CODE LINE 72             if options.std:

IDENT: 3
PART LENGTH main: 18
RUNINGPART:main  INPART:True
CODE LINE 73                 Std(dataset)

IDENT: 4
PART LENGTH main: 19
RUNINGPART:main  INPART:True
CODE LINE 74             if options.mean:

IDENT: 3
PART LENGTH main: 20
RUNINGPART:main  INPART:True
CODE LINE 75                 Mean(dataset)

IDENT: 4
PART LENGTH main: 21
RUNINGPART:main  INPART:True
CODE LINE 76         else:

IDENT: 2
PART LENGTH main: 22
RUNINGPART:main  INPART:True
CODE LINE 77              parser.error("please set calculation,\n Please use -h for help")

IDENT: 3
PART LENGTH main: 23
RUNINGPART:main  INPART:True
CODE LINE 78     else:

IDENT: 1
PART LENGTH main: 24
RUNINGPART:main  INPART:True
CODE LINE 79         parser.error("please define dataset,  %prog -F example.csv\n Please use -h for help")

IDENT: 2
PART LENGTH main: 25
RUNINGPART:main  INPART:True
BLANK LINE 11 

RUNINGPART:main  INPART:True
CODE LINE 80 if __name__=='__main__':

IDENT: 0
RUNINGPART:main  INPART:False
CODE LINE 81     main()

===TOTAL===
 CODE LINES:81
 PARTS:{'Std': <pyloc.Item object at 0xbc3050>, 'main': <pyloc.Item object at 0xbc3450>, 'read_file': <pyloc.Item object at 0xbc3210>, 'Mean': <pyloc.Item object at 0xbc3150>} 
 TOTAL LINES:114 
 BLANK LINE:11 
 COMMEN_LINES:22
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/__init__.py
===TOTAL===
 CODE LINES:0
 PARTS:{} 
 TOTAL LINES:0 
 BLANK LINE:0 
 COMMEN_LINES:0
Counting File: /home/arpagon/Workspace/psp-tsp/assignaments/assignament1/LinkedList.py
RUNINGPART:False  INPART:False
COMENT LINE 1 #!/usr/bin/env python2.6

RUNINGPART:False  INPART:False
COMENT LINE 2 # -*- coding: utf-8 -*-

RUNINGPART:False  INPART:False
COMENT LINE 3 #

RUNINGPART:False  INPART:False
COMENT LINE 4 #       mean_std.py

RUNINGPART:False  INPART:False
COMENT LINE 5 #       Copyright 2010 arpagon <arpagon@gmail.com.co>

RUNINGPART:False  INPART:False
COMENT LINE 6 #       

RUNINGPART:False  INPART:False
COMENT LINE 7 #       This program is free software; you can redistribute it and/or modify

RUNINGPART:False  INPART:False
COMENT LINE 8 #       it under the terms of the GNU General Public License as published by

RUNINGPART:False  INPART:False
COMENT LINE 9 #       the Free Software Foundation; either version 2 of the License, or

RUNINGPART:False  INPART:False
COMENT LINE 10 #       (at your option) any later version.

RUNINGPART:False  INPART:False
COMENT LINE 11 #       

RUNINGPART:False  INPART:False
COMENT LINE 12 #       This program is distributed in the hope that it will be useful,

RUNINGPART:False  INPART:False
COMENT LINE 13 #       but WITHOUT ANY WARRANTY; without even the implied warranty of

RUNINGPART:False  INPART:False
COMENT LINE 14 #       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

RUNINGPART:False  INPART:False
COMENT LINE 15 #       GNU General Public License for more details.

RUNINGPART:False  INPART:False
COMENT LINE 16 #       

RUNINGPART:False  INPART:False
COMENT LINE 17 #       You should have received a copy of the GNU General Public License

RUNINGPART:False  INPART:False
COMENT LINE 18 #       along with this program; if not, write to the Free Software

RUNINGPART:False  INPART:False
COMENT LINE 19 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,

RUNINGPART:False  INPART:False
COMENT LINE 20 #       MA 02110-1301, USA.

RUNINGPART:False  INPART:False
BLANK LINE 1 

RUNINGPART:False  INPART:False
BLANK LINE 2 

RUNINGPART:False  INPART:False
CODE LINE 1 __version__ = "0.0.1"

RUNINGPART:False  INPART:False
CODE LINE 2 __license__ = """The GNU General Public License (GPL-2.0)"""

RUNINGPART:False  INPART:False
CODE LINE 3 __author__ = "Sebastian Rojo <http://www.sapian.com.co> arpagon@gamil.com"

RUNINGPART:False  INPART:False
CODE LINE 4 __contributors__ = []

RUNINGPART:False  INPART:False
CODE LINE 5 _debug = 0

RUNINGPART:False  INPART:False
BLANK LINE 3 

RUNINGPART:False  INPART:False
CODE LINE 6 import collections

RUNINGPART:False  INPART:False
CODE LINE 7 from weakref import proxy

RUNINGPART:False  INPART:False
BLANK LINE 4 

RUNINGPART:False  INPART:False
CODE LINE 8 class Link(object):

ADDED PART Link class Link(object):

RUNINGPART:Link  INPART:True
CODE LINE 9     '''

IDENT: 1
PART LENGTH Link: 2
RUNINGPART:Link  INPART:True
CODE LINE 10     The proper use of __slots__ is to save space in objects.

IDENT: 1
PART LENGTH Link: 3
RUNINGPART:Link  INPART:True
CODE LINE 11     '''

IDENT: 1
PART LENGTH Link: 4
RUNINGPART:Link  INPART:True
CODE LINE 12     __slots__ = 'prev', 'next', 'key', '__weakref__'

IDENT: 1
PART LENGTH Link: 5
RUNINGPART:Link  INPART:True
BLANK LINE 5 

RUNINGPART:Link  INPART:True
CODE LINE 13 class LinkedList(collections.MutableSet):

ADDED PART LinkedList class LinkedList(collections.MutableSet):

RUNINGPART:LinkedList  INPART:True
CODE LINE 14     '''

IDENT: 1
PART LENGTH LinkedList: 2
RUNINGPART:LinkedList  INPART:True
CODE LINE 15     LinkedLink

IDENT: 1
PART LENGTH LinkedList: 3
RUNINGPART:LinkedList  INPART:True
CODE LINE 16     Set the remembers the order elements were added

IDENT: 1
PART LENGTH LinkedList: 4
RUNINGPART:LinkedList  INPART:True
CODE LINE 17     '''

IDENT: 1
PART LENGTH LinkedList: 5
RUNINGPART:LinkedList  INPART:True
BLANK LINE 6 

RUNINGPART:LinkedList  INPART:True
CODE LINE 18     def __init__(self, iterable=None):

IN PART LinkedList  ADD ITEM __init__:     def __init__(self, iterable=None):

RUNINGPART:LinkedList  INPART:True
CODE LINE 19         '''

IDENT: 2
PART LENGTH LinkedList: 7
RUNINGPART:LinkedList  INPART:True
CODE LINE 20         Init

IDENT: 2
PART LENGTH LinkedList: 8
RUNINGPART:LinkedList  INPART:True
CODE LINE 21         '''

IDENT: 2
PART LENGTH LinkedList: 9
RUNINGPART:LinkedList  INPART:True
CODE LINE 22         self.__root = root = Link()         

IDENT: 2
PART LENGTH LinkedList: 10
RUNINGPART:LinkedList  INPART:True
CODE LINE 23         root.prev = root.next = root

IDENT: 2
PART LENGTH LinkedList: 11
RUNINGPART:LinkedList  INPART:True
CODE LINE 24         self.__map = {}                     # key --> link

IDENT: 7
PART LENGTH LinkedList: 12
RUNINGPART:LinkedList  INPART:True
CODE LINE 25         if iterable is not None:

IDENT: 2
PART LENGTH LinkedList: 13
RUNINGPART:LinkedList  INPART:True
CODE LINE 26             self |= iterable

IDENT: 3
PART LENGTH LinkedList: 14
RUNINGPART:LinkedList  INPART:True
BLANK LINE 7 

RUNINGPART:LinkedList  INPART:True
CODE LINE 27     def __len__(self):

IN PART LinkedList  ADD ITEM __len__:     def __len__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 28         '''

IDENT: 2
PART LENGTH LinkedList: 16
RUNINGPART:LinkedList  INPART:True
CODE LINE 29         Length for the LinkedList

IDENT: 2
PART LENGTH LinkedList: 17
RUNINGPART:LinkedList  INPART:True
CODE LINE 30         '''

IDENT: 2
PART LENGTH LinkedList: 18
RUNINGPART:LinkedList  INPART:True
CODE LINE 31         return len(self.__map)

IDENT: 2
PART LENGTH LinkedList: 19
RUNINGPART:LinkedList  INPART:True
BLANK LINE 8 

RUNINGPART:LinkedList  INPART:True
CODE LINE 32     def __contains__(self, key):

IN PART LinkedList  ADD ITEM __contains__:     def __contains__(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 33         '''

IDENT: 2
PART LENGTH LinkedList: 21
RUNINGPART:LinkedList  INPART:True
CODE LINE 34         Return Content of LinkedList

IDENT: 2
PART LENGTH LinkedList: 22
RUNINGPART:LinkedList  INPART:True
CODE LINE 35         '''

IDENT: 2
PART LENGTH LinkedList: 23
RUNINGPART:LinkedList  INPART:True
CODE LINE 36         return key in self.__map

IDENT: 2
PART LENGTH LinkedList: 24
RUNINGPART:LinkedList  INPART:True
BLANK LINE 9 

RUNINGPART:LinkedList  INPART:True
CODE LINE 37     def add(self, key):

IN PART LinkedList  ADD ITEM add:     def add(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 38         '''

IDENT: 2
PART LENGTH LinkedList: 26
RUNINGPART:LinkedList  INPART:True
CODE LINE 39         Add Node

IDENT: 2
PART LENGTH LinkedList: 27
RUNINGPART:LinkedList  INPART:True
CODE LINE 40         Store new key in a new link at the end of the linked list

IDENT: 2
PART LENGTH LinkedList: 28
RUNINGPART:LinkedList  INPART:True
CODE LINE 41         '''

IDENT: 2
PART LENGTH LinkedList: 29
RUNINGPART:LinkedList  INPART:True
CODE LINE 42         if key not in self.__map:

IDENT: 2
PART LENGTH LinkedList: 30
RUNINGPART:LinkedList  INPART:True
CODE LINE 43             '''

IDENT: 3
PART LENGTH LinkedList: 31
RUNINGPART:LinkedList  INPART:True
CODE LINE 44             Not Element Eq in the list

IDENT: 3
PART LENGTH LinkedList: 32
RUNINGPART:LinkedList  INPART:True
CODE LINE 45             '''

IDENT: 3
PART LENGTH LinkedList: 33
RUNINGPART:LinkedList  INPART:True
CODE LINE 46             self.__map[key] = link = Link()            

IDENT: 3
PART LENGTH LinkedList: 34
RUNINGPART:LinkedList  INPART:True
CODE LINE 47             root = self.__root

IDENT: 3
PART LENGTH LinkedList: 35
RUNINGPART:LinkedList  INPART:True
CODE LINE 48             last = root.prev

IDENT: 3
PART LENGTH LinkedList: 36
RUNINGPART:LinkedList  INPART:True
CODE LINE 49             link.prev, link.next, link.key = last, root, key

IDENT: 3
PART LENGTH LinkedList: 37
RUNINGPART:LinkedList  INPART:True
CODE LINE 50             last.next = root.prev = proxy(link)

IDENT: 3
PART LENGTH LinkedList: 38
RUNINGPART:LinkedList  INPART:True
BLANK LINE 10     

RUNINGPART:LinkedList  INPART:True
CODE LINE 51     def head(self):

IN PART LinkedList  ADD ITEM head:     def head(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 52         '''

IDENT: 2
PART LENGTH LinkedList: 40
RUNINGPART:LinkedList  INPART:True
CODE LINE 53         Return Head

IDENT: 2
PART LENGTH LinkedList: 41
RUNINGPART:LinkedList  INPART:True
CODE LINE 54         '''

IDENT: 2
PART LENGTH LinkedList: 42
RUNINGPART:LinkedList  INPART:True
CODE LINE 55         return list(self)[0],list(self)[-1] 

IDENT: 2
PART LENGTH LinkedList: 43
RUNINGPART:LinkedList  INPART:True
BLANK LINE 11         

RUNINGPART:LinkedList  INPART:True
BLANK LINE 12 

RUNINGPART:LinkedList  INPART:True
CODE LINE 56     def discard(self, key):

IN PART LinkedList  ADD ITEM discard:     def discard(self, key):

RUNINGPART:LinkedList  INPART:True
CODE LINE 57         '''

IDENT: 2
PART LENGTH LinkedList: 45
RUNINGPART:LinkedList  INPART:True
CODE LINE 58         Remove an existing item using self.__map to find the link which is

IDENT: 2
PART LENGTH LinkedList: 46
RUNINGPART:LinkedList  INPART:True
CODE LINE 59         then removed by updating the links in the predecessor and successors.

IDENT: 2
PART LENGTH LinkedList: 47
RUNINGPART:LinkedList  INPART:True
CODE LINE 60         '''

IDENT: 2
PART LENGTH LinkedList: 48
RUNINGPART:LinkedList  INPART:True
CODE LINE 61         if key in self.__map:

IDENT: 2
PART LENGTH LinkedList: 49
RUNINGPART:LinkedList  INPART:True
CODE LINE 62             link = self.__map.pop(key)

IDENT: 3
PART LENGTH LinkedList: 50
RUNINGPART:LinkedList  INPART:True
CODE LINE 63             link.prev.next = link.next

IDENT: 3
PART LENGTH LinkedList: 51
RUNINGPART:LinkedList  INPART:True
CODE LINE 64             link.next.prev = link.prev

IDENT: 3
PART LENGTH LinkedList: 52
RUNINGPART:LinkedList  INPART:True
BLANK LINE 13 

RUNINGPART:LinkedList  INPART:True
CODE LINE 65     def __iter__(self):

IN PART LinkedList  ADD ITEM __iter__:     def __iter__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 66         '''

IDENT: 2
PART LENGTH LinkedList: 54
RUNINGPART:LinkedList  INPART:True
CODE LINE 67         iteration for the Next Method

IDENT: 2
PART LENGTH LinkedList: 55
RUNINGPART:LinkedList  INPART:True
CODE LINE 68         '''

IDENT: 2
PART LENGTH LinkedList: 56
RUNINGPART:LinkedList  INPART:True
CODE LINE 69         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 57
RUNINGPART:LinkedList  INPART:True
CODE LINE 70         curr = root.next

IDENT: 2
PART LENGTH LinkedList: 58
RUNINGPART:LinkedList  INPART:True
CODE LINE 71         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 59
RUNINGPART:LinkedList  INPART:True
CODE LINE 72             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 60
RUNINGPART:LinkedList  INPART:True
CODE LINE 73             curr = curr.next

IDENT: 3
PART LENGTH LinkedList: 61
RUNINGPART:LinkedList  INPART:True
BLANK LINE 14 

RUNINGPART:LinkedList  INPART:True
CODE LINE 74     def __reversed__(self):

IN PART LinkedList  ADD ITEM __reversed__:     def __reversed__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 75         '''

IDENT: 2
PART LENGTH LinkedList: 63
RUNINGPART:LinkedList  INPART:True
CODE LINE 76         iteration in reverse mode Method

IDENT: 2
PART LENGTH LinkedList: 64
RUNINGPART:LinkedList  INPART:True
CODE LINE 77         '''

IDENT: 2
PART LENGTH LinkedList: 65
RUNINGPART:LinkedList  INPART:True
CODE LINE 78         root = self.__root

IDENT: 2
PART LENGTH LinkedList: 66
RUNINGPART:LinkedList  INPART:True
CODE LINE 79         curr = root.prev

IDENT: 2
PART LENGTH LinkedList: 67
RUNINGPART:LinkedList  INPART:True
CODE LINE 80         while curr is not root:

IDENT: 2
PART LENGTH LinkedList: 68
RUNINGPART:LinkedList  INPART:True
CODE LINE 81             yield curr.key

IDENT: 3
PART LENGTH LinkedList: 69
RUNINGPART:LinkedList  INPART:True
CODE LINE 82             curr = curr.prev

IDENT: 3
PART LENGTH LinkedList: 70
RUNINGPART:LinkedList  INPART:True
BLANK LINE 15 

RUNINGPART:LinkedList  INPART:True
CODE LINE 83     def pop(self, last=True):

IN PART LinkedList  ADD ITEM pop:     def pop(self, last=True):

RUNINGPART:LinkedList  INPART:True
CODE LINE 84         '''

IDENT: 2
PART LENGTH LinkedList: 72
RUNINGPART:LinkedList  INPART:True
CODE LINE 85         pop key

IDENT: 2
PART LENGTH LinkedList: 73
RUNINGPART:LinkedList  INPART:True
CODE LINE 86         '''

IDENT: 2
PART LENGTH LinkedList: 74
RUNINGPART:LinkedList  INPART:True
CODE LINE 87         if not self:

IDENT: 2
PART LENGTH LinkedList: 75
RUNINGPART:LinkedList  INPART:True
CODE LINE 88             raise KeyError('set is empty')

IDENT: 3
PART LENGTH LinkedList: 76
RUNINGPART:LinkedList  INPART:True
CODE LINE 89         key = next(reversed(self)) if last else next(iter(self))

IDENT: 2
PART LENGTH LinkedList: 77
RUNINGPART:LinkedList  INPART:True
CODE LINE 90         self.discard(key)

IDENT: 2
PART LENGTH LinkedList: 78
RUNINGPART:LinkedList  INPART:True
CODE LINE 91         return key

IDENT: 2
PART LENGTH LinkedList: 79
RUNINGPART:LinkedList  INPART:True
BLANK LINE 16 

RUNINGPART:LinkedList  INPART:True
CODE LINE 92     def __repr__(self):

IN PART LinkedList  ADD ITEM __repr__:     def __repr__(self):

RUNINGPART:LinkedList  INPART:True
CODE LINE 93         '''

IDENT: 2
PART LENGTH LinkedList: 81
RUNINGPART:LinkedList  INPART:True
CODE LINE 94         String Conversion representation of object LinkeList repr()

IDENT: 2
PART LENGTH LinkedList: 82
RUNINGPART:LinkedList  INPART:True
CODE LINE 95         '''

IDENT: 2
PART LENGTH LinkedList: 83
RUNINGPART:LinkedList  INPART:True
CODE LINE 96         if not self:

IDENT: 2
PART LENGTH LinkedList: 84
RUNINGPART:LinkedList  INPART:True
CODE LINE 97             return '%s()' % (self.__class__.__name__,)

IDENT: 3
PART LENGTH LinkedList: 85
RUNINGPART:LinkedList  INPART:True
CODE LINE 98         return '%s(%r)' % (self.__class__.__name__, list(self))

IDENT: 2
PART LENGTH LinkedList: 86
RUNINGPART:LinkedList  INPART:True
BLANK LINE 17 

RUNINGPART:LinkedList  INPART:True
CODE LINE 99     def __eq__(self, other):

IN PART LinkedList  ADD ITEM __eq__:     def __eq__(self, other):

RUNINGPART:LinkedList  INPART:True
CODE LINE 100         '''

IDENT: 2
PART LENGTH LinkedList: 88
RUNINGPART:LinkedList  INPART:True
CODE LINE 101         Method for de Equal comparation.

IDENT: 2
PART LENGTH LinkedList: 89
RUNINGPART:LinkedList  INPART:True
CODE LINE 102         '''

IDENT: 2
PART LENGTH LinkedList: 90
RUNINGPART:LinkedList  INPART:True
CODE LINE 103         if isinstance(other, LinkedList):

IDENT: 2
PART LENGTH LinkedList: 91
RUNINGPART:LinkedList  INPART:True
CODE LINE 104             return len(self) == len(other) and list(self) == list(other)

IDENT: 3
PART LENGTH LinkedList: 92
RUNINGPART:LinkedList  INPART:True
CODE LINE 105         return not self.isdisjoint(other)

IDENT: 2
PART LENGTH LinkedList: 93
===TOTAL===
 CODE LINES:105
 PARTS:{'Link': <pyloc.Item object at 0xbbcf50>, 'LinkedList': <pyloc.Item object at 0xbbce90>} 
 TOTAL LINES:142 
 BLANK LINE:17 
 COMMEN_LINES:20
Fin De Archivado
